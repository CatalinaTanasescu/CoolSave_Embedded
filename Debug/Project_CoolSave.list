
Project_CoolSave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d90  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000428  08007f30  08007f30  00008f30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008358  08008358  0000a1d4  2**0
                  CONTENTS
  4 .ARM          00000008  08008358  08008358  00009358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008360  08008360  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008360  08008360  00009360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008364  08008364  00009364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08008368  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a4  200001d4  0800853c  0000a1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000478  0800853c  0000a478  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000130e3  00000000  00000000  0000a204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002741  00000000  00000000  0001d2e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001250  00000000  00000000  0001fa28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e5c  00000000  00000000  00020c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000243d3  00000000  00000000  00021ad4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016723  00000000  00000000  00045ea7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc960  00000000  00000000  0005c5ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00138f2a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ef8  00000000  00000000  00138f70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  0013ee68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007f18 	.word	0x08007f18

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	08007f18 	.word	0x08007f18

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96a 	b.w	8000ea4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	460c      	mov	r4, r1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d14e      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf4:	4694      	mov	ip, r2
 8000bf6:	458c      	cmp	ip, r1
 8000bf8:	4686      	mov	lr, r0
 8000bfa:	fab2 f282 	clz	r2, r2
 8000bfe:	d962      	bls.n	8000cc6 <__udivmoddi4+0xde>
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0320 	rsb	r3, r2, #32
 8000c06:	4091      	lsls	r1, r2
 8000c08:	fa20 f303 	lsr.w	r3, r0, r3
 8000c0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c10:	4319      	orrs	r1, r3
 8000c12:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1a:	fa1f f68c 	uxth.w	r6, ip
 8000c1e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c26:	fb07 1114 	mls	r1, r7, r4, r1
 8000c2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2e:	fb04 f106 	mul.w	r1, r4, r6
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c3e:	f080 8112 	bcs.w	8000e66 <__udivmoddi4+0x27e>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 810f 	bls.w	8000e66 <__udivmoddi4+0x27e>
 8000c48:	3c02      	subs	r4, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a59      	subs	r1, r3, r1
 8000c4e:	fa1f f38e 	uxth.w	r3, lr
 8000c52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c56:	fb07 1110 	mls	r1, r7, r0, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb00 f606 	mul.w	r6, r0, r6
 8000c62:	429e      	cmp	r6, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x94>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c6e:	f080 80fc 	bcs.w	8000e6a <__udivmoddi4+0x282>
 8000c72:	429e      	cmp	r6, r3
 8000c74:	f240 80f9 	bls.w	8000e6a <__udivmoddi4+0x282>
 8000c78:	4463      	add	r3, ip
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	1b9b      	subs	r3, r3, r6
 8000c7e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c82:	2100      	movs	r1, #0
 8000c84:	b11d      	cbz	r5, 8000c8e <__udivmoddi4+0xa6>
 8000c86:	40d3      	lsrs	r3, r2
 8000c88:	2200      	movs	r2, #0
 8000c8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d905      	bls.n	8000ca2 <__udivmoddi4+0xba>
 8000c96:	b10d      	cbz	r5, 8000c9c <__udivmoddi4+0xb4>
 8000c98:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e7f5      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000ca2:	fab3 f183 	clz	r1, r3
 8000ca6:	2900      	cmp	r1, #0
 8000ca8:	d146      	bne.n	8000d38 <__udivmoddi4+0x150>
 8000caa:	42a3      	cmp	r3, r4
 8000cac:	d302      	bcc.n	8000cb4 <__udivmoddi4+0xcc>
 8000cae:	4290      	cmp	r0, r2
 8000cb0:	f0c0 80f0 	bcc.w	8000e94 <__udivmoddi4+0x2ac>
 8000cb4:	1a86      	subs	r6, r0, r2
 8000cb6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cba:	2001      	movs	r0, #1
 8000cbc:	2d00      	cmp	r5, #0
 8000cbe:	d0e6      	beq.n	8000c8e <__udivmoddi4+0xa6>
 8000cc0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc4:	e7e3      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	f040 8090 	bne.w	8000dec <__udivmoddi4+0x204>
 8000ccc:	eba1 040c 	sub.w	r4, r1, ip
 8000cd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd4:	fa1f f78c 	uxth.w	r7, ip
 8000cd8:	2101      	movs	r1, #1
 8000cda:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce2:	fb08 4416 	mls	r4, r8, r6, r4
 8000ce6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cea:	fb07 f006 	mul.w	r0, r7, r6
 8000cee:	4298      	cmp	r0, r3
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x11c>
 8000cf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x11a>
 8000cfc:	4298      	cmp	r0, r3
 8000cfe:	f200 80cd 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000d02:	4626      	mov	r6, r4
 8000d04:	1a1c      	subs	r4, r3, r0
 8000d06:	fa1f f38e 	uxth.w	r3, lr
 8000d0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d0e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d16:	fb00 f707 	mul.w	r7, r0, r7
 8000d1a:	429f      	cmp	r7, r3
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x148>
 8000d1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d22:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x146>
 8000d28:	429f      	cmp	r7, r3
 8000d2a:	f200 80b0 	bhi.w	8000e8e <__udivmoddi4+0x2a6>
 8000d2e:	4620      	mov	r0, r4
 8000d30:	1bdb      	subs	r3, r3, r7
 8000d32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d36:	e7a5      	b.n	8000c84 <__udivmoddi4+0x9c>
 8000d38:	f1c1 0620 	rsb	r6, r1, #32
 8000d3c:	408b      	lsls	r3, r1
 8000d3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d42:	431f      	orrs	r7, r3
 8000d44:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d48:	fa04 f301 	lsl.w	r3, r4, r1
 8000d4c:	ea43 030c 	orr.w	r3, r3, ip
 8000d50:	40f4      	lsrs	r4, r6
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	0c38      	lsrs	r0, r7, #16
 8000d58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d5c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d60:	fa1f fc87 	uxth.w	ip, r7
 8000d64:	fb00 441e 	mls	r4, r0, lr, r4
 8000d68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d6c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d70:	45a1      	cmp	r9, r4
 8000d72:	fa02 f201 	lsl.w	r2, r2, r1
 8000d76:	d90a      	bls.n	8000d8e <__udivmoddi4+0x1a6>
 8000d78:	193c      	adds	r4, r7, r4
 8000d7a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d7e:	f080 8084 	bcs.w	8000e8a <__udivmoddi4+0x2a2>
 8000d82:	45a1      	cmp	r9, r4
 8000d84:	f240 8081 	bls.w	8000e8a <__udivmoddi4+0x2a2>
 8000d88:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d8c:	443c      	add	r4, r7
 8000d8e:	eba4 0409 	sub.w	r4, r4, r9
 8000d92:	fa1f f983 	uxth.w	r9, r3
 8000d96:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d9a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d9e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da6:	45a4      	cmp	ip, r4
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x1d2>
 8000daa:	193c      	adds	r4, r7, r4
 8000dac:	f103 30ff 	add.w	r0, r3, #4294967295
 8000db0:	d267      	bcs.n	8000e82 <__udivmoddi4+0x29a>
 8000db2:	45a4      	cmp	ip, r4
 8000db4:	d965      	bls.n	8000e82 <__udivmoddi4+0x29a>
 8000db6:	3b02      	subs	r3, #2
 8000db8:	443c      	add	r4, r7
 8000dba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dbe:	fba0 9302 	umull	r9, r3, r0, r2
 8000dc2:	eba4 040c 	sub.w	r4, r4, ip
 8000dc6:	429c      	cmp	r4, r3
 8000dc8:	46ce      	mov	lr, r9
 8000dca:	469c      	mov	ip, r3
 8000dcc:	d351      	bcc.n	8000e72 <__udivmoddi4+0x28a>
 8000dce:	d04e      	beq.n	8000e6e <__udivmoddi4+0x286>
 8000dd0:	b155      	cbz	r5, 8000de8 <__udivmoddi4+0x200>
 8000dd2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dd6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dda:	fa04 f606 	lsl.w	r6, r4, r6
 8000dde:	40cb      	lsrs	r3, r1
 8000de0:	431e      	orrs	r6, r3
 8000de2:	40cc      	lsrs	r4, r1
 8000de4:	e9c5 6400 	strd	r6, r4, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	e750      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f103 	lsr.w	r1, r0, r3
 8000df4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dfc:	4094      	lsls	r4, r2
 8000dfe:	430c      	orrs	r4, r1
 8000e00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e04:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e08:	fa1f f78c 	uxth.w	r7, ip
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3110 	mls	r1, r8, r0, r3
 8000e14:	0c23      	lsrs	r3, r4, #16
 8000e16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e1a:	fb00 f107 	mul.w	r1, r0, r7
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x24c>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e2a:	d22c      	bcs.n	8000e86 <__udivmoddi4+0x29e>
 8000e2c:	4299      	cmp	r1, r3
 8000e2e:	d92a      	bls.n	8000e86 <__udivmoddi4+0x29e>
 8000e30:	3802      	subs	r0, #2
 8000e32:	4463      	add	r3, ip
 8000e34:	1a5b      	subs	r3, r3, r1
 8000e36:	b2a4      	uxth	r4, r4
 8000e38:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e3c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e44:	fb01 f307 	mul.w	r3, r1, r7
 8000e48:	42a3      	cmp	r3, r4
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x276>
 8000e4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e50:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e54:	d213      	bcs.n	8000e7e <__udivmoddi4+0x296>
 8000e56:	42a3      	cmp	r3, r4
 8000e58:	d911      	bls.n	8000e7e <__udivmoddi4+0x296>
 8000e5a:	3902      	subs	r1, #2
 8000e5c:	4464      	add	r4, ip
 8000e5e:	1ae4      	subs	r4, r4, r3
 8000e60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e64:	e739      	b.n	8000cda <__udivmoddi4+0xf2>
 8000e66:	4604      	mov	r4, r0
 8000e68:	e6f0      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	e706      	b.n	8000c7c <__udivmoddi4+0x94>
 8000e6e:	45c8      	cmp	r8, r9
 8000e70:	d2ae      	bcs.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e72:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e76:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e7a:	3801      	subs	r0, #1
 8000e7c:	e7a8      	b.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e7e:	4631      	mov	r1, r6
 8000e80:	e7ed      	b.n	8000e5e <__udivmoddi4+0x276>
 8000e82:	4603      	mov	r3, r0
 8000e84:	e799      	b.n	8000dba <__udivmoddi4+0x1d2>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e7d4      	b.n	8000e34 <__udivmoddi4+0x24c>
 8000e8a:	46d6      	mov	lr, sl
 8000e8c:	e77f      	b.n	8000d8e <__udivmoddi4+0x1a6>
 8000e8e:	4463      	add	r3, ip
 8000e90:	3802      	subs	r0, #2
 8000e92:	e74d      	b.n	8000d30 <__udivmoddi4+0x148>
 8000e94:	4606      	mov	r6, r0
 8000e96:	4623      	mov	r3, r4
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e70f      	b.n	8000cbc <__udivmoddi4+0xd4>
 8000e9c:	3e02      	subs	r6, #2
 8000e9e:	4463      	add	r3, ip
 8000ea0:	e730      	b.n	8000d04 <__udivmoddi4+0x11c>
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <AP3216C_Init>:

// ALS gain = 0b00 → Range 1 → 0~23360 lux → resolution = 0.36 lux/count
#define ALS_GAIN_SETTING    0x00
#define ALS_RESOLUTION_LUX  0.36f

HAL_StatusTypeDef AP3216C_Init(I2C_HandleTypeDef *hi2c) {
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b088      	sub	sp, #32
 8000eac:	af04      	add	r7, sp, #16
 8000eae:	6078      	str	r0, [r7, #4]
    uint8_t data;
    ap_i2c = hi2c;
 8000eb0:	4a27      	ldr	r2, [pc, #156]	@ (8000f50 <AP3216C_Init+0xa8>)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6013      	str	r3, [r2, #0]

    // Software Reset
    data = 0x04;
 8000eb6:	2304      	movs	r3, #4
 8000eb8:	73fb      	strb	r3, [r7, #15]
    if (HAL_I2C_Mem_Write(ap_i2c, AP3216C_ADDR, SYS_CFG_REG, 1, &data, 1, HAL_MAX_DELAY) != HAL_OK)
 8000eba:	4b25      	ldr	r3, [pc, #148]	@ (8000f50 <AP3216C_Init+0xa8>)
 8000ebc:	6818      	ldr	r0, [r3, #0]
 8000ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8000ec2:	9302      	str	r3, [sp, #8]
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	9301      	str	r3, [sp, #4]
 8000ec8:	f107 030f 	add.w	r3, r7, #15
 8000ecc:	9300      	str	r3, [sp, #0]
 8000ece:	2301      	movs	r3, #1
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	213c      	movs	r1, #60	@ 0x3c
 8000ed4:	f001 f9c0 	bl	8002258 <HAL_I2C_Mem_Write>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <AP3216C_Init+0x3a>
        return HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e032      	b.n	8000f48 <AP3216C_Init+0xa0>
    HAL_Delay(50);
 8000ee2:	2032      	movs	r0, #50	@ 0x32
 8000ee4:	f000 fe68 	bl	8001bb8 <HAL_Delay>

    // Enable only ALS (ambient light sensor)
    data = 0x01;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	73fb      	strb	r3, [r7, #15]
    if (HAL_I2C_Mem_Write(ap_i2c, AP3216C_ADDR, SYS_CFG_REG, 1, &data, 1, HAL_MAX_DELAY) != HAL_OK)
 8000eec:	4b18      	ldr	r3, [pc, #96]	@ (8000f50 <AP3216C_Init+0xa8>)
 8000eee:	6818      	ldr	r0, [r3, #0]
 8000ef0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ef4:	9302      	str	r3, [sp, #8]
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	9301      	str	r3, [sp, #4]
 8000efa:	f107 030f 	add.w	r3, r7, #15
 8000efe:	9300      	str	r3, [sp, #0]
 8000f00:	2301      	movs	r3, #1
 8000f02:	2200      	movs	r2, #0
 8000f04:	213c      	movs	r1, #60	@ 0x3c
 8000f06:	f001 f9a7 	bl	8002258 <HAL_I2C_Mem_Write>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <AP3216C_Init+0x6c>
        return HAL_ERROR;
 8000f10:	2301      	movs	r3, #1
 8000f12:	e019      	b.n	8000f48 <AP3216C_Init+0xa0>

    // Set ALS gain/range and filter persist
    data = ALS_GAIN_SETTING;
 8000f14:	2300      	movs	r3, #0
 8000f16:	73fb      	strb	r3, [r7, #15]
    if (HAL_I2C_Mem_Write(ap_i2c, AP3216C_ADDR, ALS_CFG_REG, 1, &data, 1, HAL_MAX_DELAY) != HAL_OK)
 8000f18:	4b0d      	ldr	r3, [pc, #52]	@ (8000f50 <AP3216C_Init+0xa8>)
 8000f1a:	6818      	ldr	r0, [r3, #0]
 8000f1c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f20:	9302      	str	r3, [sp, #8]
 8000f22:	2301      	movs	r3, #1
 8000f24:	9301      	str	r3, [sp, #4]
 8000f26:	f107 030f 	add.w	r3, r7, #15
 8000f2a:	9300      	str	r3, [sp, #0]
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	2210      	movs	r2, #16
 8000f30:	213c      	movs	r1, #60	@ 0x3c
 8000f32:	f001 f991 	bl	8002258 <HAL_I2C_Mem_Write>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <AP3216C_Init+0x98>
        return HAL_ERROR;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	e003      	b.n	8000f48 <AP3216C_Init+0xa0>

    HAL_Delay(10);
 8000f40:	200a      	movs	r0, #10
 8000f42:	f000 fe39 	bl	8001bb8 <HAL_Delay>
    return HAL_OK;
 8000f46:	2300      	movs	r3, #0
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3710      	adds	r7, #16
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	200001f0 	.word	0x200001f0

08000f54 <AP3216C_ReadALS>:

HAL_StatusTypeDef AP3216C_ReadALS(AP3216C_Data *data) {
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b088      	sub	sp, #32
 8000f58:	af04      	add	r7, sp, #16
 8000f5a:	6078      	str	r0, [r7, #4]
    uint8_t als_low, als_high;

    if (HAL_I2C_Mem_Read(ap_i2c, AP3216C_ADDR, ALS_DATA_L_REG, 1, &als_low, 1, HAL_MAX_DELAY) != HAL_OK)
 8000f5c:	4b21      	ldr	r3, [pc, #132]	@ (8000fe4 <AP3216C_ReadALS+0x90>)
 8000f5e:	6818      	ldr	r0, [r3, #0]
 8000f60:	f04f 33ff 	mov.w	r3, #4294967295
 8000f64:	9302      	str	r3, [sp, #8]
 8000f66:	2301      	movs	r3, #1
 8000f68:	9301      	str	r3, [sp, #4]
 8000f6a:	f107 030f 	add.w	r3, r7, #15
 8000f6e:	9300      	str	r3, [sp, #0]
 8000f70:	2301      	movs	r3, #1
 8000f72:	220c      	movs	r2, #12
 8000f74:	213c      	movs	r1, #60	@ 0x3c
 8000f76:	f001 fa83 	bl	8002480 <HAL_I2C_Mem_Read>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <AP3216C_ReadALS+0x30>
        return HAL_ERROR;
 8000f80:	2301      	movs	r3, #1
 8000f82:	e02b      	b.n	8000fdc <AP3216C_ReadALS+0x88>

    if (HAL_I2C_Mem_Read(ap_i2c, AP3216C_ADDR, ALS_DATA_H_REG, 1, &als_high, 1, HAL_MAX_DELAY) != HAL_OK)
 8000f84:	4b17      	ldr	r3, [pc, #92]	@ (8000fe4 <AP3216C_ReadALS+0x90>)
 8000f86:	6818      	ldr	r0, [r3, #0]
 8000f88:	f04f 33ff 	mov.w	r3, #4294967295
 8000f8c:	9302      	str	r3, [sp, #8]
 8000f8e:	2301      	movs	r3, #1
 8000f90:	9301      	str	r3, [sp, #4]
 8000f92:	f107 030e 	add.w	r3, r7, #14
 8000f96:	9300      	str	r3, [sp, #0]
 8000f98:	2301      	movs	r3, #1
 8000f9a:	220d      	movs	r2, #13
 8000f9c:	213c      	movs	r1, #60	@ 0x3c
 8000f9e:	f001 fa6f 	bl	8002480 <HAL_I2C_Mem_Read>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <AP3216C_ReadALS+0x58>
        return HAL_ERROR;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	e017      	b.n	8000fdc <AP3216C_ReadALS+0x88>

    data->als_raw = ((uint16_t)als_high << 8) | als_low;
 8000fac:	7bbb      	ldrb	r3, [r7, #14]
 8000fae:	021b      	lsls	r3, r3, #8
 8000fb0:	b21a      	sxth	r2, r3
 8000fb2:	7bfb      	ldrb	r3, [r7, #15]
 8000fb4:	b21b      	sxth	r3, r3
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	b21b      	sxth	r3, r3
 8000fba:	b29a      	uxth	r2, r3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	801a      	strh	r2, [r3, #0]
    data->als_lux = data->als_raw * ALS_RESOLUTION_LUX;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	881b      	ldrh	r3, [r3, #0]
 8000fc4:	ee07 3a90 	vmov	s15, r3
 8000fc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fcc:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8000fe8 <AP3216C_ReadALS+0x94>
 8000fd0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	edc3 7a01 	vstr	s15, [r3, #4]

    return HAL_OK;
 8000fda:	2300      	movs	r3, #0
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	200001f0 	.word	0x200001f0
 8000fe8:	3eb851ec 	.word	0x3eb851ec

08000fec <DHT11_Init>:
extern void delay_us(uint16_t us);  // trebuie definit în proiect

static GPIO_TypeDef *DHT_PORT;
static uint16_t DHT_PIN;

void DHT11_Init(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	807b      	strh	r3, [r7, #2]
    DHT_PORT = GPIOx;
 8000ff8:	4a05      	ldr	r2, [pc, #20]	@ (8001010 <DHT11_Init+0x24>)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6013      	str	r3, [r2, #0]
    DHT_PIN = GPIO_Pin;
 8000ffe:	4a05      	ldr	r2, [pc, #20]	@ (8001014 <DHT11_Init+0x28>)
 8001000:	887b      	ldrh	r3, [r7, #2]
 8001002:	8013      	strh	r3, [r2, #0]
}
 8001004:	bf00      	nop
 8001006:	370c      	adds	r7, #12
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	200001f4 	.word	0x200001f4
 8001014:	200001f8 	.word	0x200001f8

08001018 <DHT_SetPinOutput>:

static void DHT_SetPinOutput(void) {
 8001018:	b580      	push	{r7, lr}
 800101a:	b086      	sub	sp, #24
 800101c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101e:	1d3b      	adds	r3, r7, #4
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	605a      	str	r2, [r3, #4]
 8001026:	609a      	str	r2, [r3, #8]
 8001028:	60da      	str	r2, [r3, #12]
 800102a:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = DHT_PIN;
 800102c:	4b08      	ldr	r3, [pc, #32]	@ (8001050 <DHT_SetPinOutput+0x38>)
 800102e:	881b      	ldrh	r3, [r3, #0]
 8001030:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001032:	2301      	movs	r3, #1
 8001034:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001036:	2300      	movs	r3, #0
 8001038:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(DHT_PORT, &GPIO_InitStruct);
 800103a:	4b06      	ldr	r3, [pc, #24]	@ (8001054 <DHT_SetPinOutput+0x3c>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	1d3a      	adds	r2, r7, #4
 8001040:	4611      	mov	r1, r2
 8001042:	4618      	mov	r0, r3
 8001044:	f000 fec2 	bl	8001dcc <HAL_GPIO_Init>
}
 8001048:	bf00      	nop
 800104a:	3718      	adds	r7, #24
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	200001f8 	.word	0x200001f8
 8001054:	200001f4 	.word	0x200001f4

08001058 <DHT_SetPinInput>:

static void DHT_SetPinInput(void) {
 8001058:	b580      	push	{r7, lr}
 800105a:	b086      	sub	sp, #24
 800105c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105e:	1d3b      	adds	r3, r7, #4
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	605a      	str	r2, [r3, #4]
 8001066:	609a      	str	r2, [r3, #8]
 8001068:	60da      	str	r2, [r3, #12]
 800106a:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = DHT_PIN;
 800106c:	4b08      	ldr	r3, [pc, #32]	@ (8001090 <DHT_SetPinInput+0x38>)
 800106e:	881b      	ldrh	r3, [r3, #0]
 8001070:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001072:	2300      	movs	r3, #0
 8001074:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001076:	2300      	movs	r3, #0
 8001078:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(DHT_PORT, &GPIO_InitStruct);
 800107a:	4b06      	ldr	r3, [pc, #24]	@ (8001094 <DHT_SetPinInput+0x3c>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	1d3a      	adds	r2, r7, #4
 8001080:	4611      	mov	r1, r2
 8001082:	4618      	mov	r0, r3
 8001084:	f000 fea2 	bl	8001dcc <HAL_GPIO_Init>
}
 8001088:	bf00      	nop
 800108a:	3718      	adds	r7, #24
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	200001f8 	.word	0x200001f8
 8001094:	200001f4 	.word	0x200001f4

08001098 <DHT_ReadByte>:

static uint8_t DHT_ReadByte(void) {
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
    uint8_t i, byte = 0;
 800109e:	2300      	movs	r3, #0
 80010a0:	71bb      	strb	r3, [r7, #6]
    for (i = 0; i < 8; i++) {
 80010a2:	2300      	movs	r3, #0
 80010a4:	71fb      	strb	r3, [r7, #7]
 80010a6:	e034      	b.n	8001112 <DHT_ReadByte+0x7a>
        while (!HAL_GPIO_ReadPin(DHT_PORT, DHT_PIN));     // wait for high
 80010a8:	bf00      	nop
 80010aa:	4b1e      	ldr	r3, [pc, #120]	@ (8001124 <DHT_ReadByte+0x8c>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a1e      	ldr	r2, [pc, #120]	@ (8001128 <DHT_ReadByte+0x90>)
 80010b0:	8812      	ldrh	r2, [r2, #0]
 80010b2:	4611      	mov	r1, r2
 80010b4:	4618      	mov	r0, r3
 80010b6:	f001 f803 	bl	80020c0 <HAL_GPIO_ReadPin>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d0f4      	beq.n	80010aa <DHT_ReadByte+0x12>
        delay_us(40);                                     // wait 40us
 80010c0:	2028      	movs	r0, #40	@ 0x28
 80010c2:	f000 f89d 	bl	8001200 <delay_us>

        if (HAL_GPIO_ReadPin(DHT_PORT, DHT_PIN))
 80010c6:	4b17      	ldr	r3, [pc, #92]	@ (8001124 <DHT_ReadByte+0x8c>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a17      	ldr	r2, [pc, #92]	@ (8001128 <DHT_ReadByte+0x90>)
 80010cc:	8812      	ldrh	r2, [r2, #0]
 80010ce:	4611      	mov	r1, r2
 80010d0:	4618      	mov	r0, r3
 80010d2:	f000 fff5 	bl	80020c0 <HAL_GPIO_ReadPin>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d00b      	beq.n	80010f4 <DHT_ReadByte+0x5c>
            byte |= (1 << (7 - i));                       // bit = 1
 80010dc:	79fb      	ldrb	r3, [r7, #7]
 80010de:	f1c3 0307 	rsb	r3, r3, #7
 80010e2:	2201      	movs	r2, #1
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	b25a      	sxtb	r2, r3
 80010ea:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	b25b      	sxtb	r3, r3
 80010f2:	71bb      	strb	r3, [r7, #6]
        while (HAL_GPIO_ReadPin(DHT_PORT, DHT_PIN));      // wait for low
 80010f4:	bf00      	nop
 80010f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001124 <DHT_ReadByte+0x8c>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a0b      	ldr	r2, [pc, #44]	@ (8001128 <DHT_ReadByte+0x90>)
 80010fc:	8812      	ldrh	r2, [r2, #0]
 80010fe:	4611      	mov	r1, r2
 8001100:	4618      	mov	r0, r3
 8001102:	f000 ffdd 	bl	80020c0 <HAL_GPIO_ReadPin>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f4      	bne.n	80010f6 <DHT_ReadByte+0x5e>
    for (i = 0; i < 8; i++) {
 800110c:	79fb      	ldrb	r3, [r7, #7]
 800110e:	3301      	adds	r3, #1
 8001110:	71fb      	strb	r3, [r7, #7]
 8001112:	79fb      	ldrb	r3, [r7, #7]
 8001114:	2b07      	cmp	r3, #7
 8001116:	d9c7      	bls.n	80010a8 <DHT_ReadByte+0x10>
    }
    return byte;
 8001118:	79bb      	ldrb	r3, [r7, #6]
}
 800111a:	4618      	mov	r0, r3
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	200001f4 	.word	0x200001f4
 8001128:	200001f8 	.word	0x200001f8

0800112c <DHT11_Read>:

uint8_t DHT11_Read(DHT11_Data *data) {
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
    uint8_t rh_int, rh_dec, temp_int, temp_dec, checksum;

    DHT_SetPinOutput();
 8001134:	f7ff ff70 	bl	8001018 <DHT_SetPinOutput>
    HAL_GPIO_WritePin(DHT_PORT, DHT_PIN, GPIO_PIN_RESET);
 8001138:	4b2f      	ldr	r3, [pc, #188]	@ (80011f8 <DHT11_Read+0xcc>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a2f      	ldr	r2, [pc, #188]	@ (80011fc <DHT11_Read+0xd0>)
 800113e:	8811      	ldrh	r1, [r2, #0]
 8001140:	2200      	movs	r2, #0
 8001142:	4618      	mov	r0, r3
 8001144:	f000 ffd4 	bl	80020f0 <HAL_GPIO_WritePin>
    HAL_Delay(18); // Start signal (18ms)
 8001148:	2012      	movs	r0, #18
 800114a:	f000 fd35 	bl	8001bb8 <HAL_Delay>
    HAL_GPIO_WritePin(DHT_PORT, DHT_PIN, GPIO_PIN_SET);
 800114e:	4b2a      	ldr	r3, [pc, #168]	@ (80011f8 <DHT11_Read+0xcc>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a2a      	ldr	r2, [pc, #168]	@ (80011fc <DHT11_Read+0xd0>)
 8001154:	8811      	ldrh	r1, [r2, #0]
 8001156:	2201      	movs	r2, #1
 8001158:	4618      	mov	r0, r3
 800115a:	f000 ffc9 	bl	80020f0 <HAL_GPIO_WritePin>
    delay_us(30); // Wait 30us
 800115e:	201e      	movs	r0, #30
 8001160:	f000 f84e 	bl	8001200 <delay_us>
    DHT_SetPinInput();
 8001164:	f7ff ff78 	bl	8001058 <DHT_SetPinInput>

    // Check response from DHT11
    if (HAL_GPIO_ReadPin(DHT_PORT, DHT_PIN) == GPIO_PIN_RESET) {
 8001168:	4b23      	ldr	r3, [pc, #140]	@ (80011f8 <DHT11_Read+0xcc>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a23      	ldr	r2, [pc, #140]	@ (80011fc <DHT11_Read+0xd0>)
 800116e:	8812      	ldrh	r2, [r2, #0]
 8001170:	4611      	mov	r1, r2
 8001172:	4618      	mov	r0, r3
 8001174:	f000 ffa4 	bl	80020c0 <HAL_GPIO_ReadPin>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d136      	bne.n	80011ec <DHT11_Read+0xc0>
        delay_us(80);
 800117e:	2050      	movs	r0, #80	@ 0x50
 8001180:	f000 f83e 	bl	8001200 <delay_us>
        if (HAL_GPIO_ReadPin(DHT_PORT, DHT_PIN) == GPIO_PIN_SET) {
 8001184:	4b1c      	ldr	r3, [pc, #112]	@ (80011f8 <DHT11_Read+0xcc>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a1c      	ldr	r2, [pc, #112]	@ (80011fc <DHT11_Read+0xd0>)
 800118a:	8812      	ldrh	r2, [r2, #0]
 800118c:	4611      	mov	r1, r2
 800118e:	4618      	mov	r0, r3
 8001190:	f000 ff96 	bl	80020c0 <HAL_GPIO_ReadPin>
 8001194:	4603      	mov	r3, r0
 8001196:	2b01      	cmp	r3, #1
 8001198:	d128      	bne.n	80011ec <DHT11_Read+0xc0>
            delay_us(80);
 800119a:	2050      	movs	r0, #80	@ 0x50
 800119c:	f000 f830 	bl	8001200 <delay_us>

            rh_int    = DHT_ReadByte();
 80011a0:	f7ff ff7a 	bl	8001098 <DHT_ReadByte>
 80011a4:	4603      	mov	r3, r0
 80011a6:	73fb      	strb	r3, [r7, #15]
            rh_dec    = DHT_ReadByte();
 80011a8:	f7ff ff76 	bl	8001098 <DHT_ReadByte>
 80011ac:	4603      	mov	r3, r0
 80011ae:	73bb      	strb	r3, [r7, #14]
            temp_int  = DHT_ReadByte();
 80011b0:	f7ff ff72 	bl	8001098 <DHT_ReadByte>
 80011b4:	4603      	mov	r3, r0
 80011b6:	737b      	strb	r3, [r7, #13]
            temp_dec  = DHT_ReadByte();
 80011b8:	f7ff ff6e 	bl	8001098 <DHT_ReadByte>
 80011bc:	4603      	mov	r3, r0
 80011be:	733b      	strb	r3, [r7, #12]
            checksum  = DHT_ReadByte();
 80011c0:	f7ff ff6a 	bl	8001098 <DHT_ReadByte>
 80011c4:	4603      	mov	r3, r0
 80011c6:	72fb      	strb	r3, [r7, #11]

            if ((rh_int + rh_dec + temp_int + temp_dec) == checksum) {
 80011c8:	7bfa      	ldrb	r2, [r7, #15]
 80011ca:	7bbb      	ldrb	r3, [r7, #14]
 80011cc:	441a      	add	r2, r3
 80011ce:	7b7b      	ldrb	r3, [r7, #13]
 80011d0:	441a      	add	r2, r3
 80011d2:	7b3b      	ldrb	r3, [r7, #12]
 80011d4:	441a      	add	r2, r3
 80011d6:	7afb      	ldrb	r3, [r7, #11]
 80011d8:	429a      	cmp	r2, r3
 80011da:	d107      	bne.n	80011ec <DHT11_Read+0xc0>
                data->humidity = rh_int;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	7bfa      	ldrb	r2, [r7, #15]
 80011e0:	705a      	strb	r2, [r3, #1]
                data->temperature = temp_int;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	7b7a      	ldrb	r2, [r7, #13]
 80011e6:	701a      	strb	r2, [r3, #0]
                return 1;
 80011e8:	2301      	movs	r3, #1
 80011ea:	e000      	b.n	80011ee <DHT11_Read+0xc2>
            }
        }
    }

    return 0; // read failed
 80011ec:	2300      	movs	r3, #0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	200001f4 	.word	0x200001f4
 80011fc:	200001f8 	.word	0x200001f8

08001200 <delay_us>:

UART_HandleTypeDef huart1;

/* USER CODE BEGIN PV */
void delay_us(uint16_t us)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COUNTER(&htim2, 0);  // Resetează timerul
 800120a:	4b0a      	ldr	r3, [pc, #40]	@ (8001234 <delay_us+0x34>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	2200      	movs	r2, #0
 8001210:	625a      	str	r2, [r3, #36]	@ 0x24
    HAL_TIM_Base_Start(&htim2);
 8001212:	4808      	ldr	r0, [pc, #32]	@ (8001234 <delay_us+0x34>)
 8001214:	f002 fffa 	bl	800420c <HAL_TIM_Base_Start>
    while (__HAL_TIM_GET_COUNTER(&htim2) < us);
 8001218:	bf00      	nop
 800121a:	4b06      	ldr	r3, [pc, #24]	@ (8001234 <delay_us+0x34>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001220:	88fb      	ldrh	r3, [r7, #6]
 8001222:	429a      	cmp	r2, r3
 8001224:	d3f9      	bcc.n	800121a <delay_us+0x1a>
    HAL_TIM_Base_Stop(&htim2);
 8001226:	4803      	ldr	r0, [pc, #12]	@ (8001234 <delay_us+0x34>)
 8001228:	f003 f844 	bl	80042b4 <HAL_TIM_Base_Stop>
}
 800122c:	bf00      	nop
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	20000250 	.word	0x20000250

08001238 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b094      	sub	sp, #80	@ 0x50
 800123c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800123e:	f000 fc3f 	bl	8001ac0 <HAL_Init>
  //AP3216C_Data sensor;

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001242:	f000 f871 	bl	8001328 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001246:	f000 f97f 	bl	8001548 <MX_GPIO_Init>
  MX_I2C1_Init();
 800124a:	f000 f8bf 	bl	80013cc <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800124e:	f000 f94b 	bl	80014e8 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001252:	f000 f8fb 	bl	800144c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  DHT11_Init(GPIOC, GPIO_PIN_7);
 8001256:	2180      	movs	r1, #128	@ 0x80
 8001258:	482c      	ldr	r0, [pc, #176]	@ (800130c <main+0xd4>)
 800125a:	f7ff fec7 	bl	8000fec <DHT11_Init>
  AP3216C_Init(&hi2c1);
 800125e:	482c      	ldr	r0, [pc, #176]	@ (8001310 <main+0xd8>)
 8001260:	f7ff fe22 	bl	8000ea8 <AP3216C_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  DHT11_Data dht;

	  if (DHT11_Read(&dht)) {
 8001264:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff ff5f 	bl	800112c <DHT11_Read>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d015      	beq.n	80012a0 <main+0x68>
	      char msg[64];
	      sprintf(msg, "Temperature: %d degC, Humidity: %d%%\r\n", dht.temperature, dht.humidity);
 8001274:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8001278:	461a      	mov	r2, r3
 800127a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800127e:	1d38      	adds	r0, r7, #4
 8001280:	4924      	ldr	r1, [pc, #144]	@ (8001314 <main+0xdc>)
 8001282:	f004 fd1b 	bl	8005cbc <siprintf>
	      HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8001286:	1d3b      	adds	r3, r7, #4
 8001288:	4618      	mov	r0, r3
 800128a:	f7fe fff9 	bl	8000280 <strlen>
 800128e:	4603      	mov	r3, r0
 8001290:	b29a      	uxth	r2, r3
 8001292:	1d39      	adds	r1, r7, #4
 8001294:	f04f 33ff 	mov.w	r3, #4294967295
 8001298:	481f      	ldr	r0, [pc, #124]	@ (8001318 <main+0xe0>)
 800129a:	f003 facb 	bl	8004834 <HAL_UART_Transmit>
 800129e:	e006      	b.n	80012ae <main+0x76>
	  } else {
	      HAL_UART_Transmit(&huart1, (uint8_t *)"DHT11 read error\r\n", 19, HAL_MAX_DELAY);
 80012a0:	f04f 33ff 	mov.w	r3, #4294967295
 80012a4:	2213      	movs	r2, #19
 80012a6:	491d      	ldr	r1, [pc, #116]	@ (800131c <main+0xe4>)
 80012a8:	481b      	ldr	r0, [pc, #108]	@ (8001318 <main+0xe0>)
 80012aa:	f003 fac3 	bl	8004834 <HAL_UART_Transmit>
	  }
	  HAL_Delay(2000);
 80012ae:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80012b2:	f000 fc81 	bl	8001bb8 <HAL_Delay>


	  AP3216C_Data light;

	  if (AP3216C_ReadALS(&light) == HAL_OK) {
 80012b6:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff fe4a 	bl	8000f54 <AP3216C_ReadALS>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d116      	bne.n	80012f4 <main+0xbc>
	      char msg[64];
	      sprintf(msg, "Ambient Light: %.2f lux\r\n", light.als_lux);
 80012c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff f945 	bl	8000558 <__aeabi_f2d>
 80012ce:	4602      	mov	r2, r0
 80012d0:	460b      	mov	r3, r1
 80012d2:	1d38      	adds	r0, r7, #4
 80012d4:	4912      	ldr	r1, [pc, #72]	@ (8001320 <main+0xe8>)
 80012d6:	f004 fcf1 	bl	8005cbc <siprintf>
	      HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 80012da:	1d3b      	adds	r3, r7, #4
 80012dc:	4618      	mov	r0, r3
 80012de:	f7fe ffcf 	bl	8000280 <strlen>
 80012e2:	4603      	mov	r3, r0
 80012e4:	b29a      	uxth	r2, r3
 80012e6:	1d39      	adds	r1, r7, #4
 80012e8:	f04f 33ff 	mov.w	r3, #4294967295
 80012ec:	480a      	ldr	r0, [pc, #40]	@ (8001318 <main+0xe0>)
 80012ee:	f003 faa1 	bl	8004834 <HAL_UART_Transmit>
 80012f2:	e006      	b.n	8001302 <main+0xca>
	  } else {
	      HAL_UART_Transmit(&huart1, (uint8_t *)"ALS read error\r\n", 17, HAL_MAX_DELAY);
 80012f4:	f04f 33ff 	mov.w	r3, #4294967295
 80012f8:	2211      	movs	r2, #17
 80012fa:	490a      	ldr	r1, [pc, #40]	@ (8001324 <main+0xec>)
 80012fc:	4806      	ldr	r0, [pc, #24]	@ (8001318 <main+0xe0>)
 80012fe:	f003 fa99 	bl	8004834 <HAL_UART_Transmit>
	  }
	  HAL_Delay(5000);
 8001302:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001306:	f000 fc57 	bl	8001bb8 <HAL_Delay>
  {
 800130a:	e7ab      	b.n	8001264 <main+0x2c>
 800130c:	48000800 	.word	0x48000800
 8001310:	200001fc 	.word	0x200001fc
 8001314:	08007f30 	.word	0x08007f30
 8001318:	2000029c 	.word	0x2000029c
 800131c:	08007f58 	.word	0x08007f58
 8001320:	08007f6c 	.word	0x08007f6c
 8001324:	08007f88 	.word	0x08007f88

08001328 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b096      	sub	sp, #88	@ 0x58
 800132c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800132e:	f107 0314 	add.w	r3, r7, #20
 8001332:	2244      	movs	r2, #68	@ 0x44
 8001334:	2100      	movs	r1, #0
 8001336:	4618      	mov	r0, r3
 8001338:	f004 fd23 	bl	8005d82 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800133c:	463b      	mov	r3, r7
 800133e:	2200      	movs	r2, #0
 8001340:	601a      	str	r2, [r3, #0]
 8001342:	605a      	str	r2, [r3, #4]
 8001344:	609a      	str	r2, [r3, #8]
 8001346:	60da      	str	r2, [r3, #12]
 8001348:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800134a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800134e:	f001 fd19 	bl	8002d84 <HAL_PWREx_ControlVoltageScaling>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001358:	f000 f980 	bl	800165c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800135c:	2302      	movs	r3, #2
 800135e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001360:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001364:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8001366:	2340      	movs	r3, #64	@ 0x40
 8001368:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800136a:	2302      	movs	r3, #2
 800136c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800136e:	2302      	movs	r3, #2
 8001370:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001372:	2301      	movs	r3, #1
 8001374:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001376:	230a      	movs	r3, #10
 8001378:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800137a:	2307      	movs	r3, #7
 800137c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800137e:	2302      	movs	r3, #2
 8001380:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001382:	2302      	movs	r3, #2
 8001384:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001386:	f107 0314 	add.w	r3, r7, #20
 800138a:	4618      	mov	r0, r3
 800138c:	f001 fd50 	bl	8002e30 <HAL_RCC_OscConfig>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001396:	f000 f961 	bl	800165c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800139a:	230f      	movs	r3, #15
 800139c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800139e:	2303      	movs	r3, #3
 80013a0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013a2:	2300      	movs	r3, #0
 80013a4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013a6:	2300      	movs	r3, #0
 80013a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013aa:	2300      	movs	r3, #0
 80013ac:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80013ae:	463b      	mov	r3, r7
 80013b0:	2104      	movs	r1, #4
 80013b2:	4618      	mov	r0, r3
 80013b4:	f002 f950 	bl	8003658 <HAL_RCC_ClockConfig>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80013be:	f000 f94d 	bl	800165c <Error_Handler>
  }
}
 80013c2:	bf00      	nop
 80013c4:	3758      	adds	r7, #88	@ 0x58
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
	...

080013cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001440 <MX_I2C1_Init+0x74>)
 80013d2:	4a1c      	ldr	r2, [pc, #112]	@ (8001444 <MX_I2C1_Init+0x78>)
 80013d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 80013d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001440 <MX_I2C1_Init+0x74>)
 80013d8:	4a1b      	ldr	r2, [pc, #108]	@ (8001448 <MX_I2C1_Init+0x7c>)
 80013da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80013dc:	4b18      	ldr	r3, [pc, #96]	@ (8001440 <MX_I2C1_Init+0x74>)
 80013de:	2200      	movs	r2, #0
 80013e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013e2:	4b17      	ldr	r3, [pc, #92]	@ (8001440 <MX_I2C1_Init+0x74>)
 80013e4:	2201      	movs	r2, #1
 80013e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013e8:	4b15      	ldr	r3, [pc, #84]	@ (8001440 <MX_I2C1_Init+0x74>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80013ee:	4b14      	ldr	r3, [pc, #80]	@ (8001440 <MX_I2C1_Init+0x74>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80013f4:	4b12      	ldr	r3, [pc, #72]	@ (8001440 <MX_I2C1_Init+0x74>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013fa:	4b11      	ldr	r3, [pc, #68]	@ (8001440 <MX_I2C1_Init+0x74>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001400:	4b0f      	ldr	r3, [pc, #60]	@ (8001440 <MX_I2C1_Init+0x74>)
 8001402:	2200      	movs	r2, #0
 8001404:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001406:	480e      	ldr	r0, [pc, #56]	@ (8001440 <MX_I2C1_Init+0x74>)
 8001408:	f000 fe8a 	bl	8002120 <HAL_I2C_Init>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001412:	f000 f923 	bl	800165c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001416:	2100      	movs	r1, #0
 8001418:	4809      	ldr	r0, [pc, #36]	@ (8001440 <MX_I2C1_Init+0x74>)
 800141a:	f001 fc0d 	bl	8002c38 <HAL_I2CEx_ConfigAnalogFilter>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001424:	f000 f91a 	bl	800165c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001428:	2100      	movs	r1, #0
 800142a:	4805      	ldr	r0, [pc, #20]	@ (8001440 <MX_I2C1_Init+0x74>)
 800142c:	f001 fc4f 	bl	8002cce <HAL_I2CEx_ConfigDigitalFilter>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001436:	f000 f911 	bl	800165c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800143a:	bf00      	nop
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	200001fc 	.word	0x200001fc
 8001444:	40005400 	.word	0x40005400
 8001448:	10d19ce4 	.word	0x10d19ce4

0800144c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b088      	sub	sp, #32
 8001450:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001452:	f107 0310 	add.w	r3, r7, #16
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	605a      	str	r2, [r3, #4]
 800145c:	609a      	str	r2, [r3, #8]
 800145e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001460:	1d3b      	adds	r3, r7, #4
 8001462:	2200      	movs	r2, #0
 8001464:	601a      	str	r2, [r3, #0]
 8001466:	605a      	str	r2, [r3, #4]
 8001468:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800146a:	4b1e      	ldr	r3, [pc, #120]	@ (80014e4 <MX_TIM2_Init+0x98>)
 800146c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001470:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 8001472:	4b1c      	ldr	r3, [pc, #112]	@ (80014e4 <MX_TIM2_Init+0x98>)
 8001474:	224f      	movs	r2, #79	@ 0x4f
 8001476:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001478:	4b1a      	ldr	r3, [pc, #104]	@ (80014e4 <MX_TIM2_Init+0x98>)
 800147a:	2200      	movs	r2, #0
 800147c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800147e:	4b19      	ldr	r3, [pc, #100]	@ (80014e4 <MX_TIM2_Init+0x98>)
 8001480:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001484:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001486:	4b17      	ldr	r3, [pc, #92]	@ (80014e4 <MX_TIM2_Init+0x98>)
 8001488:	2200      	movs	r2, #0
 800148a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800148c:	4b15      	ldr	r3, [pc, #84]	@ (80014e4 <MX_TIM2_Init+0x98>)
 800148e:	2200      	movs	r2, #0
 8001490:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001492:	4814      	ldr	r0, [pc, #80]	@ (80014e4 <MX_TIM2_Init+0x98>)
 8001494:	f002 fe62 	bl	800415c <HAL_TIM_Base_Init>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800149e:	f000 f8dd 	bl	800165c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014a6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014a8:	f107 0310 	add.w	r3, r7, #16
 80014ac:	4619      	mov	r1, r3
 80014ae:	480d      	ldr	r0, [pc, #52]	@ (80014e4 <MX_TIM2_Init+0x98>)
 80014b0:	f002 ff27 	bl	8004302 <HAL_TIM_ConfigClockSource>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80014ba:	f000 f8cf 	bl	800165c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014be:	2300      	movs	r3, #0
 80014c0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014c2:	2300      	movs	r3, #0
 80014c4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014c6:	1d3b      	adds	r3, r7, #4
 80014c8:	4619      	mov	r1, r3
 80014ca:	4806      	ldr	r0, [pc, #24]	@ (80014e4 <MX_TIM2_Init+0x98>)
 80014cc:	f003 f8f6 	bl	80046bc <HAL_TIMEx_MasterConfigSynchronization>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80014d6:	f000 f8c1 	bl	800165c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80014da:	bf00      	nop
 80014dc:	3720      	adds	r7, #32
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	20000250 	.word	0x20000250

080014e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014ec:	4b14      	ldr	r3, [pc, #80]	@ (8001540 <MX_USART1_UART_Init+0x58>)
 80014ee:	4a15      	ldr	r2, [pc, #84]	@ (8001544 <MX_USART1_UART_Init+0x5c>)
 80014f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80014f2:	4b13      	ldr	r3, [pc, #76]	@ (8001540 <MX_USART1_UART_Init+0x58>)
 80014f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014fa:	4b11      	ldr	r3, [pc, #68]	@ (8001540 <MX_USART1_UART_Init+0x58>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001500:	4b0f      	ldr	r3, [pc, #60]	@ (8001540 <MX_USART1_UART_Init+0x58>)
 8001502:	2200      	movs	r2, #0
 8001504:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001506:	4b0e      	ldr	r3, [pc, #56]	@ (8001540 <MX_USART1_UART_Init+0x58>)
 8001508:	2200      	movs	r2, #0
 800150a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800150c:	4b0c      	ldr	r3, [pc, #48]	@ (8001540 <MX_USART1_UART_Init+0x58>)
 800150e:	220c      	movs	r2, #12
 8001510:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001512:	4b0b      	ldr	r3, [pc, #44]	@ (8001540 <MX_USART1_UART_Init+0x58>)
 8001514:	2200      	movs	r2, #0
 8001516:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001518:	4b09      	ldr	r3, [pc, #36]	@ (8001540 <MX_USART1_UART_Init+0x58>)
 800151a:	2200      	movs	r2, #0
 800151c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800151e:	4b08      	ldr	r3, [pc, #32]	@ (8001540 <MX_USART1_UART_Init+0x58>)
 8001520:	2200      	movs	r2, #0
 8001522:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001524:	4b06      	ldr	r3, [pc, #24]	@ (8001540 <MX_USART1_UART_Init+0x58>)
 8001526:	2200      	movs	r2, #0
 8001528:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800152a:	4805      	ldr	r0, [pc, #20]	@ (8001540 <MX_USART1_UART_Init+0x58>)
 800152c:	f003 f934 	bl	8004798 <HAL_UART_Init>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001536:	f000 f891 	bl	800165c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	2000029c 	.word	0x2000029c
 8001544:	40013800 	.word	0x40013800

08001548 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b08a      	sub	sp, #40	@ 0x28
 800154c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800154e:	f107 0314 	add.w	r3, r7, #20
 8001552:	2200      	movs	r2, #0
 8001554:	601a      	str	r2, [r3, #0]
 8001556:	605a      	str	r2, [r3, #4]
 8001558:	609a      	str	r2, [r3, #8]
 800155a:	60da      	str	r2, [r3, #12]
 800155c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800155e:	4b3d      	ldr	r3, [pc, #244]	@ (8001654 <MX_GPIO_Init+0x10c>)
 8001560:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001562:	4a3c      	ldr	r2, [pc, #240]	@ (8001654 <MX_GPIO_Init+0x10c>)
 8001564:	f043 0304 	orr.w	r3, r3, #4
 8001568:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800156a:	4b3a      	ldr	r3, [pc, #232]	@ (8001654 <MX_GPIO_Init+0x10c>)
 800156c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800156e:	f003 0304 	and.w	r3, r3, #4
 8001572:	613b      	str	r3, [r7, #16]
 8001574:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001576:	4b37      	ldr	r3, [pc, #220]	@ (8001654 <MX_GPIO_Init+0x10c>)
 8001578:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800157a:	4a36      	ldr	r2, [pc, #216]	@ (8001654 <MX_GPIO_Init+0x10c>)
 800157c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001580:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001582:	4b34      	ldr	r3, [pc, #208]	@ (8001654 <MX_GPIO_Init+0x10c>)
 8001584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001586:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800158a:	60fb      	str	r3, [r7, #12]
 800158c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800158e:	4b31      	ldr	r3, [pc, #196]	@ (8001654 <MX_GPIO_Init+0x10c>)
 8001590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001592:	4a30      	ldr	r2, [pc, #192]	@ (8001654 <MX_GPIO_Init+0x10c>)
 8001594:	f043 0301 	orr.w	r3, r3, #1
 8001598:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800159a:	4b2e      	ldr	r3, [pc, #184]	@ (8001654 <MX_GPIO_Init+0x10c>)
 800159c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800159e:	f003 0301 	and.w	r3, r3, #1
 80015a2:	60bb      	str	r3, [r7, #8]
 80015a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015a6:	4b2b      	ldr	r3, [pc, #172]	@ (8001654 <MX_GPIO_Init+0x10c>)
 80015a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015aa:	4a2a      	ldr	r2, [pc, #168]	@ (8001654 <MX_GPIO_Init+0x10c>)
 80015ac:	f043 0302 	orr.w	r3, r3, #2
 80015b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015b2:	4b28      	ldr	r3, [pc, #160]	@ (8001654 <MX_GPIO_Init+0x10c>)
 80015b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015b6:	f003 0302 	and.w	r3, r3, #2
 80015ba:	607b      	str	r3, [r7, #4]
 80015bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 80015be:	2200      	movs	r2, #0
 80015c0:	2120      	movs	r1, #32
 80015c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015c6:	f000 fd93 	bl	80020f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80015ca:	2200      	movs	r2, #0
 80015cc:	2180      	movs	r1, #128	@ 0x80
 80015ce:	4822      	ldr	r0, [pc, #136]	@ (8001658 <MX_GPIO_Init+0x110>)
 80015d0:	f000 fd8e 	bl	80020f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80015d4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015da:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80015de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e0:	2300      	movs	r3, #0
 80015e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015e4:	f107 0314 	add.w	r3, r7, #20
 80015e8:	4619      	mov	r1, r3
 80015ea:	481b      	ldr	r0, [pc, #108]	@ (8001658 <MX_GPIO_Init+0x110>)
 80015ec:	f000 fbee 	bl	8001dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80015f0:	230c      	movs	r3, #12
 80015f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f4:	2302      	movs	r3, #2
 80015f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f8:	2300      	movs	r3, #0
 80015fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015fc:	2303      	movs	r3, #3
 80015fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001600:	2307      	movs	r3, #7
 8001602:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001604:	f107 0314 	add.w	r3, r7, #20
 8001608:	4619      	mov	r1, r3
 800160a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800160e:	f000 fbdd 	bl	8001dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin;
 8001612:	2320      	movs	r3, #32
 8001614:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001616:	2301      	movs	r3, #1
 8001618:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161a:	2300      	movs	r3, #0
 800161c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800161e:	2300      	movs	r3, #0
 8001620:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8001622:	f107 0314 	add.w	r3, r7, #20
 8001626:	4619      	mov	r1, r3
 8001628:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800162c:	f000 fbce 	bl	8001dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001630:	2380      	movs	r3, #128	@ 0x80
 8001632:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001634:	2301      	movs	r3, #1
 8001636:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001638:	2300      	movs	r3, #0
 800163a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800163c:	2300      	movs	r3, #0
 800163e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001640:	f107 0314 	add.w	r3, r7, #20
 8001644:	4619      	mov	r1, r3
 8001646:	4804      	ldr	r0, [pc, #16]	@ (8001658 <MX_GPIO_Init+0x110>)
 8001648:	f000 fbc0 	bl	8001dcc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800164c:	bf00      	nop
 800164e:	3728      	adds	r7, #40	@ 0x28
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	40021000 	.word	0x40021000
 8001658:	48000800 	.word	0x48000800

0800165c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001660:	b672      	cpsid	i
}
 8001662:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001664:	bf00      	nop
 8001666:	e7fd      	b.n	8001664 <Error_Handler+0x8>

08001668 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800166e:	4b0f      	ldr	r3, [pc, #60]	@ (80016ac <HAL_MspInit+0x44>)
 8001670:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001672:	4a0e      	ldr	r2, [pc, #56]	@ (80016ac <HAL_MspInit+0x44>)
 8001674:	f043 0301 	orr.w	r3, r3, #1
 8001678:	6613      	str	r3, [r2, #96]	@ 0x60
 800167a:	4b0c      	ldr	r3, [pc, #48]	@ (80016ac <HAL_MspInit+0x44>)
 800167c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800167e:	f003 0301 	and.w	r3, r3, #1
 8001682:	607b      	str	r3, [r7, #4]
 8001684:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001686:	4b09      	ldr	r3, [pc, #36]	@ (80016ac <HAL_MspInit+0x44>)
 8001688:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800168a:	4a08      	ldr	r2, [pc, #32]	@ (80016ac <HAL_MspInit+0x44>)
 800168c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001690:	6593      	str	r3, [r2, #88]	@ 0x58
 8001692:	4b06      	ldr	r3, [pc, #24]	@ (80016ac <HAL_MspInit+0x44>)
 8001694:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001696:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800169a:	603b      	str	r3, [r7, #0]
 800169c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800169e:	bf00      	nop
 80016a0:	370c      	adds	r7, #12
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	40021000 	.word	0x40021000

080016b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b0a4      	sub	sp, #144	@ 0x90
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b8:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	605a      	str	r2, [r3, #4]
 80016c2:	609a      	str	r2, [r3, #8]
 80016c4:	60da      	str	r2, [r3, #12]
 80016c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016c8:	f107 0314 	add.w	r3, r7, #20
 80016cc:	2268      	movs	r2, #104	@ 0x68
 80016ce:	2100      	movs	r1, #0
 80016d0:	4618      	mov	r0, r3
 80016d2:	f004 fb56 	bl	8005d82 <memset>
  if(hi2c->Instance==I2C1)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a20      	ldr	r2, [pc, #128]	@ (800175c <HAL_I2C_MspInit+0xac>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d139      	bne.n	8001754 <HAL_I2C_MspInit+0xa4>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80016e0:	2340      	movs	r3, #64	@ 0x40
 80016e2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80016e4:	2300      	movs	r3, #0
 80016e6:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016e8:	f107 0314 	add.w	r3, r7, #20
 80016ec:	4618      	mov	r0, r3
 80016ee:	f002 f9d7 	bl	8003aa0 <HAL_RCCEx_PeriphCLKConfig>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80016f8:	f7ff ffb0 	bl	800165c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016fc:	4b18      	ldr	r3, [pc, #96]	@ (8001760 <HAL_I2C_MspInit+0xb0>)
 80016fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001700:	4a17      	ldr	r2, [pc, #92]	@ (8001760 <HAL_I2C_MspInit+0xb0>)
 8001702:	f043 0302 	orr.w	r3, r3, #2
 8001706:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001708:	4b15      	ldr	r3, [pc, #84]	@ (8001760 <HAL_I2C_MspInit+0xb0>)
 800170a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800170c:	f003 0302 	and.w	r3, r3, #2
 8001710:	613b      	str	r3, [r7, #16]
 8001712:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001714:	23c0      	movs	r3, #192	@ 0xc0
 8001716:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001718:	2312      	movs	r3, #18
 800171a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171e:	2300      	movs	r3, #0
 8001720:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001724:	2303      	movs	r3, #3
 8001726:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800172a:	2304      	movs	r3, #4
 800172c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001730:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001734:	4619      	mov	r1, r3
 8001736:	480b      	ldr	r0, [pc, #44]	@ (8001764 <HAL_I2C_MspInit+0xb4>)
 8001738:	f000 fb48 	bl	8001dcc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800173c:	4b08      	ldr	r3, [pc, #32]	@ (8001760 <HAL_I2C_MspInit+0xb0>)
 800173e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001740:	4a07      	ldr	r2, [pc, #28]	@ (8001760 <HAL_I2C_MspInit+0xb0>)
 8001742:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001746:	6593      	str	r3, [r2, #88]	@ 0x58
 8001748:	4b05      	ldr	r3, [pc, #20]	@ (8001760 <HAL_I2C_MspInit+0xb0>)
 800174a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800174c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001750:	60fb      	str	r3, [r7, #12]
 8001752:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001754:	bf00      	nop
 8001756:	3790      	adds	r7, #144	@ 0x90
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	40005400 	.word	0x40005400
 8001760:	40021000 	.word	0x40021000
 8001764:	48000400 	.word	0x48000400

08001768 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001768:	b480      	push	{r7}
 800176a:	b085      	sub	sp, #20
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001778:	d10b      	bne.n	8001792 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800177a:	4b09      	ldr	r3, [pc, #36]	@ (80017a0 <HAL_TIM_Base_MspInit+0x38>)
 800177c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800177e:	4a08      	ldr	r2, [pc, #32]	@ (80017a0 <HAL_TIM_Base_MspInit+0x38>)
 8001780:	f043 0301 	orr.w	r3, r3, #1
 8001784:	6593      	str	r3, [r2, #88]	@ 0x58
 8001786:	4b06      	ldr	r3, [pc, #24]	@ (80017a0 <HAL_TIM_Base_MspInit+0x38>)
 8001788:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800178a:	f003 0301 	and.w	r3, r3, #1
 800178e:	60fb      	str	r3, [r7, #12]
 8001790:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001792:	bf00      	nop
 8001794:	3714      	adds	r7, #20
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	40021000 	.word	0x40021000

080017a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b0a4      	sub	sp, #144	@ 0x90
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ac:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	605a      	str	r2, [r3, #4]
 80017b6:	609a      	str	r2, [r3, #8]
 80017b8:	60da      	str	r2, [r3, #12]
 80017ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017bc:	f107 0314 	add.w	r3, r7, #20
 80017c0:	2268      	movs	r2, #104	@ 0x68
 80017c2:	2100      	movs	r1, #0
 80017c4:	4618      	mov	r0, r3
 80017c6:	f004 fadc 	bl	8005d82 <memset>
  if(huart->Instance==USART1)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a21      	ldr	r2, [pc, #132]	@ (8001854 <HAL_UART_MspInit+0xb0>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d13b      	bne.n	800184c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80017d4:	2301      	movs	r3, #1
 80017d6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80017d8:	2300      	movs	r3, #0
 80017da:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017dc:	f107 0314 	add.w	r3, r7, #20
 80017e0:	4618      	mov	r0, r3
 80017e2:	f002 f95d 	bl	8003aa0 <HAL_RCCEx_PeriphCLKConfig>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80017ec:	f7ff ff36 	bl	800165c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017f0:	4b19      	ldr	r3, [pc, #100]	@ (8001858 <HAL_UART_MspInit+0xb4>)
 80017f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017f4:	4a18      	ldr	r2, [pc, #96]	@ (8001858 <HAL_UART_MspInit+0xb4>)
 80017f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017fa:	6613      	str	r3, [r2, #96]	@ 0x60
 80017fc:	4b16      	ldr	r3, [pc, #88]	@ (8001858 <HAL_UART_MspInit+0xb4>)
 80017fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001800:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001804:	613b      	str	r3, [r7, #16]
 8001806:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001808:	4b13      	ldr	r3, [pc, #76]	@ (8001858 <HAL_UART_MspInit+0xb4>)
 800180a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800180c:	4a12      	ldr	r2, [pc, #72]	@ (8001858 <HAL_UART_MspInit+0xb4>)
 800180e:	f043 0301 	orr.w	r3, r3, #1
 8001812:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001814:	4b10      	ldr	r3, [pc, #64]	@ (8001858 <HAL_UART_MspInit+0xb4>)
 8001816:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001818:	f003 0301 	and.w	r3, r3, #1
 800181c:	60fb      	str	r3, [r7, #12]
 800181e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001820:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001824:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001826:	2302      	movs	r3, #2
 8001828:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182c:	2300      	movs	r3, #0
 800182e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001832:	2303      	movs	r3, #3
 8001834:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001838:	2307      	movs	r3, #7
 800183a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800183e:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001842:	4619      	mov	r1, r3
 8001844:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001848:	f000 fac0 	bl	8001dcc <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800184c:	bf00      	nop
 800184e:	3790      	adds	r7, #144	@ 0x90
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	40013800 	.word	0x40013800
 8001858:	40021000 	.word	0x40021000

0800185c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001860:	bf00      	nop
 8001862:	e7fd      	b.n	8001860 <NMI_Handler+0x4>

08001864 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001868:	bf00      	nop
 800186a:	e7fd      	b.n	8001868 <HardFault_Handler+0x4>

0800186c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001870:	bf00      	nop
 8001872:	e7fd      	b.n	8001870 <MemManage_Handler+0x4>

08001874 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001878:	bf00      	nop
 800187a:	e7fd      	b.n	8001878 <BusFault_Handler+0x4>

0800187c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001880:	bf00      	nop
 8001882:	e7fd      	b.n	8001880 <UsageFault_Handler+0x4>

08001884 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001888:	bf00      	nop
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr

08001892 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001892:	b480      	push	{r7}
 8001894:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001896:	bf00      	nop
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018a4:	bf00      	nop
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr

080018ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018ae:	b580      	push	{r7, lr}
 80018b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018b2:	f000 f961 	bl	8001b78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018b6:	bf00      	nop
 80018b8:	bd80      	pop	{r7, pc}

080018ba <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018ba:	b480      	push	{r7}
 80018bc:	af00      	add	r7, sp, #0
  return 1;
 80018be:	2301      	movs	r3, #1
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr

080018ca <_kill>:

int _kill(int pid, int sig)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b082      	sub	sp, #8
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]
 80018d2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018d4:	f004 faa8 	bl	8005e28 <__errno>
 80018d8:	4603      	mov	r3, r0
 80018da:	2216      	movs	r2, #22
 80018dc:	601a      	str	r2, [r3, #0]
  return -1;
 80018de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}

080018ea <_exit>:

void _exit (int status)
{
 80018ea:	b580      	push	{r7, lr}
 80018ec:	b082      	sub	sp, #8
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80018f2:	f04f 31ff 	mov.w	r1, #4294967295
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f7ff ffe7 	bl	80018ca <_kill>
  while (1) {}    /* Make sure we hang here */
 80018fc:	bf00      	nop
 80018fe:	e7fd      	b.n	80018fc <_exit+0x12>

08001900 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b086      	sub	sp, #24
 8001904:	af00      	add	r7, sp, #0
 8001906:	60f8      	str	r0, [r7, #12]
 8001908:	60b9      	str	r1, [r7, #8]
 800190a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800190c:	2300      	movs	r3, #0
 800190e:	617b      	str	r3, [r7, #20]
 8001910:	e00a      	b.n	8001928 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001912:	f3af 8000 	nop.w
 8001916:	4601      	mov	r1, r0
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	1c5a      	adds	r2, r3, #1
 800191c:	60ba      	str	r2, [r7, #8]
 800191e:	b2ca      	uxtb	r2, r1
 8001920:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	3301      	adds	r3, #1
 8001926:	617b      	str	r3, [r7, #20]
 8001928:	697a      	ldr	r2, [r7, #20]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	429a      	cmp	r2, r3
 800192e:	dbf0      	blt.n	8001912 <_read+0x12>
  }

  return len;
 8001930:	687b      	ldr	r3, [r7, #4]
}
 8001932:	4618      	mov	r0, r3
 8001934:	3718      	adds	r7, #24
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}

0800193a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800193a:	b580      	push	{r7, lr}
 800193c:	b086      	sub	sp, #24
 800193e:	af00      	add	r7, sp, #0
 8001940:	60f8      	str	r0, [r7, #12]
 8001942:	60b9      	str	r1, [r7, #8]
 8001944:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001946:	2300      	movs	r3, #0
 8001948:	617b      	str	r3, [r7, #20]
 800194a:	e009      	b.n	8001960 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	1c5a      	adds	r2, r3, #1
 8001950:	60ba      	str	r2, [r7, #8]
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	4618      	mov	r0, r3
 8001956:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	3301      	adds	r3, #1
 800195e:	617b      	str	r3, [r7, #20]
 8001960:	697a      	ldr	r2, [r7, #20]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	429a      	cmp	r2, r3
 8001966:	dbf1      	blt.n	800194c <_write+0x12>
  }
  return len;
 8001968:	687b      	ldr	r3, [r7, #4]
}
 800196a:	4618      	mov	r0, r3
 800196c:	3718      	adds	r7, #24
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <_close>:

int _close(int file)
{
 8001972:	b480      	push	{r7}
 8001974:	b083      	sub	sp, #12
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800197a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800197e:	4618      	mov	r0, r3
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr

0800198a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800198a:	b480      	push	{r7}
 800198c:	b083      	sub	sp, #12
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
 8001992:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800199a:	605a      	str	r2, [r3, #4]
  return 0;
 800199c:	2300      	movs	r3, #0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr

080019aa <_isatty>:

int _isatty(int file)
{
 80019aa:	b480      	push	{r7}
 80019ac:	b083      	sub	sp, #12
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019b2:	2301      	movs	r3, #1
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	370c      	adds	r7, #12
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b085      	sub	sp, #20
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	60b9      	str	r1, [r7, #8]
 80019ca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019cc:	2300      	movs	r3, #0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3714      	adds	r7, #20
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
	...

080019dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b086      	sub	sp, #24
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019e4:	4a14      	ldr	r2, [pc, #80]	@ (8001a38 <_sbrk+0x5c>)
 80019e6:	4b15      	ldr	r3, [pc, #84]	@ (8001a3c <_sbrk+0x60>)
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019f0:	4b13      	ldr	r3, [pc, #76]	@ (8001a40 <_sbrk+0x64>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d102      	bne.n	80019fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019f8:	4b11      	ldr	r3, [pc, #68]	@ (8001a40 <_sbrk+0x64>)
 80019fa:	4a12      	ldr	r2, [pc, #72]	@ (8001a44 <_sbrk+0x68>)
 80019fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019fe:	4b10      	ldr	r3, [pc, #64]	@ (8001a40 <_sbrk+0x64>)
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4413      	add	r3, r2
 8001a06:	693a      	ldr	r2, [r7, #16]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d207      	bcs.n	8001a1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a0c:	f004 fa0c 	bl	8005e28 <__errno>
 8001a10:	4603      	mov	r3, r0
 8001a12:	220c      	movs	r2, #12
 8001a14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a16:	f04f 33ff 	mov.w	r3, #4294967295
 8001a1a:	e009      	b.n	8001a30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a1c:	4b08      	ldr	r3, [pc, #32]	@ (8001a40 <_sbrk+0x64>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a22:	4b07      	ldr	r3, [pc, #28]	@ (8001a40 <_sbrk+0x64>)
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4413      	add	r3, r2
 8001a2a:	4a05      	ldr	r2, [pc, #20]	@ (8001a40 <_sbrk+0x64>)
 8001a2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3718      	adds	r7, #24
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	20020000 	.word	0x20020000
 8001a3c:	00000400 	.word	0x00000400
 8001a40:	20000324 	.word	0x20000324
 8001a44:	20000478 	.word	0x20000478

08001a48 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001a4c:	4b06      	ldr	r3, [pc, #24]	@ (8001a68 <SystemInit+0x20>)
 8001a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a52:	4a05      	ldr	r2, [pc, #20]	@ (8001a68 <SystemInit+0x20>)
 8001a54:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a58:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001a5c:	bf00      	nop
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	e000ed00 	.word	0xe000ed00

08001a6c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001a6c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001aa4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a70:	f7ff ffea 	bl	8001a48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a74:	480c      	ldr	r0, [pc, #48]	@ (8001aa8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a76:	490d      	ldr	r1, [pc, #52]	@ (8001aac <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a78:	4a0d      	ldr	r2, [pc, #52]	@ (8001ab0 <LoopForever+0xe>)
  movs r3, #0
 8001a7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a7c:	e002      	b.n	8001a84 <LoopCopyDataInit>

08001a7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a82:	3304      	adds	r3, #4

08001a84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a88:	d3f9      	bcc.n	8001a7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a8a:	4a0a      	ldr	r2, [pc, #40]	@ (8001ab4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a8c:	4c0a      	ldr	r4, [pc, #40]	@ (8001ab8 <LoopForever+0x16>)
  movs r3, #0
 8001a8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a90:	e001      	b.n	8001a96 <LoopFillZerobss>

08001a92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a94:	3204      	adds	r2, #4

08001a96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a98:	d3fb      	bcc.n	8001a92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a9a:	f004 f9cb 	bl	8005e34 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a9e:	f7ff fbcb 	bl	8001238 <main>

08001aa2 <LoopForever>:

LoopForever:
    b LoopForever
 8001aa2:	e7fe      	b.n	8001aa2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001aa4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001aa8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001aac:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001ab0:	08008368 	.word	0x08008368
  ldr r2, =_sbss
 8001ab4:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001ab8:	20000478 	.word	0x20000478

08001abc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001abc:	e7fe      	b.n	8001abc <ADC1_IRQHandler>
	...

08001ac0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001aca:	4b0c      	ldr	r3, [pc, #48]	@ (8001afc <HAL_Init+0x3c>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a0b      	ldr	r2, [pc, #44]	@ (8001afc <HAL_Init+0x3c>)
 8001ad0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ad4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ad6:	2003      	movs	r0, #3
 8001ad8:	f000 f944 	bl	8001d64 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001adc:	2000      	movs	r0, #0
 8001ade:	f000 f80f 	bl	8001b00 <HAL_InitTick>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d002      	beq.n	8001aee <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	71fb      	strb	r3, [r7, #7]
 8001aec:	e001      	b.n	8001af2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001aee:	f7ff fdbb 	bl	8001668 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001af2:	79fb      	ldrb	r3, [r7, #7]
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3708      	adds	r7, #8
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	40022000 	.word	0x40022000

08001b00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001b0c:	4b17      	ldr	r3, [pc, #92]	@ (8001b6c <HAL_InitTick+0x6c>)
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d023      	beq.n	8001b5c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001b14:	4b16      	ldr	r3, [pc, #88]	@ (8001b70 <HAL_InitTick+0x70>)
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	4b14      	ldr	r3, [pc, #80]	@ (8001b6c <HAL_InitTick+0x6c>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b22:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f000 f941 	bl	8001db2 <HAL_SYSTICK_Config>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d10f      	bne.n	8001b56 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2b0f      	cmp	r3, #15
 8001b3a:	d809      	bhi.n	8001b50 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	6879      	ldr	r1, [r7, #4]
 8001b40:	f04f 30ff 	mov.w	r0, #4294967295
 8001b44:	f000 f919 	bl	8001d7a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b48:	4a0a      	ldr	r2, [pc, #40]	@ (8001b74 <HAL_InitTick+0x74>)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6013      	str	r3, [r2, #0]
 8001b4e:	e007      	b.n	8001b60 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	73fb      	strb	r3, [r7, #15]
 8001b54:	e004      	b.n	8001b60 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	73fb      	strb	r3, [r7, #15]
 8001b5a:	e001      	b.n	8001b60 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3710      	adds	r7, #16
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	20000008 	.word	0x20000008
 8001b70:	20000000 	.word	0x20000000
 8001b74:	20000004 	.word	0x20000004

08001b78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b7c:	4b06      	ldr	r3, [pc, #24]	@ (8001b98 <HAL_IncTick+0x20>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	461a      	mov	r2, r3
 8001b82:	4b06      	ldr	r3, [pc, #24]	@ (8001b9c <HAL_IncTick+0x24>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4413      	add	r3, r2
 8001b88:	4a04      	ldr	r2, [pc, #16]	@ (8001b9c <HAL_IncTick+0x24>)
 8001b8a:	6013      	str	r3, [r2, #0]
}
 8001b8c:	bf00      	nop
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	20000008 	.word	0x20000008
 8001b9c:	20000328 	.word	0x20000328

08001ba0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ba4:	4b03      	ldr	r3, [pc, #12]	@ (8001bb4 <HAL_GetTick+0x14>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	20000328 	.word	0x20000328

08001bb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bc0:	f7ff ffee 	bl	8001ba0 <HAL_GetTick>
 8001bc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bd0:	d005      	beq.n	8001bde <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001bd2:	4b0a      	ldr	r3, [pc, #40]	@ (8001bfc <HAL_Delay+0x44>)
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	4413      	add	r3, r2
 8001bdc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bde:	bf00      	nop
 8001be0:	f7ff ffde 	bl	8001ba0 <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	68fa      	ldr	r2, [r7, #12]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d8f7      	bhi.n	8001be0 <HAL_Delay+0x28>
  {
  }
}
 8001bf0:	bf00      	nop
 8001bf2:	bf00      	nop
 8001bf4:	3710      	adds	r7, #16
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	20000008 	.word	0x20000008

08001c00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b085      	sub	sp, #20
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	f003 0307 	and.w	r3, r3, #7
 8001c0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c10:	4b0c      	ldr	r3, [pc, #48]	@ (8001c44 <__NVIC_SetPriorityGrouping+0x44>)
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c16:	68ba      	ldr	r2, [r7, #8]
 8001c18:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c28:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c32:	4a04      	ldr	r2, [pc, #16]	@ (8001c44 <__NVIC_SetPriorityGrouping+0x44>)
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	60d3      	str	r3, [r2, #12]
}
 8001c38:	bf00      	nop
 8001c3a:	3714      	adds	r7, #20
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr
 8001c44:	e000ed00 	.word	0xe000ed00

08001c48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c4c:	4b04      	ldr	r3, [pc, #16]	@ (8001c60 <__NVIC_GetPriorityGrouping+0x18>)
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	0a1b      	lsrs	r3, r3, #8
 8001c52:	f003 0307 	and.w	r3, r3, #7
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr
 8001c60:	e000ed00 	.word	0xe000ed00

08001c64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	6039      	str	r1, [r7, #0]
 8001c6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	db0a      	blt.n	8001c8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	b2da      	uxtb	r2, r3
 8001c7c:	490c      	ldr	r1, [pc, #48]	@ (8001cb0 <__NVIC_SetPriority+0x4c>)
 8001c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c82:	0112      	lsls	r2, r2, #4
 8001c84:	b2d2      	uxtb	r2, r2
 8001c86:	440b      	add	r3, r1
 8001c88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c8c:	e00a      	b.n	8001ca4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	b2da      	uxtb	r2, r3
 8001c92:	4908      	ldr	r1, [pc, #32]	@ (8001cb4 <__NVIC_SetPriority+0x50>)
 8001c94:	79fb      	ldrb	r3, [r7, #7]
 8001c96:	f003 030f 	and.w	r3, r3, #15
 8001c9a:	3b04      	subs	r3, #4
 8001c9c:	0112      	lsls	r2, r2, #4
 8001c9e:	b2d2      	uxtb	r2, r2
 8001ca0:	440b      	add	r3, r1
 8001ca2:	761a      	strb	r2, [r3, #24]
}
 8001ca4:	bf00      	nop
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr
 8001cb0:	e000e100 	.word	0xe000e100
 8001cb4:	e000ed00 	.word	0xe000ed00

08001cb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b089      	sub	sp, #36	@ 0x24
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	60f8      	str	r0, [r7, #12]
 8001cc0:	60b9      	str	r1, [r7, #8]
 8001cc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	f003 0307 	and.w	r3, r3, #7
 8001cca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	f1c3 0307 	rsb	r3, r3, #7
 8001cd2:	2b04      	cmp	r3, #4
 8001cd4:	bf28      	it	cs
 8001cd6:	2304      	movcs	r3, #4
 8001cd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	3304      	adds	r3, #4
 8001cde:	2b06      	cmp	r3, #6
 8001ce0:	d902      	bls.n	8001ce8 <NVIC_EncodePriority+0x30>
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	3b03      	subs	r3, #3
 8001ce6:	e000      	b.n	8001cea <NVIC_EncodePriority+0x32>
 8001ce8:	2300      	movs	r3, #0
 8001cea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cec:	f04f 32ff 	mov.w	r2, #4294967295
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf6:	43da      	mvns	r2, r3
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	401a      	ands	r2, r3
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d00:	f04f 31ff 	mov.w	r1, #4294967295
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	fa01 f303 	lsl.w	r3, r1, r3
 8001d0a:	43d9      	mvns	r1, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d10:	4313      	orrs	r3, r2
         );
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3724      	adds	r7, #36	@ 0x24
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
	...

08001d20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	3b01      	subs	r3, #1
 8001d2c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d30:	d301      	bcc.n	8001d36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d32:	2301      	movs	r3, #1
 8001d34:	e00f      	b.n	8001d56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d36:	4a0a      	ldr	r2, [pc, #40]	@ (8001d60 <SysTick_Config+0x40>)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	3b01      	subs	r3, #1
 8001d3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d3e:	210f      	movs	r1, #15
 8001d40:	f04f 30ff 	mov.w	r0, #4294967295
 8001d44:	f7ff ff8e 	bl	8001c64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d48:	4b05      	ldr	r3, [pc, #20]	@ (8001d60 <SysTick_Config+0x40>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d4e:	4b04      	ldr	r3, [pc, #16]	@ (8001d60 <SysTick_Config+0x40>)
 8001d50:	2207      	movs	r2, #7
 8001d52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d54:	2300      	movs	r3, #0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	e000e010 	.word	0xe000e010

08001d64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f7ff ff47 	bl	8001c00 <__NVIC_SetPriorityGrouping>
}
 8001d72:	bf00      	nop
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b086      	sub	sp, #24
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	4603      	mov	r3, r0
 8001d82:	60b9      	str	r1, [r7, #8]
 8001d84:	607a      	str	r2, [r7, #4]
 8001d86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d8c:	f7ff ff5c 	bl	8001c48 <__NVIC_GetPriorityGrouping>
 8001d90:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	68b9      	ldr	r1, [r7, #8]
 8001d96:	6978      	ldr	r0, [r7, #20]
 8001d98:	f7ff ff8e 	bl	8001cb8 <NVIC_EncodePriority>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001da2:	4611      	mov	r1, r2
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7ff ff5d 	bl	8001c64 <__NVIC_SetPriority>
}
 8001daa:	bf00      	nop
 8001dac:	3718      	adds	r7, #24
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}

08001db2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001db2:	b580      	push	{r7, lr}
 8001db4:	b082      	sub	sp, #8
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f7ff ffb0 	bl	8001d20 <SysTick_Config>
 8001dc0:	4603      	mov	r3, r0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
	...

08001dcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b087      	sub	sp, #28
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dda:	e154      	b.n	8002086 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	2101      	movs	r1, #1
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	fa01 f303 	lsl.w	r3, r1, r3
 8001de8:	4013      	ands	r3, r2
 8001dea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	f000 8146 	beq.w	8002080 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f003 0303 	and.w	r3, r3, #3
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d005      	beq.n	8001e0c <HAL_GPIO_Init+0x40>
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f003 0303 	and.w	r3, r3, #3
 8001e08:	2b02      	cmp	r3, #2
 8001e0a:	d130      	bne.n	8001e6e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	005b      	lsls	r3, r3, #1
 8001e16:	2203      	movs	r2, #3
 8001e18:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1c:	43db      	mvns	r3, r3
 8001e1e:	693a      	ldr	r2, [r7, #16]
 8001e20:	4013      	ands	r3, r2
 8001e22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	68da      	ldr	r2, [r3, #12]
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e30:	693a      	ldr	r2, [r7, #16]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	693a      	ldr	r2, [r7, #16]
 8001e3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e42:	2201      	movs	r2, #1
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4a:	43db      	mvns	r3, r3
 8001e4c:	693a      	ldr	r2, [r7, #16]
 8001e4e:	4013      	ands	r3, r2
 8001e50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	091b      	lsrs	r3, r3, #4
 8001e58:	f003 0201 	and.w	r2, r3, #1
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e62:	693a      	ldr	r2, [r7, #16]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	693a      	ldr	r2, [r7, #16]
 8001e6c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f003 0303 	and.w	r3, r3, #3
 8001e76:	2b03      	cmp	r3, #3
 8001e78:	d017      	beq.n	8001eaa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	2203      	movs	r2, #3
 8001e86:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8a:	43db      	mvns	r3, r3
 8001e8c:	693a      	ldr	r2, [r7, #16]
 8001e8e:	4013      	ands	r3, r2
 8001e90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	689a      	ldr	r2, [r3, #8]
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9e:	693a      	ldr	r2, [r7, #16]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	693a      	ldr	r2, [r7, #16]
 8001ea8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f003 0303 	and.w	r3, r3, #3
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d123      	bne.n	8001efe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	08da      	lsrs	r2, r3, #3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	3208      	adds	r2, #8
 8001ebe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ec2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	f003 0307 	and.w	r3, r3, #7
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	220f      	movs	r2, #15
 8001ece:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed2:	43db      	mvns	r3, r3
 8001ed4:	693a      	ldr	r2, [r7, #16]
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	691a      	ldr	r2, [r3, #16]
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	f003 0307 	and.w	r3, r3, #7
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eea:	693a      	ldr	r2, [r7, #16]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	08da      	lsrs	r2, r3, #3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	3208      	adds	r2, #8
 8001ef8:	6939      	ldr	r1, [r7, #16]
 8001efa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	2203      	movs	r2, #3
 8001f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0e:	43db      	mvns	r3, r3
 8001f10:	693a      	ldr	r2, [r7, #16]
 8001f12:	4013      	ands	r3, r2
 8001f14:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f003 0203 	and.w	r2, r3, #3
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	fa02 f303 	lsl.w	r3, r2, r3
 8001f26:	693a      	ldr	r2, [r7, #16]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	693a      	ldr	r2, [r7, #16]
 8001f30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	f000 80a0 	beq.w	8002080 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f40:	4b58      	ldr	r3, [pc, #352]	@ (80020a4 <HAL_GPIO_Init+0x2d8>)
 8001f42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f44:	4a57      	ldr	r2, [pc, #348]	@ (80020a4 <HAL_GPIO_Init+0x2d8>)
 8001f46:	f043 0301 	orr.w	r3, r3, #1
 8001f4a:	6613      	str	r3, [r2, #96]	@ 0x60
 8001f4c:	4b55      	ldr	r3, [pc, #340]	@ (80020a4 <HAL_GPIO_Init+0x2d8>)
 8001f4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f50:	f003 0301 	and.w	r3, r3, #1
 8001f54:	60bb      	str	r3, [r7, #8]
 8001f56:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f58:	4a53      	ldr	r2, [pc, #332]	@ (80020a8 <HAL_GPIO_Init+0x2dc>)
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	089b      	lsrs	r3, r3, #2
 8001f5e:	3302      	adds	r3, #2
 8001f60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f64:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	f003 0303 	and.w	r3, r3, #3
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	220f      	movs	r2, #15
 8001f70:	fa02 f303 	lsl.w	r3, r2, r3
 8001f74:	43db      	mvns	r3, r3
 8001f76:	693a      	ldr	r2, [r7, #16]
 8001f78:	4013      	ands	r3, r2
 8001f7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001f82:	d019      	beq.n	8001fb8 <HAL_GPIO_Init+0x1ec>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	4a49      	ldr	r2, [pc, #292]	@ (80020ac <HAL_GPIO_Init+0x2e0>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d013      	beq.n	8001fb4 <HAL_GPIO_Init+0x1e8>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4a48      	ldr	r2, [pc, #288]	@ (80020b0 <HAL_GPIO_Init+0x2e4>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d00d      	beq.n	8001fb0 <HAL_GPIO_Init+0x1e4>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	4a47      	ldr	r2, [pc, #284]	@ (80020b4 <HAL_GPIO_Init+0x2e8>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d007      	beq.n	8001fac <HAL_GPIO_Init+0x1e0>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	4a46      	ldr	r2, [pc, #280]	@ (80020b8 <HAL_GPIO_Init+0x2ec>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d101      	bne.n	8001fa8 <HAL_GPIO_Init+0x1dc>
 8001fa4:	2304      	movs	r3, #4
 8001fa6:	e008      	b.n	8001fba <HAL_GPIO_Init+0x1ee>
 8001fa8:	2307      	movs	r3, #7
 8001faa:	e006      	b.n	8001fba <HAL_GPIO_Init+0x1ee>
 8001fac:	2303      	movs	r3, #3
 8001fae:	e004      	b.n	8001fba <HAL_GPIO_Init+0x1ee>
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	e002      	b.n	8001fba <HAL_GPIO_Init+0x1ee>
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e000      	b.n	8001fba <HAL_GPIO_Init+0x1ee>
 8001fb8:	2300      	movs	r3, #0
 8001fba:	697a      	ldr	r2, [r7, #20]
 8001fbc:	f002 0203 	and.w	r2, r2, #3
 8001fc0:	0092      	lsls	r2, r2, #2
 8001fc2:	4093      	lsls	r3, r2
 8001fc4:	693a      	ldr	r2, [r7, #16]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001fca:	4937      	ldr	r1, [pc, #220]	@ (80020a8 <HAL_GPIO_Init+0x2dc>)
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	089b      	lsrs	r3, r3, #2
 8001fd0:	3302      	adds	r3, #2
 8001fd2:	693a      	ldr	r2, [r7, #16]
 8001fd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001fd8:	4b38      	ldr	r3, [pc, #224]	@ (80020bc <HAL_GPIO_Init+0x2f0>)
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	43db      	mvns	r3, r3
 8001fe2:	693a      	ldr	r2, [r7, #16]
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d003      	beq.n	8001ffc <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001ff4:	693a      	ldr	r2, [r7, #16]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ffc:	4a2f      	ldr	r2, [pc, #188]	@ (80020bc <HAL_GPIO_Init+0x2f0>)
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002002:	4b2e      	ldr	r3, [pc, #184]	@ (80020bc <HAL_GPIO_Init+0x2f0>)
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	43db      	mvns	r3, r3
 800200c:	693a      	ldr	r2, [r7, #16]
 800200e:	4013      	ands	r3, r2
 8002010:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d003      	beq.n	8002026 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800201e:	693a      	ldr	r2, [r7, #16]
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	4313      	orrs	r3, r2
 8002024:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002026:	4a25      	ldr	r2, [pc, #148]	@ (80020bc <HAL_GPIO_Init+0x2f0>)
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800202c:	4b23      	ldr	r3, [pc, #140]	@ (80020bc <HAL_GPIO_Init+0x2f0>)
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	43db      	mvns	r3, r3
 8002036:	693a      	ldr	r2, [r7, #16]
 8002038:	4013      	ands	r3, r2
 800203a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d003      	beq.n	8002050 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002048:	693a      	ldr	r2, [r7, #16]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	4313      	orrs	r3, r2
 800204e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002050:	4a1a      	ldr	r2, [pc, #104]	@ (80020bc <HAL_GPIO_Init+0x2f0>)
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002056:	4b19      	ldr	r3, [pc, #100]	@ (80020bc <HAL_GPIO_Init+0x2f0>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	43db      	mvns	r3, r3
 8002060:	693a      	ldr	r2, [r7, #16]
 8002062:	4013      	ands	r3, r2
 8002064:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d003      	beq.n	800207a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002072:	693a      	ldr	r2, [r7, #16]
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	4313      	orrs	r3, r2
 8002078:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800207a:	4a10      	ldr	r2, [pc, #64]	@ (80020bc <HAL_GPIO_Init+0x2f0>)
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	3301      	adds	r3, #1
 8002084:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	fa22 f303 	lsr.w	r3, r2, r3
 8002090:	2b00      	cmp	r3, #0
 8002092:	f47f aea3 	bne.w	8001ddc <HAL_GPIO_Init+0x10>
  }
}
 8002096:	bf00      	nop
 8002098:	bf00      	nop
 800209a:	371c      	adds	r7, #28
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr
 80020a4:	40021000 	.word	0x40021000
 80020a8:	40010000 	.word	0x40010000
 80020ac:	48000400 	.word	0x48000400
 80020b0:	48000800 	.word	0x48000800
 80020b4:	48000c00 	.word	0x48000c00
 80020b8:	48001000 	.word	0x48001000
 80020bc:	40010400 	.word	0x40010400

080020c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b085      	sub	sp, #20
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	460b      	mov	r3, r1
 80020ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	691a      	ldr	r2, [r3, #16]
 80020d0:	887b      	ldrh	r3, [r7, #2]
 80020d2:	4013      	ands	r3, r2
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d002      	beq.n	80020de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020d8:	2301      	movs	r3, #1
 80020da:	73fb      	strb	r3, [r7, #15]
 80020dc:	e001      	b.n	80020e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020de:	2300      	movs	r3, #0
 80020e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3714      	adds	r7, #20
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	460b      	mov	r3, r1
 80020fa:	807b      	strh	r3, [r7, #2]
 80020fc:	4613      	mov	r3, r2
 80020fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002100:	787b      	ldrb	r3, [r7, #1]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d003      	beq.n	800210e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002106:	887a      	ldrh	r2, [r7, #2]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800210c:	e002      	b.n	8002114 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800210e:	887a      	ldrh	r2, [r7, #2]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002114:	bf00      	nop
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d101      	bne.n	8002132 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e08d      	b.n	800224e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002138:	b2db      	uxtb	r3, r3
 800213a:	2b00      	cmp	r3, #0
 800213c:	d106      	bne.n	800214c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2200      	movs	r2, #0
 8002142:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f7ff fab2 	bl	80016b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2224      	movs	r2, #36	@ 0x24
 8002150:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f022 0201 	bic.w	r2, r2, #1
 8002162:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	685a      	ldr	r2, [r3, #4]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002170:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	689a      	ldr	r2, [r3, #8]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002180:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	2b01      	cmp	r3, #1
 8002188:	d107      	bne.n	800219a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	689a      	ldr	r2, [r3, #8]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002196:	609a      	str	r2, [r3, #8]
 8002198:	e006      	b.n	80021a8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	689a      	ldr	r2, [r3, #8]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80021a6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d108      	bne.n	80021c2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	685a      	ldr	r2, [r3, #4]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80021be:	605a      	str	r2, [r3, #4]
 80021c0:	e007      	b.n	80021d2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	685a      	ldr	r2, [r3, #4]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80021d0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	6812      	ldr	r2, [r2, #0]
 80021dc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80021e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80021e4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	68da      	ldr	r2, [r3, #12]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80021f4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	691a      	ldr	r2, [r3, #16]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	695b      	ldr	r3, [r3, #20]
 80021fe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	699b      	ldr	r3, [r3, #24]
 8002206:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	430a      	orrs	r2, r1
 800220e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	69d9      	ldr	r1, [r3, #28]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a1a      	ldr	r2, [r3, #32]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	430a      	orrs	r2, r1
 800221e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f042 0201 	orr.w	r2, r2, #1
 800222e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2200      	movs	r2, #0
 8002234:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2220      	movs	r2, #32
 800223a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2200      	movs	r2, #0
 8002242:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2200      	movs	r2, #0
 8002248:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800224c:	2300      	movs	r3, #0
}
 800224e:	4618      	mov	r0, r3
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
	...

08002258 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b088      	sub	sp, #32
 800225c:	af02      	add	r7, sp, #8
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	4608      	mov	r0, r1
 8002262:	4611      	mov	r1, r2
 8002264:	461a      	mov	r2, r3
 8002266:	4603      	mov	r3, r0
 8002268:	817b      	strh	r3, [r7, #10]
 800226a:	460b      	mov	r3, r1
 800226c:	813b      	strh	r3, [r7, #8]
 800226e:	4613      	mov	r3, r2
 8002270:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002278:	b2db      	uxtb	r3, r3
 800227a:	2b20      	cmp	r3, #32
 800227c:	f040 80f9 	bne.w	8002472 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002280:	6a3b      	ldr	r3, [r7, #32]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d002      	beq.n	800228c <HAL_I2C_Mem_Write+0x34>
 8002286:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002288:	2b00      	cmp	r3, #0
 800228a:	d105      	bne.n	8002298 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002292:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e0ed      	b.n	8002474 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d101      	bne.n	80022a6 <HAL_I2C_Mem_Write+0x4e>
 80022a2:	2302      	movs	r3, #2
 80022a4:	e0e6      	b.n	8002474 <HAL_I2C_Mem_Write+0x21c>
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2201      	movs	r2, #1
 80022aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80022ae:	f7ff fc77 	bl	8001ba0 <HAL_GetTick>
 80022b2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	9300      	str	r3, [sp, #0]
 80022b8:	2319      	movs	r3, #25
 80022ba:	2201      	movs	r2, #1
 80022bc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80022c0:	68f8      	ldr	r0, [r7, #12]
 80022c2:	f000 fac3 	bl	800284c <I2C_WaitOnFlagUntilTimeout>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d001      	beq.n	80022d0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e0d1      	b.n	8002474 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2221      	movs	r2, #33	@ 0x21
 80022d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2240      	movs	r2, #64	@ 0x40
 80022dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2200      	movs	r2, #0
 80022e4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	6a3a      	ldr	r2, [r7, #32]
 80022ea:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80022f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2200      	movs	r2, #0
 80022f6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80022f8:	88f8      	ldrh	r0, [r7, #6]
 80022fa:	893a      	ldrh	r2, [r7, #8]
 80022fc:	8979      	ldrh	r1, [r7, #10]
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	9301      	str	r3, [sp, #4]
 8002302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002304:	9300      	str	r3, [sp, #0]
 8002306:	4603      	mov	r3, r0
 8002308:	68f8      	ldr	r0, [r7, #12]
 800230a:	f000 f9d3 	bl	80026b4 <I2C_RequestMemoryWrite>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d005      	beq.n	8002320 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2200      	movs	r2, #0
 8002318:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e0a9      	b.n	8002474 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002324:	b29b      	uxth	r3, r3
 8002326:	2bff      	cmp	r3, #255	@ 0xff
 8002328:	d90e      	bls.n	8002348 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	22ff      	movs	r2, #255	@ 0xff
 800232e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002334:	b2da      	uxtb	r2, r3
 8002336:	8979      	ldrh	r1, [r7, #10]
 8002338:	2300      	movs	r3, #0
 800233a:	9300      	str	r3, [sp, #0]
 800233c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002340:	68f8      	ldr	r0, [r7, #12]
 8002342:	f000 fc47 	bl	8002bd4 <I2C_TransferConfig>
 8002346:	e00f      	b.n	8002368 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800234c:	b29a      	uxth	r2, r3
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002356:	b2da      	uxtb	r2, r3
 8002358:	8979      	ldrh	r1, [r7, #10]
 800235a:	2300      	movs	r3, #0
 800235c:	9300      	str	r3, [sp, #0]
 800235e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002362:	68f8      	ldr	r0, [r7, #12]
 8002364:	f000 fc36 	bl	8002bd4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002368:	697a      	ldr	r2, [r7, #20]
 800236a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800236c:	68f8      	ldr	r0, [r7, #12]
 800236e:	f000 fac6 	bl	80028fe <I2C_WaitOnTXISFlagUntilTimeout>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d001      	beq.n	800237c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e07b      	b.n	8002474 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002380:	781a      	ldrb	r2, [r3, #0]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800238c:	1c5a      	adds	r2, r3, #1
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002396:	b29b      	uxth	r3, r3
 8002398:	3b01      	subs	r3, #1
 800239a:	b29a      	uxth	r2, r3
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023a4:	3b01      	subs	r3, #1
 80023a6:	b29a      	uxth	r2, r3
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d034      	beq.n	8002420 <HAL_I2C_Mem_Write+0x1c8>
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d130      	bne.n	8002420 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	9300      	str	r3, [sp, #0]
 80023c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023c4:	2200      	movs	r2, #0
 80023c6:	2180      	movs	r1, #128	@ 0x80
 80023c8:	68f8      	ldr	r0, [r7, #12]
 80023ca:	f000 fa3f 	bl	800284c <I2C_WaitOnFlagUntilTimeout>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d001      	beq.n	80023d8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e04d      	b.n	8002474 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023dc:	b29b      	uxth	r3, r3
 80023de:	2bff      	cmp	r3, #255	@ 0xff
 80023e0:	d90e      	bls.n	8002400 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	22ff      	movs	r2, #255	@ 0xff
 80023e6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023ec:	b2da      	uxtb	r2, r3
 80023ee:	8979      	ldrh	r1, [r7, #10]
 80023f0:	2300      	movs	r3, #0
 80023f2:	9300      	str	r3, [sp, #0]
 80023f4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80023f8:	68f8      	ldr	r0, [r7, #12]
 80023fa:	f000 fbeb 	bl	8002bd4 <I2C_TransferConfig>
 80023fe:	e00f      	b.n	8002420 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002404:	b29a      	uxth	r2, r3
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800240e:	b2da      	uxtb	r2, r3
 8002410:	8979      	ldrh	r1, [r7, #10]
 8002412:	2300      	movs	r3, #0
 8002414:	9300      	str	r3, [sp, #0]
 8002416:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800241a:	68f8      	ldr	r0, [r7, #12]
 800241c:	f000 fbda 	bl	8002bd4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002424:	b29b      	uxth	r3, r3
 8002426:	2b00      	cmp	r3, #0
 8002428:	d19e      	bne.n	8002368 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800242a:	697a      	ldr	r2, [r7, #20]
 800242c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800242e:	68f8      	ldr	r0, [r7, #12]
 8002430:	f000 faac 	bl	800298c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d001      	beq.n	800243e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e01a      	b.n	8002474 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2220      	movs	r2, #32
 8002444:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	6859      	ldr	r1, [r3, #4]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	4b0a      	ldr	r3, [pc, #40]	@ (800247c <HAL_I2C_Mem_Write+0x224>)
 8002452:	400b      	ands	r3, r1
 8002454:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2220      	movs	r2, #32
 800245a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2200      	movs	r2, #0
 8002462:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2200      	movs	r2, #0
 800246a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800246e:	2300      	movs	r3, #0
 8002470:	e000      	b.n	8002474 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002472:	2302      	movs	r3, #2
  }
}
 8002474:	4618      	mov	r0, r3
 8002476:	3718      	adds	r7, #24
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	fe00e800 	.word	0xfe00e800

08002480 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b088      	sub	sp, #32
 8002484:	af02      	add	r7, sp, #8
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	4608      	mov	r0, r1
 800248a:	4611      	mov	r1, r2
 800248c:	461a      	mov	r2, r3
 800248e:	4603      	mov	r3, r0
 8002490:	817b      	strh	r3, [r7, #10]
 8002492:	460b      	mov	r3, r1
 8002494:	813b      	strh	r3, [r7, #8]
 8002496:	4613      	mov	r3, r2
 8002498:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	2b20      	cmp	r3, #32
 80024a4:	f040 80fd 	bne.w	80026a2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80024a8:	6a3b      	ldr	r3, [r7, #32]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d002      	beq.n	80024b4 <HAL_I2C_Mem_Read+0x34>
 80024ae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d105      	bne.n	80024c0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80024ba:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e0f1      	b.n	80026a4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d101      	bne.n	80024ce <HAL_I2C_Mem_Read+0x4e>
 80024ca:	2302      	movs	r3, #2
 80024cc:	e0ea      	b.n	80026a4 <HAL_I2C_Mem_Read+0x224>
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2201      	movs	r2, #1
 80024d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80024d6:	f7ff fb63 	bl	8001ba0 <HAL_GetTick>
 80024da:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	9300      	str	r3, [sp, #0]
 80024e0:	2319      	movs	r3, #25
 80024e2:	2201      	movs	r2, #1
 80024e4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80024e8:	68f8      	ldr	r0, [r7, #12]
 80024ea:	f000 f9af 	bl	800284c <I2C_WaitOnFlagUntilTimeout>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d001      	beq.n	80024f8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e0d5      	b.n	80026a4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2222      	movs	r2, #34	@ 0x22
 80024fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2240      	movs	r2, #64	@ 0x40
 8002504:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2200      	movs	r2, #0
 800250c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	6a3a      	ldr	r2, [r7, #32]
 8002512:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002518:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2200      	movs	r2, #0
 800251e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002520:	88f8      	ldrh	r0, [r7, #6]
 8002522:	893a      	ldrh	r2, [r7, #8]
 8002524:	8979      	ldrh	r1, [r7, #10]
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	9301      	str	r3, [sp, #4]
 800252a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800252c:	9300      	str	r3, [sp, #0]
 800252e:	4603      	mov	r3, r0
 8002530:	68f8      	ldr	r0, [r7, #12]
 8002532:	f000 f913 	bl	800275c <I2C_RequestMemoryRead>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d005      	beq.n	8002548 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2200      	movs	r2, #0
 8002540:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e0ad      	b.n	80026a4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800254c:	b29b      	uxth	r3, r3
 800254e:	2bff      	cmp	r3, #255	@ 0xff
 8002550:	d90e      	bls.n	8002570 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2201      	movs	r2, #1
 8002556:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800255c:	b2da      	uxtb	r2, r3
 800255e:	8979      	ldrh	r1, [r7, #10]
 8002560:	4b52      	ldr	r3, [pc, #328]	@ (80026ac <HAL_I2C_Mem_Read+0x22c>)
 8002562:	9300      	str	r3, [sp, #0]
 8002564:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002568:	68f8      	ldr	r0, [r7, #12]
 800256a:	f000 fb33 	bl	8002bd4 <I2C_TransferConfig>
 800256e:	e00f      	b.n	8002590 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002574:	b29a      	uxth	r2, r3
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800257e:	b2da      	uxtb	r2, r3
 8002580:	8979      	ldrh	r1, [r7, #10]
 8002582:	4b4a      	ldr	r3, [pc, #296]	@ (80026ac <HAL_I2C_Mem_Read+0x22c>)
 8002584:	9300      	str	r3, [sp, #0]
 8002586:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800258a:	68f8      	ldr	r0, [r7, #12]
 800258c:	f000 fb22 	bl	8002bd4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	9300      	str	r3, [sp, #0]
 8002594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002596:	2200      	movs	r2, #0
 8002598:	2104      	movs	r1, #4
 800259a:	68f8      	ldr	r0, [r7, #12]
 800259c:	f000 f956 	bl	800284c <I2C_WaitOnFlagUntilTimeout>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d001      	beq.n	80025aa <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e07c      	b.n	80026a4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025b4:	b2d2      	uxtb	r2, r2
 80025b6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025bc:	1c5a      	adds	r2, r3, #1
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025c6:	3b01      	subs	r3, #1
 80025c8:	b29a      	uxth	r2, r3
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	3b01      	subs	r3, #1
 80025d6:	b29a      	uxth	r2, r3
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025e0:	b29b      	uxth	r3, r3
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d034      	beq.n	8002650 <HAL_I2C_Mem_Read+0x1d0>
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d130      	bne.n	8002650 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	9300      	str	r3, [sp, #0]
 80025f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025f4:	2200      	movs	r2, #0
 80025f6:	2180      	movs	r1, #128	@ 0x80
 80025f8:	68f8      	ldr	r0, [r7, #12]
 80025fa:	f000 f927 	bl	800284c <I2C_WaitOnFlagUntilTimeout>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d001      	beq.n	8002608 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e04d      	b.n	80026a4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800260c:	b29b      	uxth	r3, r3
 800260e:	2bff      	cmp	r3, #255	@ 0xff
 8002610:	d90e      	bls.n	8002630 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2201      	movs	r2, #1
 8002616:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800261c:	b2da      	uxtb	r2, r3
 800261e:	8979      	ldrh	r1, [r7, #10]
 8002620:	2300      	movs	r3, #0
 8002622:	9300      	str	r3, [sp, #0]
 8002624:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002628:	68f8      	ldr	r0, [r7, #12]
 800262a:	f000 fad3 	bl	8002bd4 <I2C_TransferConfig>
 800262e:	e00f      	b.n	8002650 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002634:	b29a      	uxth	r2, r3
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800263e:	b2da      	uxtb	r2, r3
 8002640:	8979      	ldrh	r1, [r7, #10]
 8002642:	2300      	movs	r3, #0
 8002644:	9300      	str	r3, [sp, #0]
 8002646:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800264a:	68f8      	ldr	r0, [r7, #12]
 800264c:	f000 fac2 	bl	8002bd4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002654:	b29b      	uxth	r3, r3
 8002656:	2b00      	cmp	r3, #0
 8002658:	d19a      	bne.n	8002590 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800265a:	697a      	ldr	r2, [r7, #20]
 800265c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800265e:	68f8      	ldr	r0, [r7, #12]
 8002660:	f000 f994 	bl	800298c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d001      	beq.n	800266e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e01a      	b.n	80026a4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	2220      	movs	r2, #32
 8002674:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	6859      	ldr	r1, [r3, #4]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	4b0b      	ldr	r3, [pc, #44]	@ (80026b0 <HAL_I2C_Mem_Read+0x230>)
 8002682:	400b      	ands	r3, r1
 8002684:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2220      	movs	r2, #32
 800268a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2200      	movs	r2, #0
 8002692:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2200      	movs	r2, #0
 800269a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800269e:	2300      	movs	r3, #0
 80026a0:	e000      	b.n	80026a4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80026a2:	2302      	movs	r3, #2
  }
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3718      	adds	r7, #24
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	80002400 	.word	0x80002400
 80026b0:	fe00e800 	.word	0xfe00e800

080026b4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b086      	sub	sp, #24
 80026b8:	af02      	add	r7, sp, #8
 80026ba:	60f8      	str	r0, [r7, #12]
 80026bc:	4608      	mov	r0, r1
 80026be:	4611      	mov	r1, r2
 80026c0:	461a      	mov	r2, r3
 80026c2:	4603      	mov	r3, r0
 80026c4:	817b      	strh	r3, [r7, #10]
 80026c6:	460b      	mov	r3, r1
 80026c8:	813b      	strh	r3, [r7, #8]
 80026ca:	4613      	mov	r3, r2
 80026cc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80026ce:	88fb      	ldrh	r3, [r7, #6]
 80026d0:	b2da      	uxtb	r2, r3
 80026d2:	8979      	ldrh	r1, [r7, #10]
 80026d4:	4b20      	ldr	r3, [pc, #128]	@ (8002758 <I2C_RequestMemoryWrite+0xa4>)
 80026d6:	9300      	str	r3, [sp, #0]
 80026d8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80026dc:	68f8      	ldr	r0, [r7, #12]
 80026de:	f000 fa79 	bl	8002bd4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026e2:	69fa      	ldr	r2, [r7, #28]
 80026e4:	69b9      	ldr	r1, [r7, #24]
 80026e6:	68f8      	ldr	r0, [r7, #12]
 80026e8:	f000 f909 	bl	80028fe <I2C_WaitOnTXISFlagUntilTimeout>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d001      	beq.n	80026f6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e02c      	b.n	8002750 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80026f6:	88fb      	ldrh	r3, [r7, #6]
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d105      	bne.n	8002708 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80026fc:	893b      	ldrh	r3, [r7, #8]
 80026fe:	b2da      	uxtb	r2, r3
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	629a      	str	r2, [r3, #40]	@ 0x28
 8002706:	e015      	b.n	8002734 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002708:	893b      	ldrh	r3, [r7, #8]
 800270a:	0a1b      	lsrs	r3, r3, #8
 800270c:	b29b      	uxth	r3, r3
 800270e:	b2da      	uxtb	r2, r3
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002716:	69fa      	ldr	r2, [r7, #28]
 8002718:	69b9      	ldr	r1, [r7, #24]
 800271a:	68f8      	ldr	r0, [r7, #12]
 800271c:	f000 f8ef 	bl	80028fe <I2C_WaitOnTXISFlagUntilTimeout>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d001      	beq.n	800272a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e012      	b.n	8002750 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800272a:	893b      	ldrh	r3, [r7, #8]
 800272c:	b2da      	uxtb	r2, r3
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	9300      	str	r3, [sp, #0]
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	2200      	movs	r2, #0
 800273c:	2180      	movs	r1, #128	@ 0x80
 800273e:	68f8      	ldr	r0, [r7, #12]
 8002740:	f000 f884 	bl	800284c <I2C_WaitOnFlagUntilTimeout>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d001      	beq.n	800274e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e000      	b.n	8002750 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800274e:	2300      	movs	r3, #0
}
 8002750:	4618      	mov	r0, r3
 8002752:	3710      	adds	r7, #16
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	80002000 	.word	0x80002000

0800275c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b086      	sub	sp, #24
 8002760:	af02      	add	r7, sp, #8
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	4608      	mov	r0, r1
 8002766:	4611      	mov	r1, r2
 8002768:	461a      	mov	r2, r3
 800276a:	4603      	mov	r3, r0
 800276c:	817b      	strh	r3, [r7, #10]
 800276e:	460b      	mov	r3, r1
 8002770:	813b      	strh	r3, [r7, #8]
 8002772:	4613      	mov	r3, r2
 8002774:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002776:	88fb      	ldrh	r3, [r7, #6]
 8002778:	b2da      	uxtb	r2, r3
 800277a:	8979      	ldrh	r1, [r7, #10]
 800277c:	4b20      	ldr	r3, [pc, #128]	@ (8002800 <I2C_RequestMemoryRead+0xa4>)
 800277e:	9300      	str	r3, [sp, #0]
 8002780:	2300      	movs	r3, #0
 8002782:	68f8      	ldr	r0, [r7, #12]
 8002784:	f000 fa26 	bl	8002bd4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002788:	69fa      	ldr	r2, [r7, #28]
 800278a:	69b9      	ldr	r1, [r7, #24]
 800278c:	68f8      	ldr	r0, [r7, #12]
 800278e:	f000 f8b6 	bl	80028fe <I2C_WaitOnTXISFlagUntilTimeout>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d001      	beq.n	800279c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e02c      	b.n	80027f6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800279c:	88fb      	ldrh	r3, [r7, #6]
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d105      	bne.n	80027ae <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80027a2:	893b      	ldrh	r3, [r7, #8]
 80027a4:	b2da      	uxtb	r2, r3
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	629a      	str	r2, [r3, #40]	@ 0x28
 80027ac:	e015      	b.n	80027da <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80027ae:	893b      	ldrh	r3, [r7, #8]
 80027b0:	0a1b      	lsrs	r3, r3, #8
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	b2da      	uxtb	r2, r3
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027bc:	69fa      	ldr	r2, [r7, #28]
 80027be:	69b9      	ldr	r1, [r7, #24]
 80027c0:	68f8      	ldr	r0, [r7, #12]
 80027c2:	f000 f89c 	bl	80028fe <I2C_WaitOnTXISFlagUntilTimeout>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d001      	beq.n	80027d0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e012      	b.n	80027f6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80027d0:	893b      	ldrh	r3, [r7, #8]
 80027d2:	b2da      	uxtb	r2, r3
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	9300      	str	r3, [sp, #0]
 80027de:	69bb      	ldr	r3, [r7, #24]
 80027e0:	2200      	movs	r2, #0
 80027e2:	2140      	movs	r1, #64	@ 0x40
 80027e4:	68f8      	ldr	r0, [r7, #12]
 80027e6:	f000 f831 	bl	800284c <I2C_WaitOnFlagUntilTimeout>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d001      	beq.n	80027f4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e000      	b.n	80027f6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3710      	adds	r7, #16
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	80002000 	.word	0x80002000

08002804 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	699b      	ldr	r3, [r3, #24]
 8002812:	f003 0302 	and.w	r3, r3, #2
 8002816:	2b02      	cmp	r3, #2
 8002818:	d103      	bne.n	8002822 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	2200      	movs	r2, #0
 8002820:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	699b      	ldr	r3, [r3, #24]
 8002828:	f003 0301 	and.w	r3, r3, #1
 800282c:	2b01      	cmp	r3, #1
 800282e:	d007      	beq.n	8002840 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	699a      	ldr	r2, [r3, #24]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f042 0201 	orr.w	r2, r2, #1
 800283e:	619a      	str	r2, [r3, #24]
  }
}
 8002840:	bf00      	nop
 8002842:	370c      	adds	r7, #12
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr

0800284c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b084      	sub	sp, #16
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	603b      	str	r3, [r7, #0]
 8002858:	4613      	mov	r3, r2
 800285a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800285c:	e03b      	b.n	80028d6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800285e:	69ba      	ldr	r2, [r7, #24]
 8002860:	6839      	ldr	r1, [r7, #0]
 8002862:	68f8      	ldr	r0, [r7, #12]
 8002864:	f000 f8d6 	bl	8002a14 <I2C_IsErrorOccurred>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d001      	beq.n	8002872 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e041      	b.n	80028f6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002878:	d02d      	beq.n	80028d6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800287a:	f7ff f991 	bl	8001ba0 <HAL_GetTick>
 800287e:	4602      	mov	r2, r0
 8002880:	69bb      	ldr	r3, [r7, #24]
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	683a      	ldr	r2, [r7, #0]
 8002886:	429a      	cmp	r2, r3
 8002888:	d302      	bcc.n	8002890 <I2C_WaitOnFlagUntilTimeout+0x44>
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d122      	bne.n	80028d6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	699a      	ldr	r2, [r3, #24]
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	4013      	ands	r3, r2
 800289a:	68ba      	ldr	r2, [r7, #8]
 800289c:	429a      	cmp	r2, r3
 800289e:	bf0c      	ite	eq
 80028a0:	2301      	moveq	r3, #1
 80028a2:	2300      	movne	r3, #0
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	461a      	mov	r2, r3
 80028a8:	79fb      	ldrb	r3, [r7, #7]
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d113      	bne.n	80028d6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028b2:	f043 0220 	orr.w	r2, r3, #32
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2220      	movs	r2, #32
 80028be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2200      	movs	r2, #0
 80028ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e00f      	b.n	80028f6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	699a      	ldr	r2, [r3, #24]
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	4013      	ands	r3, r2
 80028e0:	68ba      	ldr	r2, [r7, #8]
 80028e2:	429a      	cmp	r2, r3
 80028e4:	bf0c      	ite	eq
 80028e6:	2301      	moveq	r3, #1
 80028e8:	2300      	movne	r3, #0
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	461a      	mov	r2, r3
 80028ee:	79fb      	ldrb	r3, [r7, #7]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d0b4      	beq.n	800285e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3710      	adds	r7, #16
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}

080028fe <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80028fe:	b580      	push	{r7, lr}
 8002900:	b084      	sub	sp, #16
 8002902:	af00      	add	r7, sp, #0
 8002904:	60f8      	str	r0, [r7, #12]
 8002906:	60b9      	str	r1, [r7, #8]
 8002908:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800290a:	e033      	b.n	8002974 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	68b9      	ldr	r1, [r7, #8]
 8002910:	68f8      	ldr	r0, [r7, #12]
 8002912:	f000 f87f 	bl	8002a14 <I2C_IsErrorOccurred>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d001      	beq.n	8002920 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e031      	b.n	8002984 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002926:	d025      	beq.n	8002974 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002928:	f7ff f93a 	bl	8001ba0 <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	68ba      	ldr	r2, [r7, #8]
 8002934:	429a      	cmp	r2, r3
 8002936:	d302      	bcc.n	800293e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d11a      	bne.n	8002974 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	699b      	ldr	r3, [r3, #24]
 8002944:	f003 0302 	and.w	r3, r3, #2
 8002948:	2b02      	cmp	r3, #2
 800294a:	d013      	beq.n	8002974 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002950:	f043 0220 	orr.w	r2, r3, #32
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2220      	movs	r2, #32
 800295c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2200      	movs	r2, #0
 8002964:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2200      	movs	r2, #0
 800296c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e007      	b.n	8002984 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	699b      	ldr	r3, [r3, #24]
 800297a:	f003 0302 	and.w	r3, r3, #2
 800297e:	2b02      	cmp	r3, #2
 8002980:	d1c4      	bne.n	800290c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002982:	2300      	movs	r3, #0
}
 8002984:	4618      	mov	r0, r3
 8002986:	3710      	adds	r7, #16
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}

0800298c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	60f8      	str	r0, [r7, #12]
 8002994:	60b9      	str	r1, [r7, #8]
 8002996:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002998:	e02f      	b.n	80029fa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	68b9      	ldr	r1, [r7, #8]
 800299e:	68f8      	ldr	r0, [r7, #12]
 80029a0:	f000 f838 	bl	8002a14 <I2C_IsErrorOccurred>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d001      	beq.n	80029ae <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e02d      	b.n	8002a0a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029ae:	f7ff f8f7 	bl	8001ba0 <HAL_GetTick>
 80029b2:	4602      	mov	r2, r0
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	68ba      	ldr	r2, [r7, #8]
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d302      	bcc.n	80029c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d11a      	bne.n	80029fa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	699b      	ldr	r3, [r3, #24]
 80029ca:	f003 0320 	and.w	r3, r3, #32
 80029ce:	2b20      	cmp	r3, #32
 80029d0:	d013      	beq.n	80029fa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029d6:	f043 0220 	orr.w	r2, r3, #32
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2220      	movs	r2, #32
 80029e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2200      	movs	r2, #0
 80029ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e007      	b.n	8002a0a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	699b      	ldr	r3, [r3, #24]
 8002a00:	f003 0320 	and.w	r3, r3, #32
 8002a04:	2b20      	cmp	r3, #32
 8002a06:	d1c8      	bne.n	800299a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3710      	adds	r7, #16
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
	...

08002a14 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b08a      	sub	sp, #40	@ 0x28
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	60b9      	str	r1, [r7, #8]
 8002a1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a20:	2300      	movs	r3, #0
 8002a22:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	699b      	ldr	r3, [r3, #24]
 8002a2c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002a36:	69bb      	ldr	r3, [r7, #24]
 8002a38:	f003 0310 	and.w	r3, r3, #16
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d068      	beq.n	8002b12 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2210      	movs	r2, #16
 8002a46:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002a48:	e049      	b.n	8002ade <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a50:	d045      	beq.n	8002ade <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002a52:	f7ff f8a5 	bl	8001ba0 <HAL_GetTick>
 8002a56:	4602      	mov	r2, r0
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	68ba      	ldr	r2, [r7, #8]
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d302      	bcc.n	8002a68 <I2C_IsErrorOccurred+0x54>
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d13a      	bne.n	8002ade <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a72:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002a7a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	699b      	ldr	r3, [r3, #24]
 8002a82:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002a86:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a8a:	d121      	bne.n	8002ad0 <I2C_IsErrorOccurred+0xbc>
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002a92:	d01d      	beq.n	8002ad0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002a94:	7cfb      	ldrb	r3, [r7, #19]
 8002a96:	2b20      	cmp	r3, #32
 8002a98:	d01a      	beq.n	8002ad0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	685a      	ldr	r2, [r3, #4]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002aa8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002aaa:	f7ff f879 	bl	8001ba0 <HAL_GetTick>
 8002aae:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ab0:	e00e      	b.n	8002ad0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002ab2:	f7ff f875 	bl	8001ba0 <HAL_GetTick>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	2b19      	cmp	r3, #25
 8002abe:	d907      	bls.n	8002ad0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002ac0:	6a3b      	ldr	r3, [r7, #32]
 8002ac2:	f043 0320 	orr.w	r3, r3, #32
 8002ac6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002ace:	e006      	b.n	8002ade <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	699b      	ldr	r3, [r3, #24]
 8002ad6:	f003 0320 	and.w	r3, r3, #32
 8002ada:	2b20      	cmp	r3, #32
 8002adc:	d1e9      	bne.n	8002ab2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	699b      	ldr	r3, [r3, #24]
 8002ae4:	f003 0320 	and.w	r3, r3, #32
 8002ae8:	2b20      	cmp	r3, #32
 8002aea:	d003      	beq.n	8002af4 <I2C_IsErrorOccurred+0xe0>
 8002aec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d0aa      	beq.n	8002a4a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002af4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d103      	bne.n	8002b04 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2220      	movs	r2, #32
 8002b02:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002b04:	6a3b      	ldr	r3, [r7, #32]
 8002b06:	f043 0304 	orr.w	r3, r3, #4
 8002b0a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	699b      	ldr	r3, [r3, #24]
 8002b18:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d00b      	beq.n	8002b3c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002b24:	6a3b      	ldr	r3, [r7, #32]
 8002b26:	f043 0301 	orr.w	r3, r3, #1
 8002b2a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002b34:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d00b      	beq.n	8002b5e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002b46:	6a3b      	ldr	r3, [r7, #32]
 8002b48:	f043 0308 	orr.w	r3, r3, #8
 8002b4c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002b56:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002b5e:	69bb      	ldr	r3, [r7, #24]
 8002b60:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d00b      	beq.n	8002b80 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002b68:	6a3b      	ldr	r3, [r7, #32]
 8002b6a:	f043 0302 	orr.w	r3, r3, #2
 8002b6e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b78:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002b80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d01c      	beq.n	8002bc2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002b88:	68f8      	ldr	r0, [r7, #12]
 8002b8a:	f7ff fe3b 	bl	8002804 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	6859      	ldr	r1, [r3, #4]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	4b0d      	ldr	r3, [pc, #52]	@ (8002bd0 <I2C_IsErrorOccurred+0x1bc>)
 8002b9a:	400b      	ands	r3, r1
 8002b9c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002ba2:	6a3b      	ldr	r3, [r7, #32]
 8002ba4:	431a      	orrs	r2, r3
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2220      	movs	r2, #32
 8002bae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002bc2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3728      	adds	r7, #40	@ 0x28
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	fe00e800 	.word	0xfe00e800

08002bd4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b087      	sub	sp, #28
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	60f8      	str	r0, [r7, #12]
 8002bdc:	607b      	str	r3, [r7, #4]
 8002bde:	460b      	mov	r3, r1
 8002be0:	817b      	strh	r3, [r7, #10]
 8002be2:	4613      	mov	r3, r2
 8002be4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002be6:	897b      	ldrh	r3, [r7, #10]
 8002be8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002bec:	7a7b      	ldrb	r3, [r7, #9]
 8002bee:	041b      	lsls	r3, r3, #16
 8002bf0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002bf4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002bfa:	6a3b      	ldr	r3, [r7, #32]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002c02:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	685a      	ldr	r2, [r3, #4]
 8002c0a:	6a3b      	ldr	r3, [r7, #32]
 8002c0c:	0d5b      	lsrs	r3, r3, #21
 8002c0e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002c12:	4b08      	ldr	r3, [pc, #32]	@ (8002c34 <I2C_TransferConfig+0x60>)
 8002c14:	430b      	orrs	r3, r1
 8002c16:	43db      	mvns	r3, r3
 8002c18:	ea02 0103 	and.w	r1, r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	697a      	ldr	r2, [r7, #20]
 8002c22:	430a      	orrs	r2, r1
 8002c24:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002c26:	bf00      	nop
 8002c28:	371c      	adds	r7, #28
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
 8002c32:	bf00      	nop
 8002c34:	03ff63ff 	.word	0x03ff63ff

08002c38 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b20      	cmp	r3, #32
 8002c4c:	d138      	bne.n	8002cc0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d101      	bne.n	8002c5c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002c58:	2302      	movs	r3, #2
 8002c5a:	e032      	b.n	8002cc2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2224      	movs	r2, #36	@ 0x24
 8002c68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f022 0201 	bic.w	r2, r2, #1
 8002c7a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002c8a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	6819      	ldr	r1, [r3, #0]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	683a      	ldr	r2, [r7, #0]
 8002c98:	430a      	orrs	r2, r1
 8002c9a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f042 0201 	orr.w	r2, r2, #1
 8002caa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2220      	movs	r2, #32
 8002cb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	e000      	b.n	8002cc2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002cc0:	2302      	movs	r3, #2
  }
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	370c      	adds	r7, #12
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr

08002cce <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002cce:	b480      	push	{r7}
 8002cd0:	b085      	sub	sp, #20
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
 8002cd6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	2b20      	cmp	r3, #32
 8002ce2:	d139      	bne.n	8002d58 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d101      	bne.n	8002cf2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002cee:	2302      	movs	r3, #2
 8002cf0:	e033      	b.n	8002d5a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2224      	movs	r2, #36	@ 0x24
 8002cfe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f022 0201 	bic.w	r2, r2, #1
 8002d10:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002d20:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	021b      	lsls	r3, r3, #8
 8002d26:	68fa      	ldr	r2, [r7, #12]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	68fa      	ldr	r2, [r7, #12]
 8002d32:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f042 0201 	orr.w	r2, r2, #1
 8002d42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2220      	movs	r2, #32
 8002d48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002d54:	2300      	movs	r3, #0
 8002d56:	e000      	b.n	8002d5a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002d58:	2302      	movs	r3, #2
  }
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3714      	adds	r7, #20
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
	...

08002d68 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002d6c:	4b04      	ldr	r3, [pc, #16]	@ (8002d80 <HAL_PWREx_GetVoltageRange+0x18>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	40007000 	.word	0x40007000

08002d84 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b085      	sub	sp, #20
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d92:	d130      	bne.n	8002df6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d94:	4b23      	ldr	r3, [pc, #140]	@ (8002e24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002d9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002da0:	d038      	beq.n	8002e14 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002da2:	4b20      	ldr	r3, [pc, #128]	@ (8002e24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002daa:	4a1e      	ldr	r2, [pc, #120]	@ (8002e24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002dac:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002db0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002db2:	4b1d      	ldr	r3, [pc, #116]	@ (8002e28 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2232      	movs	r2, #50	@ 0x32
 8002db8:	fb02 f303 	mul.w	r3, r2, r3
 8002dbc:	4a1b      	ldr	r2, [pc, #108]	@ (8002e2c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc2:	0c9b      	lsrs	r3, r3, #18
 8002dc4:	3301      	adds	r3, #1
 8002dc6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002dc8:	e002      	b.n	8002dd0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	3b01      	subs	r3, #1
 8002dce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002dd0:	4b14      	ldr	r3, [pc, #80]	@ (8002e24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002dd2:	695b      	ldr	r3, [r3, #20]
 8002dd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dd8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ddc:	d102      	bne.n	8002de4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d1f2      	bne.n	8002dca <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002de4:	4b0f      	ldr	r3, [pc, #60]	@ (8002e24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002de6:	695b      	ldr	r3, [r3, #20]
 8002de8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002df0:	d110      	bne.n	8002e14 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e00f      	b.n	8002e16 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002df6:	4b0b      	ldr	r3, [pc, #44]	@ (8002e24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002dfe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e02:	d007      	beq.n	8002e14 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002e04:	4b07      	ldr	r3, [pc, #28]	@ (8002e24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002e0c:	4a05      	ldr	r2, [pc, #20]	@ (8002e24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e0e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002e12:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002e14:	2300      	movs	r3, #0
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3714      	adds	r7, #20
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop
 8002e24:	40007000 	.word	0x40007000
 8002e28:	20000000 	.word	0x20000000
 8002e2c:	431bde83 	.word	0x431bde83

08002e30 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b088      	sub	sp, #32
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d102      	bne.n	8002e44 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	f000 bc02 	b.w	8003648 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e44:	4b96      	ldr	r3, [pc, #600]	@ (80030a0 <HAL_RCC_OscConfig+0x270>)
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	f003 030c 	and.w	r3, r3, #12
 8002e4c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e4e:	4b94      	ldr	r3, [pc, #592]	@ (80030a0 <HAL_RCC_OscConfig+0x270>)
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	f003 0303 	and.w	r3, r3, #3
 8002e56:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0310 	and.w	r3, r3, #16
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	f000 80e4 	beq.w	800302e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e66:	69bb      	ldr	r3, [r7, #24]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d007      	beq.n	8002e7c <HAL_RCC_OscConfig+0x4c>
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	2b0c      	cmp	r3, #12
 8002e70:	f040 808b 	bne.w	8002f8a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	f040 8087 	bne.w	8002f8a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e7c:	4b88      	ldr	r3, [pc, #544]	@ (80030a0 <HAL_RCC_OscConfig+0x270>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0302 	and.w	r3, r3, #2
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d005      	beq.n	8002e94 <HAL_RCC_OscConfig+0x64>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	699b      	ldr	r3, [r3, #24]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d101      	bne.n	8002e94 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e3d9      	b.n	8003648 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a1a      	ldr	r2, [r3, #32]
 8002e98:	4b81      	ldr	r3, [pc, #516]	@ (80030a0 <HAL_RCC_OscConfig+0x270>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0308 	and.w	r3, r3, #8
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d004      	beq.n	8002eae <HAL_RCC_OscConfig+0x7e>
 8002ea4:	4b7e      	ldr	r3, [pc, #504]	@ (80030a0 <HAL_RCC_OscConfig+0x270>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002eac:	e005      	b.n	8002eba <HAL_RCC_OscConfig+0x8a>
 8002eae:	4b7c      	ldr	r3, [pc, #496]	@ (80030a0 <HAL_RCC_OscConfig+0x270>)
 8002eb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002eb4:	091b      	lsrs	r3, r3, #4
 8002eb6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d223      	bcs.n	8002f06 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a1b      	ldr	r3, [r3, #32]
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f000 fd8c 	bl	80039e0 <RCC_SetFlashLatencyFromMSIRange>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d001      	beq.n	8002ed2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e3ba      	b.n	8003648 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ed2:	4b73      	ldr	r3, [pc, #460]	@ (80030a0 <HAL_RCC_OscConfig+0x270>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a72      	ldr	r2, [pc, #456]	@ (80030a0 <HAL_RCC_OscConfig+0x270>)
 8002ed8:	f043 0308 	orr.w	r3, r3, #8
 8002edc:	6013      	str	r3, [r2, #0]
 8002ede:	4b70      	ldr	r3, [pc, #448]	@ (80030a0 <HAL_RCC_OscConfig+0x270>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a1b      	ldr	r3, [r3, #32]
 8002eea:	496d      	ldr	r1, [pc, #436]	@ (80030a0 <HAL_RCC_OscConfig+0x270>)
 8002eec:	4313      	orrs	r3, r2
 8002eee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ef0:	4b6b      	ldr	r3, [pc, #428]	@ (80030a0 <HAL_RCC_OscConfig+0x270>)
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	69db      	ldr	r3, [r3, #28]
 8002efc:	021b      	lsls	r3, r3, #8
 8002efe:	4968      	ldr	r1, [pc, #416]	@ (80030a0 <HAL_RCC_OscConfig+0x270>)
 8002f00:	4313      	orrs	r3, r2
 8002f02:	604b      	str	r3, [r1, #4]
 8002f04:	e025      	b.n	8002f52 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f06:	4b66      	ldr	r3, [pc, #408]	@ (80030a0 <HAL_RCC_OscConfig+0x270>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a65      	ldr	r2, [pc, #404]	@ (80030a0 <HAL_RCC_OscConfig+0x270>)
 8002f0c:	f043 0308 	orr.w	r3, r3, #8
 8002f10:	6013      	str	r3, [r2, #0]
 8002f12:	4b63      	ldr	r3, [pc, #396]	@ (80030a0 <HAL_RCC_OscConfig+0x270>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a1b      	ldr	r3, [r3, #32]
 8002f1e:	4960      	ldr	r1, [pc, #384]	@ (80030a0 <HAL_RCC_OscConfig+0x270>)
 8002f20:	4313      	orrs	r3, r2
 8002f22:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f24:	4b5e      	ldr	r3, [pc, #376]	@ (80030a0 <HAL_RCC_OscConfig+0x270>)
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	69db      	ldr	r3, [r3, #28]
 8002f30:	021b      	lsls	r3, r3, #8
 8002f32:	495b      	ldr	r1, [pc, #364]	@ (80030a0 <HAL_RCC_OscConfig+0x270>)
 8002f34:	4313      	orrs	r3, r2
 8002f36:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f38:	69bb      	ldr	r3, [r7, #24]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d109      	bne.n	8002f52 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a1b      	ldr	r3, [r3, #32]
 8002f42:	4618      	mov	r0, r3
 8002f44:	f000 fd4c 	bl	80039e0 <RCC_SetFlashLatencyFromMSIRange>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d001      	beq.n	8002f52 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e37a      	b.n	8003648 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f52:	f000 fc81 	bl	8003858 <HAL_RCC_GetSysClockFreq>
 8002f56:	4602      	mov	r2, r0
 8002f58:	4b51      	ldr	r3, [pc, #324]	@ (80030a0 <HAL_RCC_OscConfig+0x270>)
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	091b      	lsrs	r3, r3, #4
 8002f5e:	f003 030f 	and.w	r3, r3, #15
 8002f62:	4950      	ldr	r1, [pc, #320]	@ (80030a4 <HAL_RCC_OscConfig+0x274>)
 8002f64:	5ccb      	ldrb	r3, [r1, r3]
 8002f66:	f003 031f 	and.w	r3, r3, #31
 8002f6a:	fa22 f303 	lsr.w	r3, r2, r3
 8002f6e:	4a4e      	ldr	r2, [pc, #312]	@ (80030a8 <HAL_RCC_OscConfig+0x278>)
 8002f70:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002f72:	4b4e      	ldr	r3, [pc, #312]	@ (80030ac <HAL_RCC_OscConfig+0x27c>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4618      	mov	r0, r3
 8002f78:	f7fe fdc2 	bl	8001b00 <HAL_InitTick>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002f80:	7bfb      	ldrb	r3, [r7, #15]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d052      	beq.n	800302c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002f86:	7bfb      	ldrb	r3, [r7, #15]
 8002f88:	e35e      	b.n	8003648 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d032      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002f92:	4b43      	ldr	r3, [pc, #268]	@ (80030a0 <HAL_RCC_OscConfig+0x270>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a42      	ldr	r2, [pc, #264]	@ (80030a0 <HAL_RCC_OscConfig+0x270>)
 8002f98:	f043 0301 	orr.w	r3, r3, #1
 8002f9c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f9e:	f7fe fdff 	bl	8001ba0 <HAL_GetTick>
 8002fa2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002fa4:	e008      	b.n	8002fb8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002fa6:	f7fe fdfb 	bl	8001ba0 <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d901      	bls.n	8002fb8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e347      	b.n	8003648 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002fb8:	4b39      	ldr	r3, [pc, #228]	@ (80030a0 <HAL_RCC_OscConfig+0x270>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0302 	and.w	r3, r3, #2
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d0f0      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002fc4:	4b36      	ldr	r3, [pc, #216]	@ (80030a0 <HAL_RCC_OscConfig+0x270>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a35      	ldr	r2, [pc, #212]	@ (80030a0 <HAL_RCC_OscConfig+0x270>)
 8002fca:	f043 0308 	orr.w	r3, r3, #8
 8002fce:	6013      	str	r3, [r2, #0]
 8002fd0:	4b33      	ldr	r3, [pc, #204]	@ (80030a0 <HAL_RCC_OscConfig+0x270>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6a1b      	ldr	r3, [r3, #32]
 8002fdc:	4930      	ldr	r1, [pc, #192]	@ (80030a0 <HAL_RCC_OscConfig+0x270>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fe2:	4b2f      	ldr	r3, [pc, #188]	@ (80030a0 <HAL_RCC_OscConfig+0x270>)
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	69db      	ldr	r3, [r3, #28]
 8002fee:	021b      	lsls	r3, r3, #8
 8002ff0:	492b      	ldr	r1, [pc, #172]	@ (80030a0 <HAL_RCC_OscConfig+0x270>)
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	604b      	str	r3, [r1, #4]
 8002ff6:	e01a      	b.n	800302e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002ff8:	4b29      	ldr	r3, [pc, #164]	@ (80030a0 <HAL_RCC_OscConfig+0x270>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a28      	ldr	r2, [pc, #160]	@ (80030a0 <HAL_RCC_OscConfig+0x270>)
 8002ffe:	f023 0301 	bic.w	r3, r3, #1
 8003002:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003004:	f7fe fdcc 	bl	8001ba0 <HAL_GetTick>
 8003008:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800300a:	e008      	b.n	800301e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800300c:	f7fe fdc8 	bl	8001ba0 <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	2b02      	cmp	r3, #2
 8003018:	d901      	bls.n	800301e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e314      	b.n	8003648 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800301e:	4b20      	ldr	r3, [pc, #128]	@ (80030a0 <HAL_RCC_OscConfig+0x270>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0302 	and.w	r3, r3, #2
 8003026:	2b00      	cmp	r3, #0
 8003028:	d1f0      	bne.n	800300c <HAL_RCC_OscConfig+0x1dc>
 800302a:	e000      	b.n	800302e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800302c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0301 	and.w	r3, r3, #1
 8003036:	2b00      	cmp	r3, #0
 8003038:	d073      	beq.n	8003122 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800303a:	69bb      	ldr	r3, [r7, #24]
 800303c:	2b08      	cmp	r3, #8
 800303e:	d005      	beq.n	800304c <HAL_RCC_OscConfig+0x21c>
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	2b0c      	cmp	r3, #12
 8003044:	d10e      	bne.n	8003064 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	2b03      	cmp	r3, #3
 800304a:	d10b      	bne.n	8003064 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800304c:	4b14      	ldr	r3, [pc, #80]	@ (80030a0 <HAL_RCC_OscConfig+0x270>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003054:	2b00      	cmp	r3, #0
 8003056:	d063      	beq.n	8003120 <HAL_RCC_OscConfig+0x2f0>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d15f      	bne.n	8003120 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e2f1      	b.n	8003648 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800306c:	d106      	bne.n	800307c <HAL_RCC_OscConfig+0x24c>
 800306e:	4b0c      	ldr	r3, [pc, #48]	@ (80030a0 <HAL_RCC_OscConfig+0x270>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a0b      	ldr	r2, [pc, #44]	@ (80030a0 <HAL_RCC_OscConfig+0x270>)
 8003074:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003078:	6013      	str	r3, [r2, #0]
 800307a:	e025      	b.n	80030c8 <HAL_RCC_OscConfig+0x298>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003084:	d114      	bne.n	80030b0 <HAL_RCC_OscConfig+0x280>
 8003086:	4b06      	ldr	r3, [pc, #24]	@ (80030a0 <HAL_RCC_OscConfig+0x270>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a05      	ldr	r2, [pc, #20]	@ (80030a0 <HAL_RCC_OscConfig+0x270>)
 800308c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003090:	6013      	str	r3, [r2, #0]
 8003092:	4b03      	ldr	r3, [pc, #12]	@ (80030a0 <HAL_RCC_OscConfig+0x270>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a02      	ldr	r2, [pc, #8]	@ (80030a0 <HAL_RCC_OscConfig+0x270>)
 8003098:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800309c:	6013      	str	r3, [r2, #0]
 800309e:	e013      	b.n	80030c8 <HAL_RCC_OscConfig+0x298>
 80030a0:	40021000 	.word	0x40021000
 80030a4:	08007f9c 	.word	0x08007f9c
 80030a8:	20000000 	.word	0x20000000
 80030ac:	20000004 	.word	0x20000004
 80030b0:	4ba0      	ldr	r3, [pc, #640]	@ (8003334 <HAL_RCC_OscConfig+0x504>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a9f      	ldr	r2, [pc, #636]	@ (8003334 <HAL_RCC_OscConfig+0x504>)
 80030b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030ba:	6013      	str	r3, [r2, #0]
 80030bc:	4b9d      	ldr	r3, [pc, #628]	@ (8003334 <HAL_RCC_OscConfig+0x504>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a9c      	ldr	r2, [pc, #624]	@ (8003334 <HAL_RCC_OscConfig+0x504>)
 80030c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d013      	beq.n	80030f8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030d0:	f7fe fd66 	bl	8001ba0 <HAL_GetTick>
 80030d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030d6:	e008      	b.n	80030ea <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030d8:	f7fe fd62 	bl	8001ba0 <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	2b64      	cmp	r3, #100	@ 0x64
 80030e4:	d901      	bls.n	80030ea <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e2ae      	b.n	8003648 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030ea:	4b92      	ldr	r3, [pc, #584]	@ (8003334 <HAL_RCC_OscConfig+0x504>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d0f0      	beq.n	80030d8 <HAL_RCC_OscConfig+0x2a8>
 80030f6:	e014      	b.n	8003122 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f8:	f7fe fd52 	bl	8001ba0 <HAL_GetTick>
 80030fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030fe:	e008      	b.n	8003112 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003100:	f7fe fd4e 	bl	8001ba0 <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	2b64      	cmp	r3, #100	@ 0x64
 800310c:	d901      	bls.n	8003112 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e29a      	b.n	8003648 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003112:	4b88      	ldr	r3, [pc, #544]	@ (8003334 <HAL_RCC_OscConfig+0x504>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d1f0      	bne.n	8003100 <HAL_RCC_OscConfig+0x2d0>
 800311e:	e000      	b.n	8003122 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003120:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	2b00      	cmp	r3, #0
 800312c:	d060      	beq.n	80031f0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800312e:	69bb      	ldr	r3, [r7, #24]
 8003130:	2b04      	cmp	r3, #4
 8003132:	d005      	beq.n	8003140 <HAL_RCC_OscConfig+0x310>
 8003134:	69bb      	ldr	r3, [r7, #24]
 8003136:	2b0c      	cmp	r3, #12
 8003138:	d119      	bne.n	800316e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	2b02      	cmp	r3, #2
 800313e:	d116      	bne.n	800316e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003140:	4b7c      	ldr	r3, [pc, #496]	@ (8003334 <HAL_RCC_OscConfig+0x504>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003148:	2b00      	cmp	r3, #0
 800314a:	d005      	beq.n	8003158 <HAL_RCC_OscConfig+0x328>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d101      	bne.n	8003158 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e277      	b.n	8003648 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003158:	4b76      	ldr	r3, [pc, #472]	@ (8003334 <HAL_RCC_OscConfig+0x504>)
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	691b      	ldr	r3, [r3, #16]
 8003164:	061b      	lsls	r3, r3, #24
 8003166:	4973      	ldr	r1, [pc, #460]	@ (8003334 <HAL_RCC_OscConfig+0x504>)
 8003168:	4313      	orrs	r3, r2
 800316a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800316c:	e040      	b.n	80031f0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d023      	beq.n	80031be <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003176:	4b6f      	ldr	r3, [pc, #444]	@ (8003334 <HAL_RCC_OscConfig+0x504>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a6e      	ldr	r2, [pc, #440]	@ (8003334 <HAL_RCC_OscConfig+0x504>)
 800317c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003180:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003182:	f7fe fd0d 	bl	8001ba0 <HAL_GetTick>
 8003186:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003188:	e008      	b.n	800319c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800318a:	f7fe fd09 	bl	8001ba0 <HAL_GetTick>
 800318e:	4602      	mov	r2, r0
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	2b02      	cmp	r3, #2
 8003196:	d901      	bls.n	800319c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	e255      	b.n	8003648 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800319c:	4b65      	ldr	r3, [pc, #404]	@ (8003334 <HAL_RCC_OscConfig+0x504>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d0f0      	beq.n	800318a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031a8:	4b62      	ldr	r3, [pc, #392]	@ (8003334 <HAL_RCC_OscConfig+0x504>)
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	691b      	ldr	r3, [r3, #16]
 80031b4:	061b      	lsls	r3, r3, #24
 80031b6:	495f      	ldr	r1, [pc, #380]	@ (8003334 <HAL_RCC_OscConfig+0x504>)
 80031b8:	4313      	orrs	r3, r2
 80031ba:	604b      	str	r3, [r1, #4]
 80031bc:	e018      	b.n	80031f0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031be:	4b5d      	ldr	r3, [pc, #372]	@ (8003334 <HAL_RCC_OscConfig+0x504>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a5c      	ldr	r2, [pc, #368]	@ (8003334 <HAL_RCC_OscConfig+0x504>)
 80031c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80031c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ca:	f7fe fce9 	bl	8001ba0 <HAL_GetTick>
 80031ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031d0:	e008      	b.n	80031e4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031d2:	f7fe fce5 	bl	8001ba0 <HAL_GetTick>
 80031d6:	4602      	mov	r2, r0
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	2b02      	cmp	r3, #2
 80031de:	d901      	bls.n	80031e4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80031e0:	2303      	movs	r3, #3
 80031e2:	e231      	b.n	8003648 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031e4:	4b53      	ldr	r3, [pc, #332]	@ (8003334 <HAL_RCC_OscConfig+0x504>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d1f0      	bne.n	80031d2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0308 	and.w	r3, r3, #8
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d03c      	beq.n	8003276 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	695b      	ldr	r3, [r3, #20]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d01c      	beq.n	800323e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003204:	4b4b      	ldr	r3, [pc, #300]	@ (8003334 <HAL_RCC_OscConfig+0x504>)
 8003206:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800320a:	4a4a      	ldr	r2, [pc, #296]	@ (8003334 <HAL_RCC_OscConfig+0x504>)
 800320c:	f043 0301 	orr.w	r3, r3, #1
 8003210:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003214:	f7fe fcc4 	bl	8001ba0 <HAL_GetTick>
 8003218:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800321a:	e008      	b.n	800322e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800321c:	f7fe fcc0 	bl	8001ba0 <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	2b02      	cmp	r3, #2
 8003228:	d901      	bls.n	800322e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e20c      	b.n	8003648 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800322e:	4b41      	ldr	r3, [pc, #260]	@ (8003334 <HAL_RCC_OscConfig+0x504>)
 8003230:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003234:	f003 0302 	and.w	r3, r3, #2
 8003238:	2b00      	cmp	r3, #0
 800323a:	d0ef      	beq.n	800321c <HAL_RCC_OscConfig+0x3ec>
 800323c:	e01b      	b.n	8003276 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800323e:	4b3d      	ldr	r3, [pc, #244]	@ (8003334 <HAL_RCC_OscConfig+0x504>)
 8003240:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003244:	4a3b      	ldr	r2, [pc, #236]	@ (8003334 <HAL_RCC_OscConfig+0x504>)
 8003246:	f023 0301 	bic.w	r3, r3, #1
 800324a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800324e:	f7fe fca7 	bl	8001ba0 <HAL_GetTick>
 8003252:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003254:	e008      	b.n	8003268 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003256:	f7fe fca3 	bl	8001ba0 <HAL_GetTick>
 800325a:	4602      	mov	r2, r0
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	2b02      	cmp	r3, #2
 8003262:	d901      	bls.n	8003268 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003264:	2303      	movs	r3, #3
 8003266:	e1ef      	b.n	8003648 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003268:	4b32      	ldr	r3, [pc, #200]	@ (8003334 <HAL_RCC_OscConfig+0x504>)
 800326a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800326e:	f003 0302 	and.w	r3, r3, #2
 8003272:	2b00      	cmp	r3, #0
 8003274:	d1ef      	bne.n	8003256 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0304 	and.w	r3, r3, #4
 800327e:	2b00      	cmp	r3, #0
 8003280:	f000 80a6 	beq.w	80033d0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003284:	2300      	movs	r3, #0
 8003286:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003288:	4b2a      	ldr	r3, [pc, #168]	@ (8003334 <HAL_RCC_OscConfig+0x504>)
 800328a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800328c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003290:	2b00      	cmp	r3, #0
 8003292:	d10d      	bne.n	80032b0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003294:	4b27      	ldr	r3, [pc, #156]	@ (8003334 <HAL_RCC_OscConfig+0x504>)
 8003296:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003298:	4a26      	ldr	r2, [pc, #152]	@ (8003334 <HAL_RCC_OscConfig+0x504>)
 800329a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800329e:	6593      	str	r3, [r2, #88]	@ 0x58
 80032a0:	4b24      	ldr	r3, [pc, #144]	@ (8003334 <HAL_RCC_OscConfig+0x504>)
 80032a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032a8:	60bb      	str	r3, [r7, #8]
 80032aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032ac:	2301      	movs	r3, #1
 80032ae:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032b0:	4b21      	ldr	r3, [pc, #132]	@ (8003338 <HAL_RCC_OscConfig+0x508>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d118      	bne.n	80032ee <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032bc:	4b1e      	ldr	r3, [pc, #120]	@ (8003338 <HAL_RCC_OscConfig+0x508>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a1d      	ldr	r2, [pc, #116]	@ (8003338 <HAL_RCC_OscConfig+0x508>)
 80032c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032c8:	f7fe fc6a 	bl	8001ba0 <HAL_GetTick>
 80032cc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032ce:	e008      	b.n	80032e2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032d0:	f7fe fc66 	bl	8001ba0 <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d901      	bls.n	80032e2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e1b2      	b.n	8003648 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032e2:	4b15      	ldr	r3, [pc, #84]	@ (8003338 <HAL_RCC_OscConfig+0x508>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d0f0      	beq.n	80032d0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d108      	bne.n	8003308 <HAL_RCC_OscConfig+0x4d8>
 80032f6:	4b0f      	ldr	r3, [pc, #60]	@ (8003334 <HAL_RCC_OscConfig+0x504>)
 80032f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032fc:	4a0d      	ldr	r2, [pc, #52]	@ (8003334 <HAL_RCC_OscConfig+0x504>)
 80032fe:	f043 0301 	orr.w	r3, r3, #1
 8003302:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003306:	e029      	b.n	800335c <HAL_RCC_OscConfig+0x52c>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	2b05      	cmp	r3, #5
 800330e:	d115      	bne.n	800333c <HAL_RCC_OscConfig+0x50c>
 8003310:	4b08      	ldr	r3, [pc, #32]	@ (8003334 <HAL_RCC_OscConfig+0x504>)
 8003312:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003316:	4a07      	ldr	r2, [pc, #28]	@ (8003334 <HAL_RCC_OscConfig+0x504>)
 8003318:	f043 0304 	orr.w	r3, r3, #4
 800331c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003320:	4b04      	ldr	r3, [pc, #16]	@ (8003334 <HAL_RCC_OscConfig+0x504>)
 8003322:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003326:	4a03      	ldr	r2, [pc, #12]	@ (8003334 <HAL_RCC_OscConfig+0x504>)
 8003328:	f043 0301 	orr.w	r3, r3, #1
 800332c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003330:	e014      	b.n	800335c <HAL_RCC_OscConfig+0x52c>
 8003332:	bf00      	nop
 8003334:	40021000 	.word	0x40021000
 8003338:	40007000 	.word	0x40007000
 800333c:	4b9a      	ldr	r3, [pc, #616]	@ (80035a8 <HAL_RCC_OscConfig+0x778>)
 800333e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003342:	4a99      	ldr	r2, [pc, #612]	@ (80035a8 <HAL_RCC_OscConfig+0x778>)
 8003344:	f023 0301 	bic.w	r3, r3, #1
 8003348:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800334c:	4b96      	ldr	r3, [pc, #600]	@ (80035a8 <HAL_RCC_OscConfig+0x778>)
 800334e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003352:	4a95      	ldr	r2, [pc, #596]	@ (80035a8 <HAL_RCC_OscConfig+0x778>)
 8003354:	f023 0304 	bic.w	r3, r3, #4
 8003358:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d016      	beq.n	8003392 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003364:	f7fe fc1c 	bl	8001ba0 <HAL_GetTick>
 8003368:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800336a:	e00a      	b.n	8003382 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800336c:	f7fe fc18 	bl	8001ba0 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	f241 3288 	movw	r2, #5000	@ 0x1388
 800337a:	4293      	cmp	r3, r2
 800337c:	d901      	bls.n	8003382 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e162      	b.n	8003648 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003382:	4b89      	ldr	r3, [pc, #548]	@ (80035a8 <HAL_RCC_OscConfig+0x778>)
 8003384:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003388:	f003 0302 	and.w	r3, r3, #2
 800338c:	2b00      	cmp	r3, #0
 800338e:	d0ed      	beq.n	800336c <HAL_RCC_OscConfig+0x53c>
 8003390:	e015      	b.n	80033be <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003392:	f7fe fc05 	bl	8001ba0 <HAL_GetTick>
 8003396:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003398:	e00a      	b.n	80033b0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800339a:	f7fe fc01 	bl	8001ba0 <HAL_GetTick>
 800339e:	4602      	mov	r2, r0
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d901      	bls.n	80033b0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80033ac:	2303      	movs	r3, #3
 80033ae:	e14b      	b.n	8003648 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80033b0:	4b7d      	ldr	r3, [pc, #500]	@ (80035a8 <HAL_RCC_OscConfig+0x778>)
 80033b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033b6:	f003 0302 	and.w	r3, r3, #2
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d1ed      	bne.n	800339a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033be:	7ffb      	ldrb	r3, [r7, #31]
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d105      	bne.n	80033d0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033c4:	4b78      	ldr	r3, [pc, #480]	@ (80035a8 <HAL_RCC_OscConfig+0x778>)
 80033c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033c8:	4a77      	ldr	r2, [pc, #476]	@ (80035a8 <HAL_RCC_OscConfig+0x778>)
 80033ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033ce:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0320 	and.w	r3, r3, #32
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d03c      	beq.n	8003456 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d01c      	beq.n	800341e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80033e4:	4b70      	ldr	r3, [pc, #448]	@ (80035a8 <HAL_RCC_OscConfig+0x778>)
 80033e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80033ea:	4a6f      	ldr	r2, [pc, #444]	@ (80035a8 <HAL_RCC_OscConfig+0x778>)
 80033ec:	f043 0301 	orr.w	r3, r3, #1
 80033f0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033f4:	f7fe fbd4 	bl	8001ba0 <HAL_GetTick>
 80033f8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80033fa:	e008      	b.n	800340e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80033fc:	f7fe fbd0 	bl	8001ba0 <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	2b02      	cmp	r3, #2
 8003408:	d901      	bls.n	800340e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e11c      	b.n	8003648 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800340e:	4b66      	ldr	r3, [pc, #408]	@ (80035a8 <HAL_RCC_OscConfig+0x778>)
 8003410:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003414:	f003 0302 	and.w	r3, r3, #2
 8003418:	2b00      	cmp	r3, #0
 800341a:	d0ef      	beq.n	80033fc <HAL_RCC_OscConfig+0x5cc>
 800341c:	e01b      	b.n	8003456 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800341e:	4b62      	ldr	r3, [pc, #392]	@ (80035a8 <HAL_RCC_OscConfig+0x778>)
 8003420:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003424:	4a60      	ldr	r2, [pc, #384]	@ (80035a8 <HAL_RCC_OscConfig+0x778>)
 8003426:	f023 0301 	bic.w	r3, r3, #1
 800342a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800342e:	f7fe fbb7 	bl	8001ba0 <HAL_GetTick>
 8003432:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003434:	e008      	b.n	8003448 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003436:	f7fe fbb3 	bl	8001ba0 <HAL_GetTick>
 800343a:	4602      	mov	r2, r0
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	2b02      	cmp	r3, #2
 8003442:	d901      	bls.n	8003448 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003444:	2303      	movs	r3, #3
 8003446:	e0ff      	b.n	8003648 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003448:	4b57      	ldr	r3, [pc, #348]	@ (80035a8 <HAL_RCC_OscConfig+0x778>)
 800344a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800344e:	f003 0302 	and.w	r3, r3, #2
 8003452:	2b00      	cmp	r3, #0
 8003454:	d1ef      	bne.n	8003436 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800345a:	2b00      	cmp	r3, #0
 800345c:	f000 80f3 	beq.w	8003646 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003464:	2b02      	cmp	r3, #2
 8003466:	f040 80c9 	bne.w	80035fc <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800346a:	4b4f      	ldr	r3, [pc, #316]	@ (80035a8 <HAL_RCC_OscConfig+0x778>)
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	f003 0203 	and.w	r2, r3, #3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800347a:	429a      	cmp	r2, r3
 800347c:	d12c      	bne.n	80034d8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003488:	3b01      	subs	r3, #1
 800348a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800348c:	429a      	cmp	r2, r3
 800348e:	d123      	bne.n	80034d8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800349a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800349c:	429a      	cmp	r2, r3
 800349e:	d11b      	bne.n	80034d8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034aa:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d113      	bne.n	80034d8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034ba:	085b      	lsrs	r3, r3, #1
 80034bc:	3b01      	subs	r3, #1
 80034be:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d109      	bne.n	80034d8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ce:	085b      	lsrs	r3, r3, #1
 80034d0:	3b01      	subs	r3, #1
 80034d2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d06b      	beq.n	80035b0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80034d8:	69bb      	ldr	r3, [r7, #24]
 80034da:	2b0c      	cmp	r3, #12
 80034dc:	d062      	beq.n	80035a4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80034de:	4b32      	ldr	r3, [pc, #200]	@ (80035a8 <HAL_RCC_OscConfig+0x778>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d001      	beq.n	80034ee <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e0ac      	b.n	8003648 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80034ee:	4b2e      	ldr	r3, [pc, #184]	@ (80035a8 <HAL_RCC_OscConfig+0x778>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a2d      	ldr	r2, [pc, #180]	@ (80035a8 <HAL_RCC_OscConfig+0x778>)
 80034f4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80034f8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80034fa:	f7fe fb51 	bl	8001ba0 <HAL_GetTick>
 80034fe:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003500:	e008      	b.n	8003514 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003502:	f7fe fb4d 	bl	8001ba0 <HAL_GetTick>
 8003506:	4602      	mov	r2, r0
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	1ad3      	subs	r3, r2, r3
 800350c:	2b02      	cmp	r3, #2
 800350e:	d901      	bls.n	8003514 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003510:	2303      	movs	r3, #3
 8003512:	e099      	b.n	8003648 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003514:	4b24      	ldr	r3, [pc, #144]	@ (80035a8 <HAL_RCC_OscConfig+0x778>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800351c:	2b00      	cmp	r3, #0
 800351e:	d1f0      	bne.n	8003502 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003520:	4b21      	ldr	r3, [pc, #132]	@ (80035a8 <HAL_RCC_OscConfig+0x778>)
 8003522:	68da      	ldr	r2, [r3, #12]
 8003524:	4b21      	ldr	r3, [pc, #132]	@ (80035ac <HAL_RCC_OscConfig+0x77c>)
 8003526:	4013      	ands	r3, r2
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003530:	3a01      	subs	r2, #1
 8003532:	0112      	lsls	r2, r2, #4
 8003534:	4311      	orrs	r1, r2
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800353a:	0212      	lsls	r2, r2, #8
 800353c:	4311      	orrs	r1, r2
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003542:	0852      	lsrs	r2, r2, #1
 8003544:	3a01      	subs	r2, #1
 8003546:	0552      	lsls	r2, r2, #21
 8003548:	4311      	orrs	r1, r2
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800354e:	0852      	lsrs	r2, r2, #1
 8003550:	3a01      	subs	r2, #1
 8003552:	0652      	lsls	r2, r2, #25
 8003554:	4311      	orrs	r1, r2
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800355a:	06d2      	lsls	r2, r2, #27
 800355c:	430a      	orrs	r2, r1
 800355e:	4912      	ldr	r1, [pc, #72]	@ (80035a8 <HAL_RCC_OscConfig+0x778>)
 8003560:	4313      	orrs	r3, r2
 8003562:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003564:	4b10      	ldr	r3, [pc, #64]	@ (80035a8 <HAL_RCC_OscConfig+0x778>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a0f      	ldr	r2, [pc, #60]	@ (80035a8 <HAL_RCC_OscConfig+0x778>)
 800356a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800356e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003570:	4b0d      	ldr	r3, [pc, #52]	@ (80035a8 <HAL_RCC_OscConfig+0x778>)
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	4a0c      	ldr	r2, [pc, #48]	@ (80035a8 <HAL_RCC_OscConfig+0x778>)
 8003576:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800357a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800357c:	f7fe fb10 	bl	8001ba0 <HAL_GetTick>
 8003580:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003582:	e008      	b.n	8003596 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003584:	f7fe fb0c 	bl	8001ba0 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	2b02      	cmp	r3, #2
 8003590:	d901      	bls.n	8003596 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e058      	b.n	8003648 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003596:	4b04      	ldr	r3, [pc, #16]	@ (80035a8 <HAL_RCC_OscConfig+0x778>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d0f0      	beq.n	8003584 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80035a2:	e050      	b.n	8003646 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e04f      	b.n	8003648 <HAL_RCC_OscConfig+0x818>
 80035a8:	40021000 	.word	0x40021000
 80035ac:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035b0:	4b27      	ldr	r3, [pc, #156]	@ (8003650 <HAL_RCC_OscConfig+0x820>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d144      	bne.n	8003646 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80035bc:	4b24      	ldr	r3, [pc, #144]	@ (8003650 <HAL_RCC_OscConfig+0x820>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a23      	ldr	r2, [pc, #140]	@ (8003650 <HAL_RCC_OscConfig+0x820>)
 80035c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80035c6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80035c8:	4b21      	ldr	r3, [pc, #132]	@ (8003650 <HAL_RCC_OscConfig+0x820>)
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	4a20      	ldr	r2, [pc, #128]	@ (8003650 <HAL_RCC_OscConfig+0x820>)
 80035ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80035d2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80035d4:	f7fe fae4 	bl	8001ba0 <HAL_GetTick>
 80035d8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035da:	e008      	b.n	80035ee <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035dc:	f7fe fae0 	bl	8001ba0 <HAL_GetTick>
 80035e0:	4602      	mov	r2, r0
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	2b02      	cmp	r3, #2
 80035e8:	d901      	bls.n	80035ee <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80035ea:	2303      	movs	r3, #3
 80035ec:	e02c      	b.n	8003648 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035ee:	4b18      	ldr	r3, [pc, #96]	@ (8003650 <HAL_RCC_OscConfig+0x820>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d0f0      	beq.n	80035dc <HAL_RCC_OscConfig+0x7ac>
 80035fa:	e024      	b.n	8003646 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80035fc:	69bb      	ldr	r3, [r7, #24]
 80035fe:	2b0c      	cmp	r3, #12
 8003600:	d01f      	beq.n	8003642 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003602:	4b13      	ldr	r3, [pc, #76]	@ (8003650 <HAL_RCC_OscConfig+0x820>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a12      	ldr	r2, [pc, #72]	@ (8003650 <HAL_RCC_OscConfig+0x820>)
 8003608:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800360c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800360e:	f7fe fac7 	bl	8001ba0 <HAL_GetTick>
 8003612:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003614:	e008      	b.n	8003628 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003616:	f7fe fac3 	bl	8001ba0 <HAL_GetTick>
 800361a:	4602      	mov	r2, r0
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	2b02      	cmp	r3, #2
 8003622:	d901      	bls.n	8003628 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003624:	2303      	movs	r3, #3
 8003626:	e00f      	b.n	8003648 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003628:	4b09      	ldr	r3, [pc, #36]	@ (8003650 <HAL_RCC_OscConfig+0x820>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d1f0      	bne.n	8003616 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003634:	4b06      	ldr	r3, [pc, #24]	@ (8003650 <HAL_RCC_OscConfig+0x820>)
 8003636:	68da      	ldr	r2, [r3, #12]
 8003638:	4905      	ldr	r1, [pc, #20]	@ (8003650 <HAL_RCC_OscConfig+0x820>)
 800363a:	4b06      	ldr	r3, [pc, #24]	@ (8003654 <HAL_RCC_OscConfig+0x824>)
 800363c:	4013      	ands	r3, r2
 800363e:	60cb      	str	r3, [r1, #12]
 8003640:	e001      	b.n	8003646 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e000      	b.n	8003648 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003646:	2300      	movs	r3, #0
}
 8003648:	4618      	mov	r0, r3
 800364a:	3720      	adds	r7, #32
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}
 8003650:	40021000 	.word	0x40021000
 8003654:	feeefffc 	.word	0xfeeefffc

08003658 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b084      	sub	sp, #16
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d101      	bne.n	800366c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e0e7      	b.n	800383c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800366c:	4b75      	ldr	r3, [pc, #468]	@ (8003844 <HAL_RCC_ClockConfig+0x1ec>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0307 	and.w	r3, r3, #7
 8003674:	683a      	ldr	r2, [r7, #0]
 8003676:	429a      	cmp	r2, r3
 8003678:	d910      	bls.n	800369c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800367a:	4b72      	ldr	r3, [pc, #456]	@ (8003844 <HAL_RCC_ClockConfig+0x1ec>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f023 0207 	bic.w	r2, r3, #7
 8003682:	4970      	ldr	r1, [pc, #448]	@ (8003844 <HAL_RCC_ClockConfig+0x1ec>)
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	4313      	orrs	r3, r2
 8003688:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800368a:	4b6e      	ldr	r3, [pc, #440]	@ (8003844 <HAL_RCC_ClockConfig+0x1ec>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 0307 	and.w	r3, r3, #7
 8003692:	683a      	ldr	r2, [r7, #0]
 8003694:	429a      	cmp	r2, r3
 8003696:	d001      	beq.n	800369c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e0cf      	b.n	800383c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0302 	and.w	r3, r3, #2
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d010      	beq.n	80036ca <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	689a      	ldr	r2, [r3, #8]
 80036ac:	4b66      	ldr	r3, [pc, #408]	@ (8003848 <HAL_RCC_ClockConfig+0x1f0>)
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d908      	bls.n	80036ca <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036b8:	4b63      	ldr	r3, [pc, #396]	@ (8003848 <HAL_RCC_ClockConfig+0x1f0>)
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	4960      	ldr	r1, [pc, #384]	@ (8003848 <HAL_RCC_ClockConfig+0x1f0>)
 80036c6:	4313      	orrs	r3, r2
 80036c8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0301 	and.w	r3, r3, #1
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d04c      	beq.n	8003770 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	2b03      	cmp	r3, #3
 80036dc:	d107      	bne.n	80036ee <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036de:	4b5a      	ldr	r3, [pc, #360]	@ (8003848 <HAL_RCC_ClockConfig+0x1f0>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d121      	bne.n	800372e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e0a6      	b.n	800383c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	d107      	bne.n	8003706 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036f6:	4b54      	ldr	r3, [pc, #336]	@ (8003848 <HAL_RCC_ClockConfig+0x1f0>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d115      	bne.n	800372e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e09a      	b.n	800383c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d107      	bne.n	800371e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800370e:	4b4e      	ldr	r3, [pc, #312]	@ (8003848 <HAL_RCC_ClockConfig+0x1f0>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0302 	and.w	r3, r3, #2
 8003716:	2b00      	cmp	r3, #0
 8003718:	d109      	bne.n	800372e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e08e      	b.n	800383c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800371e:	4b4a      	ldr	r3, [pc, #296]	@ (8003848 <HAL_RCC_ClockConfig+0x1f0>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003726:	2b00      	cmp	r3, #0
 8003728:	d101      	bne.n	800372e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e086      	b.n	800383c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800372e:	4b46      	ldr	r3, [pc, #280]	@ (8003848 <HAL_RCC_ClockConfig+0x1f0>)
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	f023 0203 	bic.w	r2, r3, #3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	4943      	ldr	r1, [pc, #268]	@ (8003848 <HAL_RCC_ClockConfig+0x1f0>)
 800373c:	4313      	orrs	r3, r2
 800373e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003740:	f7fe fa2e 	bl	8001ba0 <HAL_GetTick>
 8003744:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003746:	e00a      	b.n	800375e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003748:	f7fe fa2a 	bl	8001ba0 <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003756:	4293      	cmp	r3, r2
 8003758:	d901      	bls.n	800375e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e06e      	b.n	800383c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800375e:	4b3a      	ldr	r3, [pc, #232]	@ (8003848 <HAL_RCC_ClockConfig+0x1f0>)
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	f003 020c 	and.w	r2, r3, #12
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	429a      	cmp	r2, r3
 800376e:	d1eb      	bne.n	8003748 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0302 	and.w	r3, r3, #2
 8003778:	2b00      	cmp	r3, #0
 800377a:	d010      	beq.n	800379e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	689a      	ldr	r2, [r3, #8]
 8003780:	4b31      	ldr	r3, [pc, #196]	@ (8003848 <HAL_RCC_ClockConfig+0x1f0>)
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003788:	429a      	cmp	r2, r3
 800378a:	d208      	bcs.n	800379e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800378c:	4b2e      	ldr	r3, [pc, #184]	@ (8003848 <HAL_RCC_ClockConfig+0x1f0>)
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	492b      	ldr	r1, [pc, #172]	@ (8003848 <HAL_RCC_ClockConfig+0x1f0>)
 800379a:	4313      	orrs	r3, r2
 800379c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800379e:	4b29      	ldr	r3, [pc, #164]	@ (8003844 <HAL_RCC_ClockConfig+0x1ec>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0307 	and.w	r3, r3, #7
 80037a6:	683a      	ldr	r2, [r7, #0]
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d210      	bcs.n	80037ce <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ac:	4b25      	ldr	r3, [pc, #148]	@ (8003844 <HAL_RCC_ClockConfig+0x1ec>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f023 0207 	bic.w	r2, r3, #7
 80037b4:	4923      	ldr	r1, [pc, #140]	@ (8003844 <HAL_RCC_ClockConfig+0x1ec>)
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037bc:	4b21      	ldr	r3, [pc, #132]	@ (8003844 <HAL_RCC_ClockConfig+0x1ec>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 0307 	and.w	r3, r3, #7
 80037c4:	683a      	ldr	r2, [r7, #0]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d001      	beq.n	80037ce <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e036      	b.n	800383c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0304 	and.w	r3, r3, #4
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d008      	beq.n	80037ec <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037da:	4b1b      	ldr	r3, [pc, #108]	@ (8003848 <HAL_RCC_ClockConfig+0x1f0>)
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	4918      	ldr	r1, [pc, #96]	@ (8003848 <HAL_RCC_ClockConfig+0x1f0>)
 80037e8:	4313      	orrs	r3, r2
 80037ea:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0308 	and.w	r3, r3, #8
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d009      	beq.n	800380c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037f8:	4b13      	ldr	r3, [pc, #76]	@ (8003848 <HAL_RCC_ClockConfig+0x1f0>)
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	691b      	ldr	r3, [r3, #16]
 8003804:	00db      	lsls	r3, r3, #3
 8003806:	4910      	ldr	r1, [pc, #64]	@ (8003848 <HAL_RCC_ClockConfig+0x1f0>)
 8003808:	4313      	orrs	r3, r2
 800380a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800380c:	f000 f824 	bl	8003858 <HAL_RCC_GetSysClockFreq>
 8003810:	4602      	mov	r2, r0
 8003812:	4b0d      	ldr	r3, [pc, #52]	@ (8003848 <HAL_RCC_ClockConfig+0x1f0>)
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	091b      	lsrs	r3, r3, #4
 8003818:	f003 030f 	and.w	r3, r3, #15
 800381c:	490b      	ldr	r1, [pc, #44]	@ (800384c <HAL_RCC_ClockConfig+0x1f4>)
 800381e:	5ccb      	ldrb	r3, [r1, r3]
 8003820:	f003 031f 	and.w	r3, r3, #31
 8003824:	fa22 f303 	lsr.w	r3, r2, r3
 8003828:	4a09      	ldr	r2, [pc, #36]	@ (8003850 <HAL_RCC_ClockConfig+0x1f8>)
 800382a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800382c:	4b09      	ldr	r3, [pc, #36]	@ (8003854 <HAL_RCC_ClockConfig+0x1fc>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4618      	mov	r0, r3
 8003832:	f7fe f965 	bl	8001b00 <HAL_InitTick>
 8003836:	4603      	mov	r3, r0
 8003838:	72fb      	strb	r3, [r7, #11]

  return status;
 800383a:	7afb      	ldrb	r3, [r7, #11]
}
 800383c:	4618      	mov	r0, r3
 800383e:	3710      	adds	r7, #16
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}
 8003844:	40022000 	.word	0x40022000
 8003848:	40021000 	.word	0x40021000
 800384c:	08007f9c 	.word	0x08007f9c
 8003850:	20000000 	.word	0x20000000
 8003854:	20000004 	.word	0x20000004

08003858 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003858:	b480      	push	{r7}
 800385a:	b089      	sub	sp, #36	@ 0x24
 800385c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800385e:	2300      	movs	r3, #0
 8003860:	61fb      	str	r3, [r7, #28]
 8003862:	2300      	movs	r3, #0
 8003864:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003866:	4b3e      	ldr	r3, [pc, #248]	@ (8003960 <HAL_RCC_GetSysClockFreq+0x108>)
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	f003 030c 	and.w	r3, r3, #12
 800386e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003870:	4b3b      	ldr	r3, [pc, #236]	@ (8003960 <HAL_RCC_GetSysClockFreq+0x108>)
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	f003 0303 	and.w	r3, r3, #3
 8003878:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d005      	beq.n	800388c <HAL_RCC_GetSysClockFreq+0x34>
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	2b0c      	cmp	r3, #12
 8003884:	d121      	bne.n	80038ca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2b01      	cmp	r3, #1
 800388a:	d11e      	bne.n	80038ca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800388c:	4b34      	ldr	r3, [pc, #208]	@ (8003960 <HAL_RCC_GetSysClockFreq+0x108>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0308 	and.w	r3, r3, #8
 8003894:	2b00      	cmp	r3, #0
 8003896:	d107      	bne.n	80038a8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003898:	4b31      	ldr	r3, [pc, #196]	@ (8003960 <HAL_RCC_GetSysClockFreq+0x108>)
 800389a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800389e:	0a1b      	lsrs	r3, r3, #8
 80038a0:	f003 030f 	and.w	r3, r3, #15
 80038a4:	61fb      	str	r3, [r7, #28]
 80038a6:	e005      	b.n	80038b4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80038a8:	4b2d      	ldr	r3, [pc, #180]	@ (8003960 <HAL_RCC_GetSysClockFreq+0x108>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	091b      	lsrs	r3, r3, #4
 80038ae:	f003 030f 	and.w	r3, r3, #15
 80038b2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80038b4:	4a2b      	ldr	r2, [pc, #172]	@ (8003964 <HAL_RCC_GetSysClockFreq+0x10c>)
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038bc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d10d      	bne.n	80038e0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80038c8:	e00a      	b.n	80038e0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	2b04      	cmp	r3, #4
 80038ce:	d102      	bne.n	80038d6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80038d0:	4b25      	ldr	r3, [pc, #148]	@ (8003968 <HAL_RCC_GetSysClockFreq+0x110>)
 80038d2:	61bb      	str	r3, [r7, #24]
 80038d4:	e004      	b.n	80038e0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	2b08      	cmp	r3, #8
 80038da:	d101      	bne.n	80038e0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80038dc:	4b23      	ldr	r3, [pc, #140]	@ (800396c <HAL_RCC_GetSysClockFreq+0x114>)
 80038de:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	2b0c      	cmp	r3, #12
 80038e4:	d134      	bne.n	8003950 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80038e6:	4b1e      	ldr	r3, [pc, #120]	@ (8003960 <HAL_RCC_GetSysClockFreq+0x108>)
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	f003 0303 	and.w	r3, r3, #3
 80038ee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	2b02      	cmp	r3, #2
 80038f4:	d003      	beq.n	80038fe <HAL_RCC_GetSysClockFreq+0xa6>
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	2b03      	cmp	r3, #3
 80038fa:	d003      	beq.n	8003904 <HAL_RCC_GetSysClockFreq+0xac>
 80038fc:	e005      	b.n	800390a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80038fe:	4b1a      	ldr	r3, [pc, #104]	@ (8003968 <HAL_RCC_GetSysClockFreq+0x110>)
 8003900:	617b      	str	r3, [r7, #20]
      break;
 8003902:	e005      	b.n	8003910 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003904:	4b19      	ldr	r3, [pc, #100]	@ (800396c <HAL_RCC_GetSysClockFreq+0x114>)
 8003906:	617b      	str	r3, [r7, #20]
      break;
 8003908:	e002      	b.n	8003910 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	617b      	str	r3, [r7, #20]
      break;
 800390e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003910:	4b13      	ldr	r3, [pc, #76]	@ (8003960 <HAL_RCC_GetSysClockFreq+0x108>)
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	091b      	lsrs	r3, r3, #4
 8003916:	f003 0307 	and.w	r3, r3, #7
 800391a:	3301      	adds	r3, #1
 800391c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800391e:	4b10      	ldr	r3, [pc, #64]	@ (8003960 <HAL_RCC_GetSysClockFreq+0x108>)
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	0a1b      	lsrs	r3, r3, #8
 8003924:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003928:	697a      	ldr	r2, [r7, #20]
 800392a:	fb03 f202 	mul.w	r2, r3, r2
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	fbb2 f3f3 	udiv	r3, r2, r3
 8003934:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003936:	4b0a      	ldr	r3, [pc, #40]	@ (8003960 <HAL_RCC_GetSysClockFreq+0x108>)
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	0e5b      	lsrs	r3, r3, #25
 800393c:	f003 0303 	and.w	r3, r3, #3
 8003940:	3301      	adds	r3, #1
 8003942:	005b      	lsls	r3, r3, #1
 8003944:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003946:	697a      	ldr	r2, [r7, #20]
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	fbb2 f3f3 	udiv	r3, r2, r3
 800394e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003950:	69bb      	ldr	r3, [r7, #24]
}
 8003952:	4618      	mov	r0, r3
 8003954:	3724      	adds	r7, #36	@ 0x24
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr
 800395e:	bf00      	nop
 8003960:	40021000 	.word	0x40021000
 8003964:	08007fb4 	.word	0x08007fb4
 8003968:	00f42400 	.word	0x00f42400
 800396c:	007a1200 	.word	0x007a1200

08003970 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003970:	b480      	push	{r7}
 8003972:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003974:	4b03      	ldr	r3, [pc, #12]	@ (8003984 <HAL_RCC_GetHCLKFreq+0x14>)
 8003976:	681b      	ldr	r3, [r3, #0]
}
 8003978:	4618      	mov	r0, r3
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr
 8003982:	bf00      	nop
 8003984:	20000000 	.word	0x20000000

08003988 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800398c:	f7ff fff0 	bl	8003970 <HAL_RCC_GetHCLKFreq>
 8003990:	4602      	mov	r2, r0
 8003992:	4b06      	ldr	r3, [pc, #24]	@ (80039ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	0a1b      	lsrs	r3, r3, #8
 8003998:	f003 0307 	and.w	r3, r3, #7
 800399c:	4904      	ldr	r1, [pc, #16]	@ (80039b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800399e:	5ccb      	ldrb	r3, [r1, r3]
 80039a0:	f003 031f 	and.w	r3, r3, #31
 80039a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	40021000 	.word	0x40021000
 80039b0:	08007fac 	.word	0x08007fac

080039b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80039b8:	f7ff ffda 	bl	8003970 <HAL_RCC_GetHCLKFreq>
 80039bc:	4602      	mov	r2, r0
 80039be:	4b06      	ldr	r3, [pc, #24]	@ (80039d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	0adb      	lsrs	r3, r3, #11
 80039c4:	f003 0307 	and.w	r3, r3, #7
 80039c8:	4904      	ldr	r1, [pc, #16]	@ (80039dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80039ca:	5ccb      	ldrb	r3, [r1, r3]
 80039cc:	f003 031f 	and.w	r3, r3, #31
 80039d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	40021000 	.word	0x40021000
 80039dc:	08007fac 	.word	0x08007fac

080039e0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b086      	sub	sp, #24
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80039e8:	2300      	movs	r3, #0
 80039ea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80039ec:	4b2a      	ldr	r3, [pc, #168]	@ (8003a98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d003      	beq.n	8003a00 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80039f8:	f7ff f9b6 	bl	8002d68 <HAL_PWREx_GetVoltageRange>
 80039fc:	6178      	str	r0, [r7, #20]
 80039fe:	e014      	b.n	8003a2a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003a00:	4b25      	ldr	r3, [pc, #148]	@ (8003a98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a04:	4a24      	ldr	r2, [pc, #144]	@ (8003a98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a0a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a0c:	4b22      	ldr	r3, [pc, #136]	@ (8003a98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a14:	60fb      	str	r3, [r7, #12]
 8003a16:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003a18:	f7ff f9a6 	bl	8002d68 <HAL_PWREx_GetVoltageRange>
 8003a1c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003a1e:	4b1e      	ldr	r3, [pc, #120]	@ (8003a98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a22:	4a1d      	ldr	r2, [pc, #116]	@ (8003a98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a24:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a28:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a30:	d10b      	bne.n	8003a4a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2b80      	cmp	r3, #128	@ 0x80
 8003a36:	d919      	bls.n	8003a6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2ba0      	cmp	r3, #160	@ 0xa0
 8003a3c:	d902      	bls.n	8003a44 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003a3e:	2302      	movs	r3, #2
 8003a40:	613b      	str	r3, [r7, #16]
 8003a42:	e013      	b.n	8003a6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003a44:	2301      	movs	r3, #1
 8003a46:	613b      	str	r3, [r7, #16]
 8003a48:	e010      	b.n	8003a6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2b80      	cmp	r3, #128	@ 0x80
 8003a4e:	d902      	bls.n	8003a56 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003a50:	2303      	movs	r3, #3
 8003a52:	613b      	str	r3, [r7, #16]
 8003a54:	e00a      	b.n	8003a6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2b80      	cmp	r3, #128	@ 0x80
 8003a5a:	d102      	bne.n	8003a62 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003a5c:	2302      	movs	r3, #2
 8003a5e:	613b      	str	r3, [r7, #16]
 8003a60:	e004      	b.n	8003a6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2b70      	cmp	r3, #112	@ 0x70
 8003a66:	d101      	bne.n	8003a6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003a68:	2301      	movs	r3, #1
 8003a6a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003a6c:	4b0b      	ldr	r3, [pc, #44]	@ (8003a9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f023 0207 	bic.w	r2, r3, #7
 8003a74:	4909      	ldr	r1, [pc, #36]	@ (8003a9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003a7c:	4b07      	ldr	r3, [pc, #28]	@ (8003a9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0307 	and.w	r3, r3, #7
 8003a84:	693a      	ldr	r2, [r7, #16]
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d001      	beq.n	8003a8e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e000      	b.n	8003a90 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3718      	adds	r7, #24
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	40021000 	.word	0x40021000
 8003a9c:	40022000 	.word	0x40022000

08003aa0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b086      	sub	sp, #24
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003aac:	2300      	movs	r3, #0
 8003aae:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d031      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ac0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003ac4:	d01a      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003ac6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003aca:	d814      	bhi.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d009      	beq.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003ad0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003ad4:	d10f      	bne.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003ad6:	4b5d      	ldr	r3, [pc, #372]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	4a5c      	ldr	r2, [pc, #368]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003adc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ae0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ae2:	e00c      	b.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	3304      	adds	r3, #4
 8003ae8:	2100      	movs	r1, #0
 8003aea:	4618      	mov	r0, r3
 8003aec:	f000 fa44 	bl	8003f78 <RCCEx_PLLSAI1_Config>
 8003af0:	4603      	mov	r3, r0
 8003af2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003af4:	e003      	b.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	74fb      	strb	r3, [r7, #19]
      break;
 8003afa:	e000      	b.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003afc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003afe:	7cfb      	ldrb	r3, [r7, #19]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d10b      	bne.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b04:	4b51      	ldr	r3, [pc, #324]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b0a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b12:	494e      	ldr	r1, [pc, #312]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b14:	4313      	orrs	r3, r2
 8003b16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003b1a:	e001      	b.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b1c:	7cfb      	ldrb	r3, [r7, #19]
 8003b1e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	f000 809e 	beq.w	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003b32:	4b46      	ldr	r3, [pc, #280]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d101      	bne.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e000      	b.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003b42:	2300      	movs	r3, #0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d00d      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b48:	4b40      	ldr	r3, [pc, #256]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b4c:	4a3f      	ldr	r2, [pc, #252]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b52:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b54:	4b3d      	ldr	r3, [pc, #244]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b5c:	60bb      	str	r3, [r7, #8]
 8003b5e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b60:	2301      	movs	r3, #1
 8003b62:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b64:	4b3a      	ldr	r3, [pc, #232]	@ (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a39      	ldr	r2, [pc, #228]	@ (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003b6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b6e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b70:	f7fe f816 	bl	8001ba0 <HAL_GetTick>
 8003b74:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003b76:	e009      	b.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b78:	f7fe f812 	bl	8001ba0 <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d902      	bls.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	74fb      	strb	r3, [r7, #19]
        break;
 8003b8a:	e005      	b.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003b8c:	4b30      	ldr	r3, [pc, #192]	@ (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d0ef      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003b98:	7cfb      	ldrb	r3, [r7, #19]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d15a      	bne.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003b9e:	4b2b      	ldr	r3, [pc, #172]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ba4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ba8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d01e      	beq.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003bb4:	697a      	ldr	r2, [r7, #20]
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d019      	beq.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003bba:	4b24      	ldr	r3, [pc, #144]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003bbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bc0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bc4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003bc6:	4b21      	ldr	r3, [pc, #132]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003bc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bcc:	4a1f      	ldr	r2, [pc, #124]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003bce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bd2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003bd6:	4b1d      	ldr	r3, [pc, #116]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003bd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bdc:	4a1b      	ldr	r2, [pc, #108]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003bde:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003be2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003be6:	4a19      	ldr	r2, [pc, #100]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	f003 0301 	and.w	r3, r3, #1
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d016      	beq.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bf8:	f7fd ffd2 	bl	8001ba0 <HAL_GetTick>
 8003bfc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bfe:	e00b      	b.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c00:	f7fd ffce 	bl	8001ba0 <HAL_GetTick>
 8003c04:	4602      	mov	r2, r0
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d902      	bls.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003c12:	2303      	movs	r3, #3
 8003c14:	74fb      	strb	r3, [r7, #19]
            break;
 8003c16:	e006      	b.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c18:	4b0c      	ldr	r3, [pc, #48]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c1e:	f003 0302 	and.w	r3, r3, #2
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d0ec      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003c26:	7cfb      	ldrb	r3, [r7, #19]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d10b      	bne.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c2c:	4b07      	ldr	r3, [pc, #28]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c32:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c3a:	4904      	ldr	r1, [pc, #16]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003c42:	e009      	b.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c44:	7cfb      	ldrb	r3, [r7, #19]
 8003c46:	74bb      	strb	r3, [r7, #18]
 8003c48:	e006      	b.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003c4a:	bf00      	nop
 8003c4c:	40021000 	.word	0x40021000
 8003c50:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c54:	7cfb      	ldrb	r3, [r7, #19]
 8003c56:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c58:	7c7b      	ldrb	r3, [r7, #17]
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d105      	bne.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c5e:	4b9e      	ldr	r3, [pc, #632]	@ (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c62:	4a9d      	ldr	r2, [pc, #628]	@ (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c64:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c68:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0301 	and.w	r3, r3, #1
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d00a      	beq.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c76:	4b98      	ldr	r3, [pc, #608]	@ (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c7c:	f023 0203 	bic.w	r2, r3, #3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6a1b      	ldr	r3, [r3, #32]
 8003c84:	4994      	ldr	r1, [pc, #592]	@ (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c86:	4313      	orrs	r3, r2
 8003c88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0302 	and.w	r3, r3, #2
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d00a      	beq.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c98:	4b8f      	ldr	r3, [pc, #572]	@ (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c9e:	f023 020c 	bic.w	r2, r3, #12
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ca6:	498c      	ldr	r1, [pc, #560]	@ (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 0304 	and.w	r3, r3, #4
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d00a      	beq.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003cba:	4b87      	ldr	r3, [pc, #540]	@ (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cc0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cc8:	4983      	ldr	r1, [pc, #524]	@ (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0308 	and.w	r3, r3, #8
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d00a      	beq.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003cdc:	4b7e      	ldr	r3, [pc, #504]	@ (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ce2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cea:	497b      	ldr	r1, [pc, #492]	@ (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003cec:	4313      	orrs	r3, r2
 8003cee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0320 	and.w	r3, r3, #32
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d00a      	beq.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003cfe:	4b76      	ldr	r3, [pc, #472]	@ (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d04:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d0c:	4972      	ldr	r1, [pc, #456]	@ (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d00a      	beq.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d20:	4b6d      	ldr	r3, [pc, #436]	@ (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d26:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d2e:	496a      	ldr	r1, [pc, #424]	@ (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003d30:	4313      	orrs	r3, r2
 8003d32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d00a      	beq.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003d42:	4b65      	ldr	r3, [pc, #404]	@ (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d48:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d50:	4961      	ldr	r1, [pc, #388]	@ (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003d52:	4313      	orrs	r3, r2
 8003d54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d00a      	beq.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d64:	4b5c      	ldr	r3, [pc, #368]	@ (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d6a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d72:	4959      	ldr	r1, [pc, #356]	@ (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003d74:	4313      	orrs	r3, r2
 8003d76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d00a      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d86:	4b54      	ldr	r3, [pc, #336]	@ (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d8c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d94:	4950      	ldr	r1, [pc, #320]	@ (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003d96:	4313      	orrs	r3, r2
 8003d98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d00a      	beq.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003da8:	4b4b      	ldr	r3, [pc, #300]	@ (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dae:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003db6:	4948      	ldr	r1, [pc, #288]	@ (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003db8:	4313      	orrs	r3, r2
 8003dba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d00a      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003dca:	4b43      	ldr	r3, [pc, #268]	@ (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003dcc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003dd0:	f023 0203 	bic.w	r2, r3, #3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dd8:	493f      	ldr	r1, [pc, #252]	@ (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d028      	beq.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003dec:	4b3a      	ldr	r3, [pc, #232]	@ (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003df2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003dfa:	4937      	ldr	r1, [pc, #220]	@ (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e06:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e0a:	d106      	bne.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e0c:	4b32      	ldr	r3, [pc, #200]	@ (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	4a31      	ldr	r2, [pc, #196]	@ (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003e12:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e16:	60d3      	str	r3, [r2, #12]
 8003e18:	e011      	b.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e1e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003e22:	d10c      	bne.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	3304      	adds	r3, #4
 8003e28:	2101      	movs	r1, #1
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f000 f8a4 	bl	8003f78 <RCCEx_PLLSAI1_Config>
 8003e30:	4603      	mov	r3, r0
 8003e32:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003e34:	7cfb      	ldrb	r3, [r7, #19]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d001      	beq.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 8003e3a:	7cfb      	ldrb	r3, [r7, #19]
 8003e3c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d028      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003e4a:	4b23      	ldr	r3, [pc, #140]	@ (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e50:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e58:	491f      	ldr	r1, [pc, #124]	@ (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e64:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e68:	d106      	bne.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e6a:	4b1b      	ldr	r3, [pc, #108]	@ (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003e6c:	68db      	ldr	r3, [r3, #12]
 8003e6e:	4a1a      	ldr	r2, [pc, #104]	@ (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003e70:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e74:	60d3      	str	r3, [r2, #12]
 8003e76:	e011      	b.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e7c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003e80:	d10c      	bne.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	3304      	adds	r3, #4
 8003e86:	2101      	movs	r1, #1
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f000 f875 	bl	8003f78 <RCCEx_PLLSAI1_Config>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e92:	7cfb      	ldrb	r3, [r7, #19]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d001      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 8003e98:	7cfb      	ldrb	r3, [r7, #19]
 8003e9a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d02b      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ea8:	4b0b      	ldr	r3, [pc, #44]	@ (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eae:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003eb6:	4908      	ldr	r1, [pc, #32]	@ (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ec2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003ec6:	d109      	bne.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ec8:	4b03      	ldr	r3, [pc, #12]	@ (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	4a02      	ldr	r2, [pc, #8]	@ (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003ece:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ed2:	60d3      	str	r3, [r2, #12]
 8003ed4:	e014      	b.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x460>
 8003ed6:	bf00      	nop
 8003ed8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ee0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003ee4:	d10c      	bne.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	3304      	adds	r3, #4
 8003eea:	2101      	movs	r1, #1
 8003eec:	4618      	mov	r0, r3
 8003eee:	f000 f843 	bl	8003f78 <RCCEx_PLLSAI1_Config>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ef6:	7cfb      	ldrb	r3, [r7, #19]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d001      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 8003efc:	7cfb      	ldrb	r3, [r7, #19]
 8003efe:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d01c      	beq.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f0c:	4b19      	ldr	r3, [pc, #100]	@ (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f12:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f1a:	4916      	ldr	r1, [pc, #88]	@ (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f26:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003f2a:	d10c      	bne.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	3304      	adds	r3, #4
 8003f30:	2102      	movs	r1, #2
 8003f32:	4618      	mov	r0, r3
 8003f34:	f000 f820 	bl	8003f78 <RCCEx_PLLSAI1_Config>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f3c:	7cfb      	ldrb	r3, [r7, #19]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d001      	beq.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 8003f42:	7cfb      	ldrb	r3, [r7, #19]
 8003f44:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d00a      	beq.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003f52:	4b08      	ldr	r3, [pc, #32]	@ (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f58:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f60:	4904      	ldr	r1, [pc, #16]	@ (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003f62:	4313      	orrs	r3, r2
 8003f64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003f68:	7cbb      	ldrb	r3, [r7, #18]
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3718      	adds	r7, #24
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	40021000 	.word	0x40021000

08003f78 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b084      	sub	sp, #16
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f82:	2300      	movs	r3, #0
 8003f84:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003f86:	4b74      	ldr	r3, [pc, #464]	@ (8004158 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	f003 0303 	and.w	r3, r3, #3
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d018      	beq.n	8003fc4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003f92:	4b71      	ldr	r3, [pc, #452]	@ (8004158 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	f003 0203 	and.w	r2, r3, #3
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d10d      	bne.n	8003fbe <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
       ||
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d009      	beq.n	8003fbe <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003faa:	4b6b      	ldr	r3, [pc, #428]	@ (8004158 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	091b      	lsrs	r3, r3, #4
 8003fb0:	f003 0307 	and.w	r3, r3, #7
 8003fb4:	1c5a      	adds	r2, r3, #1
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	685b      	ldr	r3, [r3, #4]
       ||
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d047      	beq.n	800404e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	73fb      	strb	r3, [r7, #15]
 8003fc2:	e044      	b.n	800404e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	2b03      	cmp	r3, #3
 8003fca:	d018      	beq.n	8003ffe <RCCEx_PLLSAI1_Config+0x86>
 8003fcc:	2b03      	cmp	r3, #3
 8003fce:	d825      	bhi.n	800401c <RCCEx_PLLSAI1_Config+0xa4>
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d002      	beq.n	8003fda <RCCEx_PLLSAI1_Config+0x62>
 8003fd4:	2b02      	cmp	r3, #2
 8003fd6:	d009      	beq.n	8003fec <RCCEx_PLLSAI1_Config+0x74>
 8003fd8:	e020      	b.n	800401c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003fda:	4b5f      	ldr	r3, [pc, #380]	@ (8004158 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0302 	and.w	r3, r3, #2
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d11d      	bne.n	8004022 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fea:	e01a      	b.n	8004022 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003fec:	4b5a      	ldr	r3, [pc, #360]	@ (8004158 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d116      	bne.n	8004026 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ffc:	e013      	b.n	8004026 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003ffe:	4b56      	ldr	r3, [pc, #344]	@ (8004158 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d10f      	bne.n	800402a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800400a:	4b53      	ldr	r3, [pc, #332]	@ (8004158 <RCCEx_PLLSAI1_Config+0x1e0>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004012:	2b00      	cmp	r3, #0
 8004014:	d109      	bne.n	800402a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800401a:	e006      	b.n	800402a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	73fb      	strb	r3, [r7, #15]
      break;
 8004020:	e004      	b.n	800402c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004022:	bf00      	nop
 8004024:	e002      	b.n	800402c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004026:	bf00      	nop
 8004028:	e000      	b.n	800402c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800402a:	bf00      	nop
    }

    if(status == HAL_OK)
 800402c:	7bfb      	ldrb	r3, [r7, #15]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d10d      	bne.n	800404e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004032:	4b49      	ldr	r3, [pc, #292]	@ (8004158 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004034:	68db      	ldr	r3, [r3, #12]
 8004036:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6819      	ldr	r1, [r3, #0]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	3b01      	subs	r3, #1
 8004044:	011b      	lsls	r3, r3, #4
 8004046:	430b      	orrs	r3, r1
 8004048:	4943      	ldr	r1, [pc, #268]	@ (8004158 <RCCEx_PLLSAI1_Config+0x1e0>)
 800404a:	4313      	orrs	r3, r2
 800404c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800404e:	7bfb      	ldrb	r3, [r7, #15]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d17c      	bne.n	800414e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004054:	4b40      	ldr	r3, [pc, #256]	@ (8004158 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a3f      	ldr	r2, [pc, #252]	@ (8004158 <RCCEx_PLLSAI1_Config+0x1e0>)
 800405a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800405e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004060:	f7fd fd9e 	bl	8001ba0 <HAL_GetTick>
 8004064:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004066:	e009      	b.n	800407c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004068:	f7fd fd9a 	bl	8001ba0 <HAL_GetTick>
 800406c:	4602      	mov	r2, r0
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	2b02      	cmp	r3, #2
 8004074:	d902      	bls.n	800407c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004076:	2303      	movs	r3, #3
 8004078:	73fb      	strb	r3, [r7, #15]
        break;
 800407a:	e005      	b.n	8004088 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800407c:	4b36      	ldr	r3, [pc, #216]	@ (8004158 <RCCEx_PLLSAI1_Config+0x1e0>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004084:	2b00      	cmp	r3, #0
 8004086:	d1ef      	bne.n	8004068 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004088:	7bfb      	ldrb	r3, [r7, #15]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d15f      	bne.n	800414e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d110      	bne.n	80040b6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004094:	4b30      	ldr	r3, [pc, #192]	@ (8004158 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004096:	691b      	ldr	r3, [r3, #16]
 8004098:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 800409c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80040a0:	687a      	ldr	r2, [r7, #4]
 80040a2:	6892      	ldr	r2, [r2, #8]
 80040a4:	0211      	lsls	r1, r2, #8
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	68d2      	ldr	r2, [r2, #12]
 80040aa:	06d2      	lsls	r2, r2, #27
 80040ac:	430a      	orrs	r2, r1
 80040ae:	492a      	ldr	r1, [pc, #168]	@ (8004158 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040b0:	4313      	orrs	r3, r2
 80040b2:	610b      	str	r3, [r1, #16]
 80040b4:	e027      	b.n	8004106 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d112      	bne.n	80040e2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80040bc:	4b26      	ldr	r3, [pc, #152]	@ (8004158 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040be:	691b      	ldr	r3, [r3, #16]
 80040c0:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80040c4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	6892      	ldr	r2, [r2, #8]
 80040cc:	0211      	lsls	r1, r2, #8
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	6912      	ldr	r2, [r2, #16]
 80040d2:	0852      	lsrs	r2, r2, #1
 80040d4:	3a01      	subs	r2, #1
 80040d6:	0552      	lsls	r2, r2, #21
 80040d8:	430a      	orrs	r2, r1
 80040da:	491f      	ldr	r1, [pc, #124]	@ (8004158 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040dc:	4313      	orrs	r3, r2
 80040de:	610b      	str	r3, [r1, #16]
 80040e0:	e011      	b.n	8004106 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80040e2:	4b1d      	ldr	r3, [pc, #116]	@ (8004158 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040e4:	691b      	ldr	r3, [r3, #16]
 80040e6:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80040ea:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	6892      	ldr	r2, [r2, #8]
 80040f2:	0211      	lsls	r1, r2, #8
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	6952      	ldr	r2, [r2, #20]
 80040f8:	0852      	lsrs	r2, r2, #1
 80040fa:	3a01      	subs	r2, #1
 80040fc:	0652      	lsls	r2, r2, #25
 80040fe:	430a      	orrs	r2, r1
 8004100:	4915      	ldr	r1, [pc, #84]	@ (8004158 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004102:	4313      	orrs	r3, r2
 8004104:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004106:	4b14      	ldr	r3, [pc, #80]	@ (8004158 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a13      	ldr	r2, [pc, #76]	@ (8004158 <RCCEx_PLLSAI1_Config+0x1e0>)
 800410c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004110:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004112:	f7fd fd45 	bl	8001ba0 <HAL_GetTick>
 8004116:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004118:	e009      	b.n	800412e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800411a:	f7fd fd41 	bl	8001ba0 <HAL_GetTick>
 800411e:	4602      	mov	r2, r0
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	2b02      	cmp	r3, #2
 8004126:	d902      	bls.n	800412e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004128:	2303      	movs	r3, #3
 800412a:	73fb      	strb	r3, [r7, #15]
          break;
 800412c:	e005      	b.n	800413a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800412e:	4b0a      	ldr	r3, [pc, #40]	@ (8004158 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d0ef      	beq.n	800411a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800413a:	7bfb      	ldrb	r3, [r7, #15]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d106      	bne.n	800414e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004140:	4b05      	ldr	r3, [pc, #20]	@ (8004158 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004142:	691a      	ldr	r2, [r3, #16]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	699b      	ldr	r3, [r3, #24]
 8004148:	4903      	ldr	r1, [pc, #12]	@ (8004158 <RCCEx_PLLSAI1_Config+0x1e0>)
 800414a:	4313      	orrs	r3, r2
 800414c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800414e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004150:	4618      	mov	r0, r3
 8004152:	3710      	adds	r7, #16
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}
 8004158:	40021000 	.word	0x40021000

0800415c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b082      	sub	sp, #8
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d101      	bne.n	800416e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e049      	b.n	8004202 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004174:	b2db      	uxtb	r3, r3
 8004176:	2b00      	cmp	r3, #0
 8004178:	d106      	bne.n	8004188 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2200      	movs	r2, #0
 800417e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f7fd faf0 	bl	8001768 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2202      	movs	r2, #2
 800418c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	3304      	adds	r3, #4
 8004198:	4619      	mov	r1, r3
 800419a:	4610      	mov	r0, r2
 800419c:	f000 f97a 	bl	8004494 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2201      	movs	r2, #1
 80041ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2201      	movs	r2, #1
 80041f4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004200:	2300      	movs	r3, #0
}
 8004202:	4618      	mov	r0, r3
 8004204:	3708      	adds	r7, #8
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
	...

0800420c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800420c:	b480      	push	{r7}
 800420e:	b085      	sub	sp, #20
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800421a:	b2db      	uxtb	r3, r3
 800421c:	2b01      	cmp	r3, #1
 800421e:	d001      	beq.n	8004224 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	e038      	b.n	8004296 <HAL_TIM_Base_Start+0x8a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2202      	movs	r2, #2
 8004228:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a1c      	ldr	r2, [pc, #112]	@ (80042a4 <HAL_TIM_Base_Start+0x98>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d00e      	beq.n	8004254 <HAL_TIM_Base_Start+0x48>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800423e:	d009      	beq.n	8004254 <HAL_TIM_Base_Start+0x48>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a18      	ldr	r2, [pc, #96]	@ (80042a8 <HAL_TIM_Base_Start+0x9c>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d004      	beq.n	8004254 <HAL_TIM_Base_Start+0x48>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a17      	ldr	r2, [pc, #92]	@ (80042ac <HAL_TIM_Base_Start+0xa0>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d115      	bne.n	8004280 <HAL_TIM_Base_Start+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	689a      	ldr	r2, [r3, #8]
 800425a:	4b15      	ldr	r3, [pc, #84]	@ (80042b0 <HAL_TIM_Base_Start+0xa4>)
 800425c:	4013      	ands	r3, r2
 800425e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2b06      	cmp	r3, #6
 8004264:	d015      	beq.n	8004292 <HAL_TIM_Base_Start+0x86>
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800426c:	d011      	beq.n	8004292 <HAL_TIM_Base_Start+0x86>
    {
      __HAL_TIM_ENABLE(htim);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f042 0201 	orr.w	r2, r2, #1
 800427c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800427e:	e008      	b.n	8004292 <HAL_TIM_Base_Start+0x86>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f042 0201 	orr.w	r2, r2, #1
 800428e:	601a      	str	r2, [r3, #0]
 8004290:	e000      	b.n	8004294 <HAL_TIM_Base_Start+0x88>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004292:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	3714      	adds	r7, #20
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr
 80042a2:	bf00      	nop
 80042a4:	40012c00 	.word	0x40012c00
 80042a8:	40000400 	.word	0x40000400
 80042ac:	40014000 	.word	0x40014000
 80042b0:	00010007 	.word	0x00010007

080042b4 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	6a1a      	ldr	r2, [r3, #32]
 80042c2:	f241 1311 	movw	r3, #4369	@ 0x1111
 80042c6:	4013      	ands	r3, r2
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d10f      	bne.n	80042ec <HAL_TIM_Base_Stop+0x38>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	6a1a      	ldr	r2, [r3, #32]
 80042d2:	f240 4344 	movw	r3, #1092	@ 0x444
 80042d6:	4013      	ands	r3, r2
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d107      	bne.n	80042ec <HAL_TIM_Base_Stop+0x38>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f022 0201 	bic.w	r2, r2, #1
 80042ea:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80042f4:	2300      	movs	r3, #0
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	370c      	adds	r7, #12
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr

08004302 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004302:	b580      	push	{r7, lr}
 8004304:	b084      	sub	sp, #16
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
 800430a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800430c:	2300      	movs	r3, #0
 800430e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004316:	2b01      	cmp	r3, #1
 8004318:	d101      	bne.n	800431e <HAL_TIM_ConfigClockSource+0x1c>
 800431a:	2302      	movs	r3, #2
 800431c:	e0b6      	b.n	800448c <HAL_TIM_ConfigClockSource+0x18a>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2201      	movs	r2, #1
 8004322:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2202      	movs	r2, #2
 800432a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800433c:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004340:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004348:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	68ba      	ldr	r2, [r7, #8]
 8004350:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800435a:	d03e      	beq.n	80043da <HAL_TIM_ConfigClockSource+0xd8>
 800435c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004360:	f200 8087 	bhi.w	8004472 <HAL_TIM_ConfigClockSource+0x170>
 8004364:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004368:	f000 8086 	beq.w	8004478 <HAL_TIM_ConfigClockSource+0x176>
 800436c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004370:	d87f      	bhi.n	8004472 <HAL_TIM_ConfigClockSource+0x170>
 8004372:	2b70      	cmp	r3, #112	@ 0x70
 8004374:	d01a      	beq.n	80043ac <HAL_TIM_ConfigClockSource+0xaa>
 8004376:	2b70      	cmp	r3, #112	@ 0x70
 8004378:	d87b      	bhi.n	8004472 <HAL_TIM_ConfigClockSource+0x170>
 800437a:	2b60      	cmp	r3, #96	@ 0x60
 800437c:	d050      	beq.n	8004420 <HAL_TIM_ConfigClockSource+0x11e>
 800437e:	2b60      	cmp	r3, #96	@ 0x60
 8004380:	d877      	bhi.n	8004472 <HAL_TIM_ConfigClockSource+0x170>
 8004382:	2b50      	cmp	r3, #80	@ 0x50
 8004384:	d03c      	beq.n	8004400 <HAL_TIM_ConfigClockSource+0xfe>
 8004386:	2b50      	cmp	r3, #80	@ 0x50
 8004388:	d873      	bhi.n	8004472 <HAL_TIM_ConfigClockSource+0x170>
 800438a:	2b40      	cmp	r3, #64	@ 0x40
 800438c:	d058      	beq.n	8004440 <HAL_TIM_ConfigClockSource+0x13e>
 800438e:	2b40      	cmp	r3, #64	@ 0x40
 8004390:	d86f      	bhi.n	8004472 <HAL_TIM_ConfigClockSource+0x170>
 8004392:	2b30      	cmp	r3, #48	@ 0x30
 8004394:	d064      	beq.n	8004460 <HAL_TIM_ConfigClockSource+0x15e>
 8004396:	2b30      	cmp	r3, #48	@ 0x30
 8004398:	d86b      	bhi.n	8004472 <HAL_TIM_ConfigClockSource+0x170>
 800439a:	2b20      	cmp	r3, #32
 800439c:	d060      	beq.n	8004460 <HAL_TIM_ConfigClockSource+0x15e>
 800439e:	2b20      	cmp	r3, #32
 80043a0:	d867      	bhi.n	8004472 <HAL_TIM_ConfigClockSource+0x170>
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d05c      	beq.n	8004460 <HAL_TIM_ConfigClockSource+0x15e>
 80043a6:	2b10      	cmp	r3, #16
 80043a8:	d05a      	beq.n	8004460 <HAL_TIM_ConfigClockSource+0x15e>
 80043aa:	e062      	b.n	8004472 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80043bc:	f000 f95e 	bl	800467c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80043ce:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	68ba      	ldr	r2, [r7, #8]
 80043d6:	609a      	str	r2, [r3, #8]
      break;
 80043d8:	e04f      	b.n	800447a <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80043ea:	f000 f947 	bl	800467c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	689a      	ldr	r2, [r3, #8]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80043fc:	609a      	str	r2, [r3, #8]
      break;
 80043fe:	e03c      	b.n	800447a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800440c:	461a      	mov	r2, r3
 800440e:	f000 f8bb 	bl	8004588 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	2150      	movs	r1, #80	@ 0x50
 8004418:	4618      	mov	r0, r3
 800441a:	f000 f914 	bl	8004646 <TIM_ITRx_SetConfig>
      break;
 800441e:	e02c      	b.n	800447a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800442c:	461a      	mov	r2, r3
 800442e:	f000 f8da 	bl	80045e6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	2160      	movs	r1, #96	@ 0x60
 8004438:	4618      	mov	r0, r3
 800443a:	f000 f904 	bl	8004646 <TIM_ITRx_SetConfig>
      break;
 800443e:	e01c      	b.n	800447a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800444c:	461a      	mov	r2, r3
 800444e:	f000 f89b 	bl	8004588 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	2140      	movs	r1, #64	@ 0x40
 8004458:	4618      	mov	r0, r3
 800445a:	f000 f8f4 	bl	8004646 <TIM_ITRx_SetConfig>
      break;
 800445e:	e00c      	b.n	800447a <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4619      	mov	r1, r3
 800446a:	4610      	mov	r0, r2
 800446c:	f000 f8eb 	bl	8004646 <TIM_ITRx_SetConfig>
      break;
 8004470:	e003      	b.n	800447a <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	73fb      	strb	r3, [r7, #15]
      break;
 8004476:	e000      	b.n	800447a <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004478:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2201      	movs	r2, #1
 800447e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800448a:	7bfb      	ldrb	r3, [r7, #15]
}
 800448c:	4618      	mov	r0, r3
 800448e:	3710      	adds	r7, #16
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}

08004494 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004494:	b480      	push	{r7}
 8004496:	b085      	sub	sp, #20
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	4a34      	ldr	r2, [pc, #208]	@ (8004578 <TIM_Base_SetConfig+0xe4>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d007      	beq.n	80044bc <TIM_Base_SetConfig+0x28>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044b2:	d003      	beq.n	80044bc <TIM_Base_SetConfig+0x28>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	4a31      	ldr	r2, [pc, #196]	@ (800457c <TIM_Base_SetConfig+0xe8>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d108      	bne.n	80044ce <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	68fa      	ldr	r2, [r7, #12]
 80044ca:	4313      	orrs	r3, r2
 80044cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a29      	ldr	r2, [pc, #164]	@ (8004578 <TIM_Base_SetConfig+0xe4>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d00f      	beq.n	80044f6 <TIM_Base_SetConfig+0x62>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044dc:	d00b      	beq.n	80044f6 <TIM_Base_SetConfig+0x62>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4a26      	ldr	r2, [pc, #152]	@ (800457c <TIM_Base_SetConfig+0xe8>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d007      	beq.n	80044f6 <TIM_Base_SetConfig+0x62>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4a25      	ldr	r2, [pc, #148]	@ (8004580 <TIM_Base_SetConfig+0xec>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d003      	beq.n	80044f6 <TIM_Base_SetConfig+0x62>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4a24      	ldr	r2, [pc, #144]	@ (8004584 <TIM_Base_SetConfig+0xf0>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d108      	bne.n	8004508 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	68fa      	ldr	r2, [r7, #12]
 8004504:	4313      	orrs	r3, r2
 8004506:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	695b      	ldr	r3, [r3, #20]
 8004512:	4313      	orrs	r3, r2
 8004514:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	68fa      	ldr	r2, [r7, #12]
 800451a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	689a      	ldr	r2, [r3, #8]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	4a12      	ldr	r2, [pc, #72]	@ (8004578 <TIM_Base_SetConfig+0xe4>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d007      	beq.n	8004544 <TIM_Base_SetConfig+0xb0>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	4a12      	ldr	r2, [pc, #72]	@ (8004580 <TIM_Base_SetConfig+0xec>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d003      	beq.n	8004544 <TIM_Base_SetConfig+0xb0>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	4a11      	ldr	r2, [pc, #68]	@ (8004584 <TIM_Base_SetConfig+0xf0>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d103      	bne.n	800454c <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	691a      	ldr	r2, [r3, #16]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2201      	movs	r2, #1
 8004550:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	691b      	ldr	r3, [r3, #16]
 8004556:	f003 0301 	and.w	r3, r3, #1
 800455a:	2b01      	cmp	r3, #1
 800455c:	d105      	bne.n	800456a <TIM_Base_SetConfig+0xd6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	691b      	ldr	r3, [r3, #16]
 8004562:	f023 0201 	bic.w	r2, r3, #1
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	611a      	str	r2, [r3, #16]
  }
}
 800456a:	bf00      	nop
 800456c:	3714      	adds	r7, #20
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr
 8004576:	bf00      	nop
 8004578:	40012c00 	.word	0x40012c00
 800457c:	40000400 	.word	0x40000400
 8004580:	40014000 	.word	0x40014000
 8004584:	40014400 	.word	0x40014400

08004588 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004588:	b480      	push	{r7}
 800458a:	b087      	sub	sp, #28
 800458c:	af00      	add	r7, sp, #0
 800458e:	60f8      	str	r0, [r7, #12]
 8004590:	60b9      	str	r1, [r7, #8]
 8004592:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6a1b      	ldr	r3, [r3, #32]
 8004598:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	6a1b      	ldr	r3, [r3, #32]
 800459e:	f023 0201 	bic.w	r2, r3, #1
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	699b      	ldr	r3, [r3, #24]
 80045aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80045b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	011b      	lsls	r3, r3, #4
 80045b8:	693a      	ldr	r2, [r7, #16]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	f023 030a 	bic.w	r3, r3, #10
 80045c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80045c6:	697a      	ldr	r2, [r7, #20]
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	693a      	ldr	r2, [r7, #16]
 80045d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	697a      	ldr	r2, [r7, #20]
 80045d8:	621a      	str	r2, [r3, #32]
}
 80045da:	bf00      	nop
 80045dc:	371c      	adds	r7, #28
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr

080045e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045e6:	b480      	push	{r7}
 80045e8:	b087      	sub	sp, #28
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	60f8      	str	r0, [r7, #12]
 80045ee:	60b9      	str	r1, [r7, #8]
 80045f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6a1b      	ldr	r3, [r3, #32]
 80045f6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6a1b      	ldr	r3, [r3, #32]
 80045fc:	f023 0210 	bic.w	r2, r3, #16
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	699b      	ldr	r3, [r3, #24]
 8004608:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004610:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	031b      	lsls	r3, r3, #12
 8004616:	693a      	ldr	r2, [r7, #16]
 8004618:	4313      	orrs	r3, r2
 800461a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004622:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	011b      	lsls	r3, r3, #4
 8004628:	697a      	ldr	r2, [r7, #20]
 800462a:	4313      	orrs	r3, r2
 800462c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	693a      	ldr	r2, [r7, #16]
 8004632:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	697a      	ldr	r2, [r7, #20]
 8004638:	621a      	str	r2, [r3, #32]
}
 800463a:	bf00      	nop
 800463c:	371c      	adds	r7, #28
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr

08004646 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004646:	b480      	push	{r7}
 8004648:	b085      	sub	sp, #20
 800464a:	af00      	add	r7, sp, #0
 800464c:	6078      	str	r0, [r7, #4]
 800464e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800465c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800465e:	683a      	ldr	r2, [r7, #0]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	4313      	orrs	r3, r2
 8004664:	f043 0307 	orr.w	r3, r3, #7
 8004668:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	68fa      	ldr	r2, [r7, #12]
 800466e:	609a      	str	r2, [r3, #8]
}
 8004670:	bf00      	nop
 8004672:	3714      	adds	r7, #20
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr

0800467c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800467c:	b480      	push	{r7}
 800467e:	b087      	sub	sp, #28
 8004680:	af00      	add	r7, sp, #0
 8004682:	60f8      	str	r0, [r7, #12]
 8004684:	60b9      	str	r1, [r7, #8]
 8004686:	607a      	str	r2, [r7, #4]
 8004688:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004696:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	021a      	lsls	r2, r3, #8
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	431a      	orrs	r2, r3
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	697a      	ldr	r2, [r7, #20]
 80046a6:	4313      	orrs	r3, r2
 80046a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	697a      	ldr	r2, [r7, #20]
 80046ae:	609a      	str	r2, [r3, #8]
}
 80046b0:	bf00      	nop
 80046b2:	371c      	adds	r7, #28
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr

080046bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046bc:	b480      	push	{r7}
 80046be:	b085      	sub	sp, #20
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d101      	bne.n	80046d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046d0:	2302      	movs	r3, #2
 80046d2:	e054      	b.n	800477e <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2202      	movs	r2, #2
 80046e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a24      	ldr	r2, [pc, #144]	@ (800478c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d108      	bne.n	8004710 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004704:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	68fa      	ldr	r2, [r7, #12]
 800470c:	4313      	orrs	r3, r2
 800470e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004716:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	68fa      	ldr	r2, [r7, #12]
 800471e:	4313      	orrs	r3, r2
 8004720:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	68fa      	ldr	r2, [r7, #12]
 8004728:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a17      	ldr	r2, [pc, #92]	@ (800478c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d00e      	beq.n	8004752 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800473c:	d009      	beq.n	8004752 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a13      	ldr	r2, [pc, #76]	@ (8004790 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d004      	beq.n	8004752 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a11      	ldr	r2, [pc, #68]	@ (8004794 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d10c      	bne.n	800476c <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004758:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	68ba      	ldr	r2, [r7, #8]
 8004760:	4313      	orrs	r3, r2
 8004762:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	68ba      	ldr	r2, [r7, #8]
 800476a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800477c:	2300      	movs	r3, #0
}
 800477e:	4618      	mov	r0, r3
 8004780:	3714      	adds	r7, #20
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr
 800478a:	bf00      	nop
 800478c:	40012c00 	.word	0x40012c00
 8004790:	40000400 	.word	0x40000400
 8004794:	40014000 	.word	0x40014000

08004798 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b082      	sub	sp, #8
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d101      	bne.n	80047aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e040      	b.n	800482c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d106      	bne.n	80047c0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2200      	movs	r2, #0
 80047b6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f7fc fff2 	bl	80017a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2224      	movs	r2, #36	@ 0x24
 80047c4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f022 0201 	bic.w	r2, r2, #1
 80047d4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d002      	beq.n	80047e4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f000 fb38 	bl	8004e54 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f000 f8af 	bl	8004948 <UART_SetConfig>
 80047ea:	4603      	mov	r3, r0
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d101      	bne.n	80047f4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	e01b      	b.n	800482c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	685a      	ldr	r2, [r3, #4]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004802:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	689a      	ldr	r2, [r3, #8]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004812:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f042 0201 	orr.w	r2, r2, #1
 8004822:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f000 fbb7 	bl	8004f98 <UART_CheckIdleState>
 800482a:	4603      	mov	r3, r0
}
 800482c:	4618      	mov	r0, r3
 800482e:	3708      	adds	r7, #8
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}

08004834 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b08a      	sub	sp, #40	@ 0x28
 8004838:	af02      	add	r7, sp, #8
 800483a:	60f8      	str	r0, [r7, #12]
 800483c:	60b9      	str	r1, [r7, #8]
 800483e:	603b      	str	r3, [r7, #0]
 8004840:	4613      	mov	r3, r2
 8004842:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004848:	2b20      	cmp	r3, #32
 800484a:	d177      	bne.n	800493c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d002      	beq.n	8004858 <HAL_UART_Transmit+0x24>
 8004852:	88fb      	ldrh	r3, [r7, #6]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d101      	bne.n	800485c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	e070      	b.n	800493e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2200      	movs	r2, #0
 8004860:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2221      	movs	r2, #33	@ 0x21
 8004868:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800486a:	f7fd f999 	bl	8001ba0 <HAL_GetTick>
 800486e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	88fa      	ldrh	r2, [r7, #6]
 8004874:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	88fa      	ldrh	r2, [r7, #6]
 800487c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004888:	d108      	bne.n	800489c <HAL_UART_Transmit+0x68>
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	691b      	ldr	r3, [r3, #16]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d104      	bne.n	800489c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004892:	2300      	movs	r3, #0
 8004894:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	61bb      	str	r3, [r7, #24]
 800489a:	e003      	b.n	80048a4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80048a0:	2300      	movs	r3, #0
 80048a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80048a4:	e02f      	b.n	8004906 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	9300      	str	r3, [sp, #0]
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	2200      	movs	r2, #0
 80048ae:	2180      	movs	r1, #128	@ 0x80
 80048b0:	68f8      	ldr	r0, [r7, #12]
 80048b2:	f000 fc19 	bl	80050e8 <UART_WaitOnFlagUntilTimeout>
 80048b6:	4603      	mov	r3, r0
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d004      	beq.n	80048c6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2220      	movs	r2, #32
 80048c0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80048c2:	2303      	movs	r3, #3
 80048c4:	e03b      	b.n	800493e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80048c6:	69fb      	ldr	r3, [r7, #28]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d10b      	bne.n	80048e4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80048cc:	69bb      	ldr	r3, [r7, #24]
 80048ce:	881a      	ldrh	r2, [r3, #0]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048d8:	b292      	uxth	r2, r2
 80048da:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80048dc:	69bb      	ldr	r3, [r7, #24]
 80048de:	3302      	adds	r3, #2
 80048e0:	61bb      	str	r3, [r7, #24]
 80048e2:	e007      	b.n	80048f4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80048e4:	69fb      	ldr	r3, [r7, #28]
 80048e6:	781a      	ldrb	r2, [r3, #0]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80048ee:	69fb      	ldr	r3, [r7, #28]
 80048f0:	3301      	adds	r3, #1
 80048f2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	3b01      	subs	r3, #1
 80048fe:	b29a      	uxth	r2, r3
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800490c:	b29b      	uxth	r3, r3
 800490e:	2b00      	cmp	r3, #0
 8004910:	d1c9      	bne.n	80048a6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	9300      	str	r3, [sp, #0]
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	2200      	movs	r2, #0
 800491a:	2140      	movs	r1, #64	@ 0x40
 800491c:	68f8      	ldr	r0, [r7, #12]
 800491e:	f000 fbe3 	bl	80050e8 <UART_WaitOnFlagUntilTimeout>
 8004922:	4603      	mov	r3, r0
 8004924:	2b00      	cmp	r3, #0
 8004926:	d004      	beq.n	8004932 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2220      	movs	r2, #32
 800492c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800492e:	2303      	movs	r3, #3
 8004930:	e005      	b.n	800493e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2220      	movs	r2, #32
 8004936:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004938:	2300      	movs	r3, #0
 800493a:	e000      	b.n	800493e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800493c:	2302      	movs	r3, #2
  }
}
 800493e:	4618      	mov	r0, r3
 8004940:	3720      	adds	r7, #32
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
	...

08004948 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004948:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800494c:	b08a      	sub	sp, #40	@ 0x28
 800494e:	af00      	add	r7, sp, #0
 8004950:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004952:	2300      	movs	r3, #0
 8004954:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	689a      	ldr	r2, [r3, #8]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	691b      	ldr	r3, [r3, #16]
 8004960:	431a      	orrs	r2, r3
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	695b      	ldr	r3, [r3, #20]
 8004966:	431a      	orrs	r2, r3
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	69db      	ldr	r3, [r3, #28]
 800496c:	4313      	orrs	r3, r2
 800496e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	4ba5      	ldr	r3, [pc, #660]	@ (8004c0c <UART_SetConfig+0x2c4>)
 8004978:	4013      	ands	r3, r2
 800497a:	68fa      	ldr	r2, [r7, #12]
 800497c:	6812      	ldr	r2, [r2, #0]
 800497e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004980:	430b      	orrs	r3, r1
 8004982:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	68da      	ldr	r2, [r3, #12]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	430a      	orrs	r2, r1
 8004998:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	699b      	ldr	r3, [r3, #24]
 800499e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a9a      	ldr	r2, [pc, #616]	@ (8004c10 <UART_SetConfig+0x2c8>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d004      	beq.n	80049b4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6a1b      	ldr	r3, [r3, #32]
 80049ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049b0:	4313      	orrs	r3, r2
 80049b2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049c4:	430a      	orrs	r2, r1
 80049c6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a91      	ldr	r2, [pc, #580]	@ (8004c14 <UART_SetConfig+0x2cc>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d126      	bne.n	8004a20 <UART_SetConfig+0xd8>
 80049d2:	4b91      	ldr	r3, [pc, #580]	@ (8004c18 <UART_SetConfig+0x2d0>)
 80049d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049d8:	f003 0303 	and.w	r3, r3, #3
 80049dc:	2b03      	cmp	r3, #3
 80049de:	d81b      	bhi.n	8004a18 <UART_SetConfig+0xd0>
 80049e0:	a201      	add	r2, pc, #4	@ (adr r2, 80049e8 <UART_SetConfig+0xa0>)
 80049e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049e6:	bf00      	nop
 80049e8:	080049f9 	.word	0x080049f9
 80049ec:	08004a09 	.word	0x08004a09
 80049f0:	08004a01 	.word	0x08004a01
 80049f4:	08004a11 	.word	0x08004a11
 80049f8:	2301      	movs	r3, #1
 80049fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049fe:	e0d6      	b.n	8004bae <UART_SetConfig+0x266>
 8004a00:	2302      	movs	r3, #2
 8004a02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a06:	e0d2      	b.n	8004bae <UART_SetConfig+0x266>
 8004a08:	2304      	movs	r3, #4
 8004a0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a0e:	e0ce      	b.n	8004bae <UART_SetConfig+0x266>
 8004a10:	2308      	movs	r3, #8
 8004a12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a16:	e0ca      	b.n	8004bae <UART_SetConfig+0x266>
 8004a18:	2310      	movs	r3, #16
 8004a1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a1e:	e0c6      	b.n	8004bae <UART_SetConfig+0x266>
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a7d      	ldr	r2, [pc, #500]	@ (8004c1c <UART_SetConfig+0x2d4>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d138      	bne.n	8004a9c <UART_SetConfig+0x154>
 8004a2a:	4b7b      	ldr	r3, [pc, #492]	@ (8004c18 <UART_SetConfig+0x2d0>)
 8004a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a30:	f003 030c 	and.w	r3, r3, #12
 8004a34:	2b0c      	cmp	r3, #12
 8004a36:	d82d      	bhi.n	8004a94 <UART_SetConfig+0x14c>
 8004a38:	a201      	add	r2, pc, #4	@ (adr r2, 8004a40 <UART_SetConfig+0xf8>)
 8004a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a3e:	bf00      	nop
 8004a40:	08004a75 	.word	0x08004a75
 8004a44:	08004a95 	.word	0x08004a95
 8004a48:	08004a95 	.word	0x08004a95
 8004a4c:	08004a95 	.word	0x08004a95
 8004a50:	08004a85 	.word	0x08004a85
 8004a54:	08004a95 	.word	0x08004a95
 8004a58:	08004a95 	.word	0x08004a95
 8004a5c:	08004a95 	.word	0x08004a95
 8004a60:	08004a7d 	.word	0x08004a7d
 8004a64:	08004a95 	.word	0x08004a95
 8004a68:	08004a95 	.word	0x08004a95
 8004a6c:	08004a95 	.word	0x08004a95
 8004a70:	08004a8d 	.word	0x08004a8d
 8004a74:	2300      	movs	r3, #0
 8004a76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a7a:	e098      	b.n	8004bae <UART_SetConfig+0x266>
 8004a7c:	2302      	movs	r3, #2
 8004a7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a82:	e094      	b.n	8004bae <UART_SetConfig+0x266>
 8004a84:	2304      	movs	r3, #4
 8004a86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a8a:	e090      	b.n	8004bae <UART_SetConfig+0x266>
 8004a8c:	2308      	movs	r3, #8
 8004a8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a92:	e08c      	b.n	8004bae <UART_SetConfig+0x266>
 8004a94:	2310      	movs	r3, #16
 8004a96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a9a:	e088      	b.n	8004bae <UART_SetConfig+0x266>
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a5f      	ldr	r2, [pc, #380]	@ (8004c20 <UART_SetConfig+0x2d8>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d125      	bne.n	8004af2 <UART_SetConfig+0x1aa>
 8004aa6:	4b5c      	ldr	r3, [pc, #368]	@ (8004c18 <UART_SetConfig+0x2d0>)
 8004aa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004aac:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004ab0:	2b30      	cmp	r3, #48	@ 0x30
 8004ab2:	d016      	beq.n	8004ae2 <UART_SetConfig+0x19a>
 8004ab4:	2b30      	cmp	r3, #48	@ 0x30
 8004ab6:	d818      	bhi.n	8004aea <UART_SetConfig+0x1a2>
 8004ab8:	2b20      	cmp	r3, #32
 8004aba:	d00a      	beq.n	8004ad2 <UART_SetConfig+0x18a>
 8004abc:	2b20      	cmp	r3, #32
 8004abe:	d814      	bhi.n	8004aea <UART_SetConfig+0x1a2>
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d002      	beq.n	8004aca <UART_SetConfig+0x182>
 8004ac4:	2b10      	cmp	r3, #16
 8004ac6:	d008      	beq.n	8004ada <UART_SetConfig+0x192>
 8004ac8:	e00f      	b.n	8004aea <UART_SetConfig+0x1a2>
 8004aca:	2300      	movs	r3, #0
 8004acc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ad0:	e06d      	b.n	8004bae <UART_SetConfig+0x266>
 8004ad2:	2302      	movs	r3, #2
 8004ad4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ad8:	e069      	b.n	8004bae <UART_SetConfig+0x266>
 8004ada:	2304      	movs	r3, #4
 8004adc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ae0:	e065      	b.n	8004bae <UART_SetConfig+0x266>
 8004ae2:	2308      	movs	r3, #8
 8004ae4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ae8:	e061      	b.n	8004bae <UART_SetConfig+0x266>
 8004aea:	2310      	movs	r3, #16
 8004aec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004af0:	e05d      	b.n	8004bae <UART_SetConfig+0x266>
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a4b      	ldr	r2, [pc, #300]	@ (8004c24 <UART_SetConfig+0x2dc>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d125      	bne.n	8004b48 <UART_SetConfig+0x200>
 8004afc:	4b46      	ldr	r3, [pc, #280]	@ (8004c18 <UART_SetConfig+0x2d0>)
 8004afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b02:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004b06:	2bc0      	cmp	r3, #192	@ 0xc0
 8004b08:	d016      	beq.n	8004b38 <UART_SetConfig+0x1f0>
 8004b0a:	2bc0      	cmp	r3, #192	@ 0xc0
 8004b0c:	d818      	bhi.n	8004b40 <UART_SetConfig+0x1f8>
 8004b0e:	2b80      	cmp	r3, #128	@ 0x80
 8004b10:	d00a      	beq.n	8004b28 <UART_SetConfig+0x1e0>
 8004b12:	2b80      	cmp	r3, #128	@ 0x80
 8004b14:	d814      	bhi.n	8004b40 <UART_SetConfig+0x1f8>
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d002      	beq.n	8004b20 <UART_SetConfig+0x1d8>
 8004b1a:	2b40      	cmp	r3, #64	@ 0x40
 8004b1c:	d008      	beq.n	8004b30 <UART_SetConfig+0x1e8>
 8004b1e:	e00f      	b.n	8004b40 <UART_SetConfig+0x1f8>
 8004b20:	2300      	movs	r3, #0
 8004b22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b26:	e042      	b.n	8004bae <UART_SetConfig+0x266>
 8004b28:	2302      	movs	r3, #2
 8004b2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b2e:	e03e      	b.n	8004bae <UART_SetConfig+0x266>
 8004b30:	2304      	movs	r3, #4
 8004b32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b36:	e03a      	b.n	8004bae <UART_SetConfig+0x266>
 8004b38:	2308      	movs	r3, #8
 8004b3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b3e:	e036      	b.n	8004bae <UART_SetConfig+0x266>
 8004b40:	2310      	movs	r3, #16
 8004b42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b46:	e032      	b.n	8004bae <UART_SetConfig+0x266>
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a30      	ldr	r2, [pc, #192]	@ (8004c10 <UART_SetConfig+0x2c8>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d12a      	bne.n	8004ba8 <UART_SetConfig+0x260>
 8004b52:	4b31      	ldr	r3, [pc, #196]	@ (8004c18 <UART_SetConfig+0x2d0>)
 8004b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b58:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004b5c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004b60:	d01a      	beq.n	8004b98 <UART_SetConfig+0x250>
 8004b62:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004b66:	d81b      	bhi.n	8004ba0 <UART_SetConfig+0x258>
 8004b68:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b6c:	d00c      	beq.n	8004b88 <UART_SetConfig+0x240>
 8004b6e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b72:	d815      	bhi.n	8004ba0 <UART_SetConfig+0x258>
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d003      	beq.n	8004b80 <UART_SetConfig+0x238>
 8004b78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b7c:	d008      	beq.n	8004b90 <UART_SetConfig+0x248>
 8004b7e:	e00f      	b.n	8004ba0 <UART_SetConfig+0x258>
 8004b80:	2300      	movs	r3, #0
 8004b82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b86:	e012      	b.n	8004bae <UART_SetConfig+0x266>
 8004b88:	2302      	movs	r3, #2
 8004b8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b8e:	e00e      	b.n	8004bae <UART_SetConfig+0x266>
 8004b90:	2304      	movs	r3, #4
 8004b92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b96:	e00a      	b.n	8004bae <UART_SetConfig+0x266>
 8004b98:	2308      	movs	r3, #8
 8004b9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b9e:	e006      	b.n	8004bae <UART_SetConfig+0x266>
 8004ba0:	2310      	movs	r3, #16
 8004ba2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ba6:	e002      	b.n	8004bae <UART_SetConfig+0x266>
 8004ba8:	2310      	movs	r3, #16
 8004baa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a17      	ldr	r2, [pc, #92]	@ (8004c10 <UART_SetConfig+0x2c8>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	f040 808b 	bne.w	8004cd0 <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004bba:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004bbe:	2b08      	cmp	r3, #8
 8004bc0:	d834      	bhi.n	8004c2c <UART_SetConfig+0x2e4>
 8004bc2:	a201      	add	r2, pc, #4	@ (adr r2, 8004bc8 <UART_SetConfig+0x280>)
 8004bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bc8:	08004bed 	.word	0x08004bed
 8004bcc:	08004c2d 	.word	0x08004c2d
 8004bd0:	08004bf5 	.word	0x08004bf5
 8004bd4:	08004c2d 	.word	0x08004c2d
 8004bd8:	08004bfb 	.word	0x08004bfb
 8004bdc:	08004c2d 	.word	0x08004c2d
 8004be0:	08004c2d 	.word	0x08004c2d
 8004be4:	08004c2d 	.word	0x08004c2d
 8004be8:	08004c03 	.word	0x08004c03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bec:	f7fe fecc 	bl	8003988 <HAL_RCC_GetPCLK1Freq>
 8004bf0:	61f8      	str	r0, [r7, #28]
        break;
 8004bf2:	e021      	b.n	8004c38 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bf4:	4b0c      	ldr	r3, [pc, #48]	@ (8004c28 <UART_SetConfig+0x2e0>)
 8004bf6:	61fb      	str	r3, [r7, #28]
        break;
 8004bf8:	e01e      	b.n	8004c38 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bfa:	f7fe fe2d 	bl	8003858 <HAL_RCC_GetSysClockFreq>
 8004bfe:	61f8      	str	r0, [r7, #28]
        break;
 8004c00:	e01a      	b.n	8004c38 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c06:	61fb      	str	r3, [r7, #28]
        break;
 8004c08:	e016      	b.n	8004c38 <UART_SetConfig+0x2f0>
 8004c0a:	bf00      	nop
 8004c0c:	efff69f3 	.word	0xefff69f3
 8004c10:	40008000 	.word	0x40008000
 8004c14:	40013800 	.word	0x40013800
 8004c18:	40021000 	.word	0x40021000
 8004c1c:	40004400 	.word	0x40004400
 8004c20:	40004800 	.word	0x40004800
 8004c24:	40004c00 	.word	0x40004c00
 8004c28:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004c36:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004c38:	69fb      	ldr	r3, [r7, #28]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	f000 80fa 	beq.w	8004e34 <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	685a      	ldr	r2, [r3, #4]
 8004c44:	4613      	mov	r3, r2
 8004c46:	005b      	lsls	r3, r3, #1
 8004c48:	4413      	add	r3, r2
 8004c4a:	69fa      	ldr	r2, [r7, #28]
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d305      	bcc.n	8004c5c <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004c56:	69fa      	ldr	r2, [r7, #28]
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d903      	bls.n	8004c64 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004c62:	e0e7      	b.n	8004e34 <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004c64:	69fb      	ldr	r3, [r7, #28]
 8004c66:	2200      	movs	r2, #0
 8004c68:	461c      	mov	r4, r3
 8004c6a:	4615      	mov	r5, r2
 8004c6c:	f04f 0200 	mov.w	r2, #0
 8004c70:	f04f 0300 	mov.w	r3, #0
 8004c74:	022b      	lsls	r3, r5, #8
 8004c76:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004c7a:	0222      	lsls	r2, r4, #8
 8004c7c:	68f9      	ldr	r1, [r7, #12]
 8004c7e:	6849      	ldr	r1, [r1, #4]
 8004c80:	0849      	lsrs	r1, r1, #1
 8004c82:	2000      	movs	r0, #0
 8004c84:	4688      	mov	r8, r1
 8004c86:	4681      	mov	r9, r0
 8004c88:	eb12 0a08 	adds.w	sl, r2, r8
 8004c8c:	eb43 0b09 	adc.w	fp, r3, r9
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	603b      	str	r3, [r7, #0]
 8004c98:	607a      	str	r2, [r7, #4]
 8004c9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c9e:	4650      	mov	r0, sl
 8004ca0:	4659      	mov	r1, fp
 8004ca2:	f7fb ff89 	bl	8000bb8 <__aeabi_uldivmod>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	460b      	mov	r3, r1
 8004caa:	4613      	mov	r3, r2
 8004cac:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004cae:	69bb      	ldr	r3, [r7, #24]
 8004cb0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004cb4:	d308      	bcc.n	8004cc8 <UART_SetConfig+0x380>
 8004cb6:	69bb      	ldr	r3, [r7, #24]
 8004cb8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004cbc:	d204      	bcs.n	8004cc8 <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	69ba      	ldr	r2, [r7, #24]
 8004cc4:	60da      	str	r2, [r3, #12]
 8004cc6:	e0b5      	b.n	8004e34 <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004cce:	e0b1      	b.n	8004e34 <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	69db      	ldr	r3, [r3, #28]
 8004cd4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004cd8:	d15d      	bne.n	8004d96 <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 8004cda:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004cde:	2b08      	cmp	r3, #8
 8004ce0:	d827      	bhi.n	8004d32 <UART_SetConfig+0x3ea>
 8004ce2:	a201      	add	r2, pc, #4	@ (adr r2, 8004ce8 <UART_SetConfig+0x3a0>)
 8004ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ce8:	08004d0d 	.word	0x08004d0d
 8004cec:	08004d15 	.word	0x08004d15
 8004cf0:	08004d1d 	.word	0x08004d1d
 8004cf4:	08004d33 	.word	0x08004d33
 8004cf8:	08004d23 	.word	0x08004d23
 8004cfc:	08004d33 	.word	0x08004d33
 8004d00:	08004d33 	.word	0x08004d33
 8004d04:	08004d33 	.word	0x08004d33
 8004d08:	08004d2b 	.word	0x08004d2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d0c:	f7fe fe3c 	bl	8003988 <HAL_RCC_GetPCLK1Freq>
 8004d10:	61f8      	str	r0, [r7, #28]
        break;
 8004d12:	e014      	b.n	8004d3e <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d14:	f7fe fe4e 	bl	80039b4 <HAL_RCC_GetPCLK2Freq>
 8004d18:	61f8      	str	r0, [r7, #28]
        break;
 8004d1a:	e010      	b.n	8004d3e <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d1c:	4b4c      	ldr	r3, [pc, #304]	@ (8004e50 <UART_SetConfig+0x508>)
 8004d1e:	61fb      	str	r3, [r7, #28]
        break;
 8004d20:	e00d      	b.n	8004d3e <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d22:	f7fe fd99 	bl	8003858 <HAL_RCC_GetSysClockFreq>
 8004d26:	61f8      	str	r0, [r7, #28]
        break;
 8004d28:	e009      	b.n	8004d3e <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d2e:	61fb      	str	r3, [r7, #28]
        break;
 8004d30:	e005      	b.n	8004d3e <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 8004d32:	2300      	movs	r3, #0
 8004d34:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004d3c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d3e:	69fb      	ldr	r3, [r7, #28]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d077      	beq.n	8004e34 <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004d44:	69fb      	ldr	r3, [r7, #28]
 8004d46:	005a      	lsls	r2, r3, #1
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	085b      	lsrs	r3, r3, #1
 8004d4e:	441a      	add	r2, r3
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d58:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d5a:	69bb      	ldr	r3, [r7, #24]
 8004d5c:	2b0f      	cmp	r3, #15
 8004d5e:	d916      	bls.n	8004d8e <UART_SetConfig+0x446>
 8004d60:	69bb      	ldr	r3, [r7, #24]
 8004d62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d66:	d212      	bcs.n	8004d8e <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d68:	69bb      	ldr	r3, [r7, #24]
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	f023 030f 	bic.w	r3, r3, #15
 8004d70:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d72:	69bb      	ldr	r3, [r7, #24]
 8004d74:	085b      	lsrs	r3, r3, #1
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	f003 0307 	and.w	r3, r3, #7
 8004d7c:	b29a      	uxth	r2, r3
 8004d7e:	8afb      	ldrh	r3, [r7, #22]
 8004d80:	4313      	orrs	r3, r2
 8004d82:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	8afa      	ldrh	r2, [r7, #22]
 8004d8a:	60da      	str	r2, [r3, #12]
 8004d8c:	e052      	b.n	8004e34 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004d94:	e04e      	b.n	8004e34 <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004d96:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004d9a:	2b08      	cmp	r3, #8
 8004d9c:	d827      	bhi.n	8004dee <UART_SetConfig+0x4a6>
 8004d9e:	a201      	add	r2, pc, #4	@ (adr r2, 8004da4 <UART_SetConfig+0x45c>)
 8004da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004da4:	08004dc9 	.word	0x08004dc9
 8004da8:	08004dd1 	.word	0x08004dd1
 8004dac:	08004dd9 	.word	0x08004dd9
 8004db0:	08004def 	.word	0x08004def
 8004db4:	08004ddf 	.word	0x08004ddf
 8004db8:	08004def 	.word	0x08004def
 8004dbc:	08004def 	.word	0x08004def
 8004dc0:	08004def 	.word	0x08004def
 8004dc4:	08004de7 	.word	0x08004de7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004dc8:	f7fe fdde 	bl	8003988 <HAL_RCC_GetPCLK1Freq>
 8004dcc:	61f8      	str	r0, [r7, #28]
        break;
 8004dce:	e014      	b.n	8004dfa <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004dd0:	f7fe fdf0 	bl	80039b4 <HAL_RCC_GetPCLK2Freq>
 8004dd4:	61f8      	str	r0, [r7, #28]
        break;
 8004dd6:	e010      	b.n	8004dfa <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004dd8:	4b1d      	ldr	r3, [pc, #116]	@ (8004e50 <UART_SetConfig+0x508>)
 8004dda:	61fb      	str	r3, [r7, #28]
        break;
 8004ddc:	e00d      	b.n	8004dfa <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004dde:	f7fe fd3b 	bl	8003858 <HAL_RCC_GetSysClockFreq>
 8004de2:	61f8      	str	r0, [r7, #28]
        break;
 8004de4:	e009      	b.n	8004dfa <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004de6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004dea:	61fb      	str	r3, [r7, #28]
        break;
 8004dec:	e005      	b.n	8004dfa <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 8004dee:	2300      	movs	r3, #0
 8004df0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004df8:	bf00      	nop
    }

    if (pclk != 0U)
 8004dfa:	69fb      	ldr	r3, [r7, #28]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d019      	beq.n	8004e34 <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	085a      	lsrs	r2, r3, #1
 8004e06:	69fb      	ldr	r3, [r7, #28]
 8004e08:	441a      	add	r2, r3
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e12:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e14:	69bb      	ldr	r3, [r7, #24]
 8004e16:	2b0f      	cmp	r3, #15
 8004e18:	d909      	bls.n	8004e2e <UART_SetConfig+0x4e6>
 8004e1a:	69bb      	ldr	r3, [r7, #24]
 8004e1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e20:	d205      	bcs.n	8004e2e <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004e22:	69bb      	ldr	r3, [r7, #24]
 8004e24:	b29a      	uxth	r2, r3
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	60da      	str	r2, [r3, #12]
 8004e2c:	e002      	b.n	8004e34 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2200      	movs	r2, #0
 8004e38:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004e40:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3728      	adds	r7, #40	@ 0x28
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e4e:	bf00      	nop
 8004e50:	00f42400 	.word	0x00f42400

08004e54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b083      	sub	sp, #12
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e60:	f003 0308 	and.w	r3, r3, #8
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d00a      	beq.n	8004e7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	430a      	orrs	r2, r1
 8004e7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e82:	f003 0301 	and.w	r3, r3, #1
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d00a      	beq.n	8004ea0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	430a      	orrs	r2, r1
 8004e9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ea4:	f003 0302 	and.w	r3, r3, #2
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d00a      	beq.n	8004ec2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	430a      	orrs	r2, r1
 8004ec0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ec6:	f003 0304 	and.w	r3, r3, #4
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d00a      	beq.n	8004ee4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	430a      	orrs	r2, r1
 8004ee2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ee8:	f003 0310 	and.w	r3, r3, #16
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d00a      	beq.n	8004f06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	430a      	orrs	r2, r1
 8004f04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f0a:	f003 0320 	and.w	r3, r3, #32
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d00a      	beq.n	8004f28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	430a      	orrs	r2, r1
 8004f26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d01a      	beq.n	8004f6a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	430a      	orrs	r2, r1
 8004f48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f4e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f52:	d10a      	bne.n	8004f6a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	430a      	orrs	r2, r1
 8004f68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d00a      	beq.n	8004f8c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	430a      	orrs	r2, r1
 8004f8a:	605a      	str	r2, [r3, #4]
  }
}
 8004f8c:	bf00      	nop
 8004f8e:	370c      	adds	r7, #12
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr

08004f98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b098      	sub	sp, #96	@ 0x60
 8004f9c:	af02      	add	r7, sp, #8
 8004f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004fa8:	f7fc fdfa 	bl	8001ba0 <HAL_GetTick>
 8004fac:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 0308 	and.w	r3, r3, #8
 8004fb8:	2b08      	cmp	r3, #8
 8004fba:	d12e      	bne.n	800501a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004fbc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004fc0:	9300      	str	r3, [sp, #0]
 8004fc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f000 f88c 	bl	80050e8 <UART_WaitOnFlagUntilTimeout>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d021      	beq.n	800501a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fde:	e853 3f00 	ldrex	r3, [r3]
 8004fe2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004fe4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fe6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004fea:	653b      	str	r3, [r7, #80]	@ 0x50
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ff4:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ff6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004ffa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004ffc:	e841 2300 	strex	r3, r2, [r1]
 8005000:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005002:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005004:	2b00      	cmp	r3, #0
 8005006:	d1e6      	bne.n	8004fd6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2220      	movs	r2, #32
 800500c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2200      	movs	r2, #0
 8005012:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005016:	2303      	movs	r3, #3
 8005018:	e062      	b.n	80050e0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 0304 	and.w	r3, r3, #4
 8005024:	2b04      	cmp	r3, #4
 8005026:	d149      	bne.n	80050bc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005028:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800502c:	9300      	str	r3, [sp, #0]
 800502e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005030:	2200      	movs	r2, #0
 8005032:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f000 f856 	bl	80050e8 <UART_WaitOnFlagUntilTimeout>
 800503c:	4603      	mov	r3, r0
 800503e:	2b00      	cmp	r3, #0
 8005040:	d03c      	beq.n	80050bc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800504a:	e853 3f00 	ldrex	r3, [r3]
 800504e:	623b      	str	r3, [r7, #32]
   return(result);
 8005050:	6a3b      	ldr	r3, [r7, #32]
 8005052:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005056:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	461a      	mov	r2, r3
 800505e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005060:	633b      	str	r3, [r7, #48]	@ 0x30
 8005062:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005064:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005066:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005068:	e841 2300 	strex	r3, r2, [r1]
 800506c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800506e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005070:	2b00      	cmp	r3, #0
 8005072:	d1e6      	bne.n	8005042 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	3308      	adds	r3, #8
 800507a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	e853 3f00 	ldrex	r3, [r3]
 8005082:	60fb      	str	r3, [r7, #12]
   return(result);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f023 0301 	bic.w	r3, r3, #1
 800508a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	3308      	adds	r3, #8
 8005092:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005094:	61fa      	str	r2, [r7, #28]
 8005096:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005098:	69b9      	ldr	r1, [r7, #24]
 800509a:	69fa      	ldr	r2, [r7, #28]
 800509c:	e841 2300 	strex	r3, r2, [r1]
 80050a0:	617b      	str	r3, [r7, #20]
   return(result);
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d1e5      	bne.n	8005074 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2220      	movs	r2, #32
 80050ac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2200      	movs	r2, #0
 80050b4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050b8:	2303      	movs	r3, #3
 80050ba:	e011      	b.n	80050e0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2220      	movs	r2, #32
 80050c0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2220      	movs	r2, #32
 80050c6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2200      	movs	r2, #0
 80050ce:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80050de:	2300      	movs	r3, #0
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3758      	adds	r7, #88	@ 0x58
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}

080050e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b084      	sub	sp, #16
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	60f8      	str	r0, [r7, #12]
 80050f0:	60b9      	str	r1, [r7, #8]
 80050f2:	603b      	str	r3, [r7, #0]
 80050f4:	4613      	mov	r3, r2
 80050f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050f8:	e04f      	b.n	800519a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050fa:	69bb      	ldr	r3, [r7, #24]
 80050fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005100:	d04b      	beq.n	800519a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005102:	f7fc fd4d 	bl	8001ba0 <HAL_GetTick>
 8005106:	4602      	mov	r2, r0
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	1ad3      	subs	r3, r2, r3
 800510c:	69ba      	ldr	r2, [r7, #24]
 800510e:	429a      	cmp	r2, r3
 8005110:	d302      	bcc.n	8005118 <UART_WaitOnFlagUntilTimeout+0x30>
 8005112:	69bb      	ldr	r3, [r7, #24]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d101      	bne.n	800511c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005118:	2303      	movs	r3, #3
 800511a:	e04e      	b.n	80051ba <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 0304 	and.w	r3, r3, #4
 8005126:	2b00      	cmp	r3, #0
 8005128:	d037      	beq.n	800519a <UART_WaitOnFlagUntilTimeout+0xb2>
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	2b80      	cmp	r3, #128	@ 0x80
 800512e:	d034      	beq.n	800519a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	2b40      	cmp	r3, #64	@ 0x40
 8005134:	d031      	beq.n	800519a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	69db      	ldr	r3, [r3, #28]
 800513c:	f003 0308 	and.w	r3, r3, #8
 8005140:	2b08      	cmp	r3, #8
 8005142:	d110      	bne.n	8005166 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	2208      	movs	r2, #8
 800514a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800514c:	68f8      	ldr	r0, [r7, #12]
 800514e:	f000 f838 	bl	80051c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2208      	movs	r2, #8
 8005156:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2200      	movs	r2, #0
 800515e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	e029      	b.n	80051ba <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	69db      	ldr	r3, [r3, #28]
 800516c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005170:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005174:	d111      	bne.n	800519a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800517e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005180:	68f8      	ldr	r0, [r7, #12]
 8005182:	f000 f81e 	bl	80051c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2220      	movs	r2, #32
 800518a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2200      	movs	r2, #0
 8005192:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005196:	2303      	movs	r3, #3
 8005198:	e00f      	b.n	80051ba <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	69da      	ldr	r2, [r3, #28]
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	4013      	ands	r3, r2
 80051a4:	68ba      	ldr	r2, [r7, #8]
 80051a6:	429a      	cmp	r2, r3
 80051a8:	bf0c      	ite	eq
 80051aa:	2301      	moveq	r3, #1
 80051ac:	2300      	movne	r3, #0
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	461a      	mov	r2, r3
 80051b2:	79fb      	ldrb	r3, [r7, #7]
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d0a0      	beq.n	80050fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051b8:	2300      	movs	r3, #0
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3710      	adds	r7, #16
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}

080051c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80051c2:	b480      	push	{r7}
 80051c4:	b095      	sub	sp, #84	@ 0x54
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051d2:	e853 3f00 	ldrex	r3, [r3]
 80051d6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80051d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051da:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80051de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	461a      	mov	r2, r3
 80051e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80051e8:	643b      	str	r3, [r7, #64]	@ 0x40
 80051ea:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80051ee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80051f0:	e841 2300 	strex	r3, r2, [r1]
 80051f4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80051f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d1e6      	bne.n	80051ca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	3308      	adds	r3, #8
 8005202:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005204:	6a3b      	ldr	r3, [r7, #32]
 8005206:	e853 3f00 	ldrex	r3, [r3]
 800520a:	61fb      	str	r3, [r7, #28]
   return(result);
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	f023 0301 	bic.w	r3, r3, #1
 8005212:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	3308      	adds	r3, #8
 800521a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800521c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800521e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005220:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005222:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005224:	e841 2300 	strex	r3, r2, [r1]
 8005228:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800522a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800522c:	2b00      	cmp	r3, #0
 800522e:	d1e5      	bne.n	80051fc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005234:	2b01      	cmp	r3, #1
 8005236:	d118      	bne.n	800526a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	e853 3f00 	ldrex	r3, [r3]
 8005244:	60bb      	str	r3, [r7, #8]
   return(result);
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	f023 0310 	bic.w	r3, r3, #16
 800524c:	647b      	str	r3, [r7, #68]	@ 0x44
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	461a      	mov	r2, r3
 8005254:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005256:	61bb      	str	r3, [r7, #24]
 8005258:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800525a:	6979      	ldr	r1, [r7, #20]
 800525c:	69ba      	ldr	r2, [r7, #24]
 800525e:	e841 2300 	strex	r3, r2, [r1]
 8005262:	613b      	str	r3, [r7, #16]
   return(result);
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d1e6      	bne.n	8005238 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2220      	movs	r2, #32
 800526e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2200      	movs	r2, #0
 800527c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800527e:	bf00      	nop
 8005280:	3754      	adds	r7, #84	@ 0x54
 8005282:	46bd      	mov	sp, r7
 8005284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005288:	4770      	bx	lr

0800528a <__cvt>:
 800528a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800528e:	ec57 6b10 	vmov	r6, r7, d0
 8005292:	2f00      	cmp	r7, #0
 8005294:	460c      	mov	r4, r1
 8005296:	4619      	mov	r1, r3
 8005298:	463b      	mov	r3, r7
 800529a:	bfbb      	ittet	lt
 800529c:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80052a0:	461f      	movlt	r7, r3
 80052a2:	2300      	movge	r3, #0
 80052a4:	232d      	movlt	r3, #45	@ 0x2d
 80052a6:	700b      	strb	r3, [r1, #0]
 80052a8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80052aa:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80052ae:	4691      	mov	r9, r2
 80052b0:	f023 0820 	bic.w	r8, r3, #32
 80052b4:	bfbc      	itt	lt
 80052b6:	4632      	movlt	r2, r6
 80052b8:	4616      	movlt	r6, r2
 80052ba:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80052be:	d005      	beq.n	80052cc <__cvt+0x42>
 80052c0:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80052c4:	d100      	bne.n	80052c8 <__cvt+0x3e>
 80052c6:	3401      	adds	r4, #1
 80052c8:	2102      	movs	r1, #2
 80052ca:	e000      	b.n	80052ce <__cvt+0x44>
 80052cc:	2103      	movs	r1, #3
 80052ce:	ab03      	add	r3, sp, #12
 80052d0:	9301      	str	r3, [sp, #4]
 80052d2:	ab02      	add	r3, sp, #8
 80052d4:	9300      	str	r3, [sp, #0]
 80052d6:	ec47 6b10 	vmov	d0, r6, r7
 80052da:	4653      	mov	r3, sl
 80052dc:	4622      	mov	r2, r4
 80052de:	f000 fe5b 	bl	8005f98 <_dtoa_r>
 80052e2:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80052e6:	4605      	mov	r5, r0
 80052e8:	d119      	bne.n	800531e <__cvt+0x94>
 80052ea:	f019 0f01 	tst.w	r9, #1
 80052ee:	d00e      	beq.n	800530e <__cvt+0x84>
 80052f0:	eb00 0904 	add.w	r9, r0, r4
 80052f4:	2200      	movs	r2, #0
 80052f6:	2300      	movs	r3, #0
 80052f8:	4630      	mov	r0, r6
 80052fa:	4639      	mov	r1, r7
 80052fc:	f7fb fbec 	bl	8000ad8 <__aeabi_dcmpeq>
 8005300:	b108      	cbz	r0, 8005306 <__cvt+0x7c>
 8005302:	f8cd 900c 	str.w	r9, [sp, #12]
 8005306:	2230      	movs	r2, #48	@ 0x30
 8005308:	9b03      	ldr	r3, [sp, #12]
 800530a:	454b      	cmp	r3, r9
 800530c:	d31e      	bcc.n	800534c <__cvt+0xc2>
 800530e:	9b03      	ldr	r3, [sp, #12]
 8005310:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005312:	1b5b      	subs	r3, r3, r5
 8005314:	4628      	mov	r0, r5
 8005316:	6013      	str	r3, [r2, #0]
 8005318:	b004      	add	sp, #16
 800531a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800531e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005322:	eb00 0904 	add.w	r9, r0, r4
 8005326:	d1e5      	bne.n	80052f4 <__cvt+0x6a>
 8005328:	7803      	ldrb	r3, [r0, #0]
 800532a:	2b30      	cmp	r3, #48	@ 0x30
 800532c:	d10a      	bne.n	8005344 <__cvt+0xba>
 800532e:	2200      	movs	r2, #0
 8005330:	2300      	movs	r3, #0
 8005332:	4630      	mov	r0, r6
 8005334:	4639      	mov	r1, r7
 8005336:	f7fb fbcf 	bl	8000ad8 <__aeabi_dcmpeq>
 800533a:	b918      	cbnz	r0, 8005344 <__cvt+0xba>
 800533c:	f1c4 0401 	rsb	r4, r4, #1
 8005340:	f8ca 4000 	str.w	r4, [sl]
 8005344:	f8da 3000 	ldr.w	r3, [sl]
 8005348:	4499      	add	r9, r3
 800534a:	e7d3      	b.n	80052f4 <__cvt+0x6a>
 800534c:	1c59      	adds	r1, r3, #1
 800534e:	9103      	str	r1, [sp, #12]
 8005350:	701a      	strb	r2, [r3, #0]
 8005352:	e7d9      	b.n	8005308 <__cvt+0x7e>

08005354 <__exponent>:
 8005354:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005356:	2900      	cmp	r1, #0
 8005358:	bfba      	itte	lt
 800535a:	4249      	neglt	r1, r1
 800535c:	232d      	movlt	r3, #45	@ 0x2d
 800535e:	232b      	movge	r3, #43	@ 0x2b
 8005360:	2909      	cmp	r1, #9
 8005362:	7002      	strb	r2, [r0, #0]
 8005364:	7043      	strb	r3, [r0, #1]
 8005366:	dd29      	ble.n	80053bc <__exponent+0x68>
 8005368:	f10d 0307 	add.w	r3, sp, #7
 800536c:	461d      	mov	r5, r3
 800536e:	270a      	movs	r7, #10
 8005370:	461a      	mov	r2, r3
 8005372:	fbb1 f6f7 	udiv	r6, r1, r7
 8005376:	fb07 1416 	mls	r4, r7, r6, r1
 800537a:	3430      	adds	r4, #48	@ 0x30
 800537c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005380:	460c      	mov	r4, r1
 8005382:	2c63      	cmp	r4, #99	@ 0x63
 8005384:	f103 33ff 	add.w	r3, r3, #4294967295
 8005388:	4631      	mov	r1, r6
 800538a:	dcf1      	bgt.n	8005370 <__exponent+0x1c>
 800538c:	3130      	adds	r1, #48	@ 0x30
 800538e:	1e94      	subs	r4, r2, #2
 8005390:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005394:	1c41      	adds	r1, r0, #1
 8005396:	4623      	mov	r3, r4
 8005398:	42ab      	cmp	r3, r5
 800539a:	d30a      	bcc.n	80053b2 <__exponent+0x5e>
 800539c:	f10d 0309 	add.w	r3, sp, #9
 80053a0:	1a9b      	subs	r3, r3, r2
 80053a2:	42ac      	cmp	r4, r5
 80053a4:	bf88      	it	hi
 80053a6:	2300      	movhi	r3, #0
 80053a8:	3302      	adds	r3, #2
 80053aa:	4403      	add	r3, r0
 80053ac:	1a18      	subs	r0, r3, r0
 80053ae:	b003      	add	sp, #12
 80053b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053b2:	f813 6b01 	ldrb.w	r6, [r3], #1
 80053b6:	f801 6f01 	strb.w	r6, [r1, #1]!
 80053ba:	e7ed      	b.n	8005398 <__exponent+0x44>
 80053bc:	2330      	movs	r3, #48	@ 0x30
 80053be:	3130      	adds	r1, #48	@ 0x30
 80053c0:	7083      	strb	r3, [r0, #2]
 80053c2:	70c1      	strb	r1, [r0, #3]
 80053c4:	1d03      	adds	r3, r0, #4
 80053c6:	e7f1      	b.n	80053ac <__exponent+0x58>

080053c8 <_printf_float>:
 80053c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053cc:	b08d      	sub	sp, #52	@ 0x34
 80053ce:	460c      	mov	r4, r1
 80053d0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80053d4:	4616      	mov	r6, r2
 80053d6:	461f      	mov	r7, r3
 80053d8:	4605      	mov	r5, r0
 80053da:	f000 fcdb 	bl	8005d94 <_localeconv_r>
 80053de:	6803      	ldr	r3, [r0, #0]
 80053e0:	9304      	str	r3, [sp, #16]
 80053e2:	4618      	mov	r0, r3
 80053e4:	f7fa ff4c 	bl	8000280 <strlen>
 80053e8:	2300      	movs	r3, #0
 80053ea:	930a      	str	r3, [sp, #40]	@ 0x28
 80053ec:	f8d8 3000 	ldr.w	r3, [r8]
 80053f0:	9005      	str	r0, [sp, #20]
 80053f2:	3307      	adds	r3, #7
 80053f4:	f023 0307 	bic.w	r3, r3, #7
 80053f8:	f103 0208 	add.w	r2, r3, #8
 80053fc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005400:	f8d4 b000 	ldr.w	fp, [r4]
 8005404:	f8c8 2000 	str.w	r2, [r8]
 8005408:	e9d3 8900 	ldrd	r8, r9, [r3]
 800540c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005410:	9307      	str	r3, [sp, #28]
 8005412:	f8cd 8018 	str.w	r8, [sp, #24]
 8005416:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800541a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800541e:	4b9c      	ldr	r3, [pc, #624]	@ (8005690 <_printf_float+0x2c8>)
 8005420:	f04f 32ff 	mov.w	r2, #4294967295
 8005424:	f7fb fb8a 	bl	8000b3c <__aeabi_dcmpun>
 8005428:	bb70      	cbnz	r0, 8005488 <_printf_float+0xc0>
 800542a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800542e:	4b98      	ldr	r3, [pc, #608]	@ (8005690 <_printf_float+0x2c8>)
 8005430:	f04f 32ff 	mov.w	r2, #4294967295
 8005434:	f7fb fb64 	bl	8000b00 <__aeabi_dcmple>
 8005438:	bb30      	cbnz	r0, 8005488 <_printf_float+0xc0>
 800543a:	2200      	movs	r2, #0
 800543c:	2300      	movs	r3, #0
 800543e:	4640      	mov	r0, r8
 8005440:	4649      	mov	r1, r9
 8005442:	f7fb fb53 	bl	8000aec <__aeabi_dcmplt>
 8005446:	b110      	cbz	r0, 800544e <_printf_float+0x86>
 8005448:	232d      	movs	r3, #45	@ 0x2d
 800544a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800544e:	4a91      	ldr	r2, [pc, #580]	@ (8005694 <_printf_float+0x2cc>)
 8005450:	4b91      	ldr	r3, [pc, #580]	@ (8005698 <_printf_float+0x2d0>)
 8005452:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005456:	bf94      	ite	ls
 8005458:	4690      	movls	r8, r2
 800545a:	4698      	movhi	r8, r3
 800545c:	2303      	movs	r3, #3
 800545e:	6123      	str	r3, [r4, #16]
 8005460:	f02b 0304 	bic.w	r3, fp, #4
 8005464:	6023      	str	r3, [r4, #0]
 8005466:	f04f 0900 	mov.w	r9, #0
 800546a:	9700      	str	r7, [sp, #0]
 800546c:	4633      	mov	r3, r6
 800546e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005470:	4621      	mov	r1, r4
 8005472:	4628      	mov	r0, r5
 8005474:	f000 f9d2 	bl	800581c <_printf_common>
 8005478:	3001      	adds	r0, #1
 800547a:	f040 808d 	bne.w	8005598 <_printf_float+0x1d0>
 800547e:	f04f 30ff 	mov.w	r0, #4294967295
 8005482:	b00d      	add	sp, #52	@ 0x34
 8005484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005488:	4642      	mov	r2, r8
 800548a:	464b      	mov	r3, r9
 800548c:	4640      	mov	r0, r8
 800548e:	4649      	mov	r1, r9
 8005490:	f7fb fb54 	bl	8000b3c <__aeabi_dcmpun>
 8005494:	b140      	cbz	r0, 80054a8 <_printf_float+0xe0>
 8005496:	464b      	mov	r3, r9
 8005498:	2b00      	cmp	r3, #0
 800549a:	bfbc      	itt	lt
 800549c:	232d      	movlt	r3, #45	@ 0x2d
 800549e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80054a2:	4a7e      	ldr	r2, [pc, #504]	@ (800569c <_printf_float+0x2d4>)
 80054a4:	4b7e      	ldr	r3, [pc, #504]	@ (80056a0 <_printf_float+0x2d8>)
 80054a6:	e7d4      	b.n	8005452 <_printf_float+0x8a>
 80054a8:	6863      	ldr	r3, [r4, #4]
 80054aa:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80054ae:	9206      	str	r2, [sp, #24]
 80054b0:	1c5a      	adds	r2, r3, #1
 80054b2:	d13b      	bne.n	800552c <_printf_float+0x164>
 80054b4:	2306      	movs	r3, #6
 80054b6:	6063      	str	r3, [r4, #4]
 80054b8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80054bc:	2300      	movs	r3, #0
 80054be:	6022      	str	r2, [r4, #0]
 80054c0:	9303      	str	r3, [sp, #12]
 80054c2:	ab0a      	add	r3, sp, #40	@ 0x28
 80054c4:	e9cd a301 	strd	sl, r3, [sp, #4]
 80054c8:	ab09      	add	r3, sp, #36	@ 0x24
 80054ca:	9300      	str	r3, [sp, #0]
 80054cc:	6861      	ldr	r1, [r4, #4]
 80054ce:	ec49 8b10 	vmov	d0, r8, r9
 80054d2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80054d6:	4628      	mov	r0, r5
 80054d8:	f7ff fed7 	bl	800528a <__cvt>
 80054dc:	9b06      	ldr	r3, [sp, #24]
 80054de:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80054e0:	2b47      	cmp	r3, #71	@ 0x47
 80054e2:	4680      	mov	r8, r0
 80054e4:	d129      	bne.n	800553a <_printf_float+0x172>
 80054e6:	1cc8      	adds	r0, r1, #3
 80054e8:	db02      	blt.n	80054f0 <_printf_float+0x128>
 80054ea:	6863      	ldr	r3, [r4, #4]
 80054ec:	4299      	cmp	r1, r3
 80054ee:	dd41      	ble.n	8005574 <_printf_float+0x1ac>
 80054f0:	f1aa 0a02 	sub.w	sl, sl, #2
 80054f4:	fa5f fa8a 	uxtb.w	sl, sl
 80054f8:	3901      	subs	r1, #1
 80054fa:	4652      	mov	r2, sl
 80054fc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005500:	9109      	str	r1, [sp, #36]	@ 0x24
 8005502:	f7ff ff27 	bl	8005354 <__exponent>
 8005506:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005508:	1813      	adds	r3, r2, r0
 800550a:	2a01      	cmp	r2, #1
 800550c:	4681      	mov	r9, r0
 800550e:	6123      	str	r3, [r4, #16]
 8005510:	dc02      	bgt.n	8005518 <_printf_float+0x150>
 8005512:	6822      	ldr	r2, [r4, #0]
 8005514:	07d2      	lsls	r2, r2, #31
 8005516:	d501      	bpl.n	800551c <_printf_float+0x154>
 8005518:	3301      	adds	r3, #1
 800551a:	6123      	str	r3, [r4, #16]
 800551c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005520:	2b00      	cmp	r3, #0
 8005522:	d0a2      	beq.n	800546a <_printf_float+0xa2>
 8005524:	232d      	movs	r3, #45	@ 0x2d
 8005526:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800552a:	e79e      	b.n	800546a <_printf_float+0xa2>
 800552c:	9a06      	ldr	r2, [sp, #24]
 800552e:	2a47      	cmp	r2, #71	@ 0x47
 8005530:	d1c2      	bne.n	80054b8 <_printf_float+0xf0>
 8005532:	2b00      	cmp	r3, #0
 8005534:	d1c0      	bne.n	80054b8 <_printf_float+0xf0>
 8005536:	2301      	movs	r3, #1
 8005538:	e7bd      	b.n	80054b6 <_printf_float+0xee>
 800553a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800553e:	d9db      	bls.n	80054f8 <_printf_float+0x130>
 8005540:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005544:	d118      	bne.n	8005578 <_printf_float+0x1b0>
 8005546:	2900      	cmp	r1, #0
 8005548:	6863      	ldr	r3, [r4, #4]
 800554a:	dd0b      	ble.n	8005564 <_printf_float+0x19c>
 800554c:	6121      	str	r1, [r4, #16]
 800554e:	b913      	cbnz	r3, 8005556 <_printf_float+0x18e>
 8005550:	6822      	ldr	r2, [r4, #0]
 8005552:	07d0      	lsls	r0, r2, #31
 8005554:	d502      	bpl.n	800555c <_printf_float+0x194>
 8005556:	3301      	adds	r3, #1
 8005558:	440b      	add	r3, r1
 800555a:	6123      	str	r3, [r4, #16]
 800555c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800555e:	f04f 0900 	mov.w	r9, #0
 8005562:	e7db      	b.n	800551c <_printf_float+0x154>
 8005564:	b913      	cbnz	r3, 800556c <_printf_float+0x1a4>
 8005566:	6822      	ldr	r2, [r4, #0]
 8005568:	07d2      	lsls	r2, r2, #31
 800556a:	d501      	bpl.n	8005570 <_printf_float+0x1a8>
 800556c:	3302      	adds	r3, #2
 800556e:	e7f4      	b.n	800555a <_printf_float+0x192>
 8005570:	2301      	movs	r3, #1
 8005572:	e7f2      	b.n	800555a <_printf_float+0x192>
 8005574:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005578:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800557a:	4299      	cmp	r1, r3
 800557c:	db05      	blt.n	800558a <_printf_float+0x1c2>
 800557e:	6823      	ldr	r3, [r4, #0]
 8005580:	6121      	str	r1, [r4, #16]
 8005582:	07d8      	lsls	r0, r3, #31
 8005584:	d5ea      	bpl.n	800555c <_printf_float+0x194>
 8005586:	1c4b      	adds	r3, r1, #1
 8005588:	e7e7      	b.n	800555a <_printf_float+0x192>
 800558a:	2900      	cmp	r1, #0
 800558c:	bfd4      	ite	le
 800558e:	f1c1 0202 	rsble	r2, r1, #2
 8005592:	2201      	movgt	r2, #1
 8005594:	4413      	add	r3, r2
 8005596:	e7e0      	b.n	800555a <_printf_float+0x192>
 8005598:	6823      	ldr	r3, [r4, #0]
 800559a:	055a      	lsls	r2, r3, #21
 800559c:	d407      	bmi.n	80055ae <_printf_float+0x1e6>
 800559e:	6923      	ldr	r3, [r4, #16]
 80055a0:	4642      	mov	r2, r8
 80055a2:	4631      	mov	r1, r6
 80055a4:	4628      	mov	r0, r5
 80055a6:	47b8      	blx	r7
 80055a8:	3001      	adds	r0, #1
 80055aa:	d12b      	bne.n	8005604 <_printf_float+0x23c>
 80055ac:	e767      	b.n	800547e <_printf_float+0xb6>
 80055ae:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80055b2:	f240 80dd 	bls.w	8005770 <_printf_float+0x3a8>
 80055b6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80055ba:	2200      	movs	r2, #0
 80055bc:	2300      	movs	r3, #0
 80055be:	f7fb fa8b 	bl	8000ad8 <__aeabi_dcmpeq>
 80055c2:	2800      	cmp	r0, #0
 80055c4:	d033      	beq.n	800562e <_printf_float+0x266>
 80055c6:	4a37      	ldr	r2, [pc, #220]	@ (80056a4 <_printf_float+0x2dc>)
 80055c8:	2301      	movs	r3, #1
 80055ca:	4631      	mov	r1, r6
 80055cc:	4628      	mov	r0, r5
 80055ce:	47b8      	blx	r7
 80055d0:	3001      	adds	r0, #1
 80055d2:	f43f af54 	beq.w	800547e <_printf_float+0xb6>
 80055d6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80055da:	4543      	cmp	r3, r8
 80055dc:	db02      	blt.n	80055e4 <_printf_float+0x21c>
 80055de:	6823      	ldr	r3, [r4, #0]
 80055e0:	07d8      	lsls	r0, r3, #31
 80055e2:	d50f      	bpl.n	8005604 <_printf_float+0x23c>
 80055e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80055e8:	4631      	mov	r1, r6
 80055ea:	4628      	mov	r0, r5
 80055ec:	47b8      	blx	r7
 80055ee:	3001      	adds	r0, #1
 80055f0:	f43f af45 	beq.w	800547e <_printf_float+0xb6>
 80055f4:	f04f 0900 	mov.w	r9, #0
 80055f8:	f108 38ff 	add.w	r8, r8, #4294967295
 80055fc:	f104 0a1a 	add.w	sl, r4, #26
 8005600:	45c8      	cmp	r8, r9
 8005602:	dc09      	bgt.n	8005618 <_printf_float+0x250>
 8005604:	6823      	ldr	r3, [r4, #0]
 8005606:	079b      	lsls	r3, r3, #30
 8005608:	f100 8103 	bmi.w	8005812 <_printf_float+0x44a>
 800560c:	68e0      	ldr	r0, [r4, #12]
 800560e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005610:	4298      	cmp	r0, r3
 8005612:	bfb8      	it	lt
 8005614:	4618      	movlt	r0, r3
 8005616:	e734      	b.n	8005482 <_printf_float+0xba>
 8005618:	2301      	movs	r3, #1
 800561a:	4652      	mov	r2, sl
 800561c:	4631      	mov	r1, r6
 800561e:	4628      	mov	r0, r5
 8005620:	47b8      	blx	r7
 8005622:	3001      	adds	r0, #1
 8005624:	f43f af2b 	beq.w	800547e <_printf_float+0xb6>
 8005628:	f109 0901 	add.w	r9, r9, #1
 800562c:	e7e8      	b.n	8005600 <_printf_float+0x238>
 800562e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005630:	2b00      	cmp	r3, #0
 8005632:	dc39      	bgt.n	80056a8 <_printf_float+0x2e0>
 8005634:	4a1b      	ldr	r2, [pc, #108]	@ (80056a4 <_printf_float+0x2dc>)
 8005636:	2301      	movs	r3, #1
 8005638:	4631      	mov	r1, r6
 800563a:	4628      	mov	r0, r5
 800563c:	47b8      	blx	r7
 800563e:	3001      	adds	r0, #1
 8005640:	f43f af1d 	beq.w	800547e <_printf_float+0xb6>
 8005644:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005648:	ea59 0303 	orrs.w	r3, r9, r3
 800564c:	d102      	bne.n	8005654 <_printf_float+0x28c>
 800564e:	6823      	ldr	r3, [r4, #0]
 8005650:	07d9      	lsls	r1, r3, #31
 8005652:	d5d7      	bpl.n	8005604 <_printf_float+0x23c>
 8005654:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005658:	4631      	mov	r1, r6
 800565a:	4628      	mov	r0, r5
 800565c:	47b8      	blx	r7
 800565e:	3001      	adds	r0, #1
 8005660:	f43f af0d 	beq.w	800547e <_printf_float+0xb6>
 8005664:	f04f 0a00 	mov.w	sl, #0
 8005668:	f104 0b1a 	add.w	fp, r4, #26
 800566c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800566e:	425b      	negs	r3, r3
 8005670:	4553      	cmp	r3, sl
 8005672:	dc01      	bgt.n	8005678 <_printf_float+0x2b0>
 8005674:	464b      	mov	r3, r9
 8005676:	e793      	b.n	80055a0 <_printf_float+0x1d8>
 8005678:	2301      	movs	r3, #1
 800567a:	465a      	mov	r2, fp
 800567c:	4631      	mov	r1, r6
 800567e:	4628      	mov	r0, r5
 8005680:	47b8      	blx	r7
 8005682:	3001      	adds	r0, #1
 8005684:	f43f aefb 	beq.w	800547e <_printf_float+0xb6>
 8005688:	f10a 0a01 	add.w	sl, sl, #1
 800568c:	e7ee      	b.n	800566c <_printf_float+0x2a4>
 800568e:	bf00      	nop
 8005690:	7fefffff 	.word	0x7fefffff
 8005694:	08007fe4 	.word	0x08007fe4
 8005698:	08007fe8 	.word	0x08007fe8
 800569c:	08007fec 	.word	0x08007fec
 80056a0:	08007ff0 	.word	0x08007ff0
 80056a4:	08007ff4 	.word	0x08007ff4
 80056a8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80056aa:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80056ae:	4553      	cmp	r3, sl
 80056b0:	bfa8      	it	ge
 80056b2:	4653      	movge	r3, sl
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	4699      	mov	r9, r3
 80056b8:	dc36      	bgt.n	8005728 <_printf_float+0x360>
 80056ba:	f04f 0b00 	mov.w	fp, #0
 80056be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80056c2:	f104 021a 	add.w	r2, r4, #26
 80056c6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80056c8:	9306      	str	r3, [sp, #24]
 80056ca:	eba3 0309 	sub.w	r3, r3, r9
 80056ce:	455b      	cmp	r3, fp
 80056d0:	dc31      	bgt.n	8005736 <_printf_float+0x36e>
 80056d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80056d4:	459a      	cmp	sl, r3
 80056d6:	dc3a      	bgt.n	800574e <_printf_float+0x386>
 80056d8:	6823      	ldr	r3, [r4, #0]
 80056da:	07da      	lsls	r2, r3, #31
 80056dc:	d437      	bmi.n	800574e <_printf_float+0x386>
 80056de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80056e0:	ebaa 0903 	sub.w	r9, sl, r3
 80056e4:	9b06      	ldr	r3, [sp, #24]
 80056e6:	ebaa 0303 	sub.w	r3, sl, r3
 80056ea:	4599      	cmp	r9, r3
 80056ec:	bfa8      	it	ge
 80056ee:	4699      	movge	r9, r3
 80056f0:	f1b9 0f00 	cmp.w	r9, #0
 80056f4:	dc33      	bgt.n	800575e <_printf_float+0x396>
 80056f6:	f04f 0800 	mov.w	r8, #0
 80056fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80056fe:	f104 0b1a 	add.w	fp, r4, #26
 8005702:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005704:	ebaa 0303 	sub.w	r3, sl, r3
 8005708:	eba3 0309 	sub.w	r3, r3, r9
 800570c:	4543      	cmp	r3, r8
 800570e:	f77f af79 	ble.w	8005604 <_printf_float+0x23c>
 8005712:	2301      	movs	r3, #1
 8005714:	465a      	mov	r2, fp
 8005716:	4631      	mov	r1, r6
 8005718:	4628      	mov	r0, r5
 800571a:	47b8      	blx	r7
 800571c:	3001      	adds	r0, #1
 800571e:	f43f aeae 	beq.w	800547e <_printf_float+0xb6>
 8005722:	f108 0801 	add.w	r8, r8, #1
 8005726:	e7ec      	b.n	8005702 <_printf_float+0x33a>
 8005728:	4642      	mov	r2, r8
 800572a:	4631      	mov	r1, r6
 800572c:	4628      	mov	r0, r5
 800572e:	47b8      	blx	r7
 8005730:	3001      	adds	r0, #1
 8005732:	d1c2      	bne.n	80056ba <_printf_float+0x2f2>
 8005734:	e6a3      	b.n	800547e <_printf_float+0xb6>
 8005736:	2301      	movs	r3, #1
 8005738:	4631      	mov	r1, r6
 800573a:	4628      	mov	r0, r5
 800573c:	9206      	str	r2, [sp, #24]
 800573e:	47b8      	blx	r7
 8005740:	3001      	adds	r0, #1
 8005742:	f43f ae9c 	beq.w	800547e <_printf_float+0xb6>
 8005746:	9a06      	ldr	r2, [sp, #24]
 8005748:	f10b 0b01 	add.w	fp, fp, #1
 800574c:	e7bb      	b.n	80056c6 <_printf_float+0x2fe>
 800574e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005752:	4631      	mov	r1, r6
 8005754:	4628      	mov	r0, r5
 8005756:	47b8      	blx	r7
 8005758:	3001      	adds	r0, #1
 800575a:	d1c0      	bne.n	80056de <_printf_float+0x316>
 800575c:	e68f      	b.n	800547e <_printf_float+0xb6>
 800575e:	9a06      	ldr	r2, [sp, #24]
 8005760:	464b      	mov	r3, r9
 8005762:	4442      	add	r2, r8
 8005764:	4631      	mov	r1, r6
 8005766:	4628      	mov	r0, r5
 8005768:	47b8      	blx	r7
 800576a:	3001      	adds	r0, #1
 800576c:	d1c3      	bne.n	80056f6 <_printf_float+0x32e>
 800576e:	e686      	b.n	800547e <_printf_float+0xb6>
 8005770:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005774:	f1ba 0f01 	cmp.w	sl, #1
 8005778:	dc01      	bgt.n	800577e <_printf_float+0x3b6>
 800577a:	07db      	lsls	r3, r3, #31
 800577c:	d536      	bpl.n	80057ec <_printf_float+0x424>
 800577e:	2301      	movs	r3, #1
 8005780:	4642      	mov	r2, r8
 8005782:	4631      	mov	r1, r6
 8005784:	4628      	mov	r0, r5
 8005786:	47b8      	blx	r7
 8005788:	3001      	adds	r0, #1
 800578a:	f43f ae78 	beq.w	800547e <_printf_float+0xb6>
 800578e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005792:	4631      	mov	r1, r6
 8005794:	4628      	mov	r0, r5
 8005796:	47b8      	blx	r7
 8005798:	3001      	adds	r0, #1
 800579a:	f43f ae70 	beq.w	800547e <_printf_float+0xb6>
 800579e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80057a2:	2200      	movs	r2, #0
 80057a4:	2300      	movs	r3, #0
 80057a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80057aa:	f7fb f995 	bl	8000ad8 <__aeabi_dcmpeq>
 80057ae:	b9c0      	cbnz	r0, 80057e2 <_printf_float+0x41a>
 80057b0:	4653      	mov	r3, sl
 80057b2:	f108 0201 	add.w	r2, r8, #1
 80057b6:	4631      	mov	r1, r6
 80057b8:	4628      	mov	r0, r5
 80057ba:	47b8      	blx	r7
 80057bc:	3001      	adds	r0, #1
 80057be:	d10c      	bne.n	80057da <_printf_float+0x412>
 80057c0:	e65d      	b.n	800547e <_printf_float+0xb6>
 80057c2:	2301      	movs	r3, #1
 80057c4:	465a      	mov	r2, fp
 80057c6:	4631      	mov	r1, r6
 80057c8:	4628      	mov	r0, r5
 80057ca:	47b8      	blx	r7
 80057cc:	3001      	adds	r0, #1
 80057ce:	f43f ae56 	beq.w	800547e <_printf_float+0xb6>
 80057d2:	f108 0801 	add.w	r8, r8, #1
 80057d6:	45d0      	cmp	r8, sl
 80057d8:	dbf3      	blt.n	80057c2 <_printf_float+0x3fa>
 80057da:	464b      	mov	r3, r9
 80057dc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80057e0:	e6df      	b.n	80055a2 <_printf_float+0x1da>
 80057e2:	f04f 0800 	mov.w	r8, #0
 80057e6:	f104 0b1a 	add.w	fp, r4, #26
 80057ea:	e7f4      	b.n	80057d6 <_printf_float+0x40e>
 80057ec:	2301      	movs	r3, #1
 80057ee:	4642      	mov	r2, r8
 80057f0:	e7e1      	b.n	80057b6 <_printf_float+0x3ee>
 80057f2:	2301      	movs	r3, #1
 80057f4:	464a      	mov	r2, r9
 80057f6:	4631      	mov	r1, r6
 80057f8:	4628      	mov	r0, r5
 80057fa:	47b8      	blx	r7
 80057fc:	3001      	adds	r0, #1
 80057fe:	f43f ae3e 	beq.w	800547e <_printf_float+0xb6>
 8005802:	f108 0801 	add.w	r8, r8, #1
 8005806:	68e3      	ldr	r3, [r4, #12]
 8005808:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800580a:	1a5b      	subs	r3, r3, r1
 800580c:	4543      	cmp	r3, r8
 800580e:	dcf0      	bgt.n	80057f2 <_printf_float+0x42a>
 8005810:	e6fc      	b.n	800560c <_printf_float+0x244>
 8005812:	f04f 0800 	mov.w	r8, #0
 8005816:	f104 0919 	add.w	r9, r4, #25
 800581a:	e7f4      	b.n	8005806 <_printf_float+0x43e>

0800581c <_printf_common>:
 800581c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005820:	4616      	mov	r6, r2
 8005822:	4698      	mov	r8, r3
 8005824:	688a      	ldr	r2, [r1, #8]
 8005826:	690b      	ldr	r3, [r1, #16]
 8005828:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800582c:	4293      	cmp	r3, r2
 800582e:	bfb8      	it	lt
 8005830:	4613      	movlt	r3, r2
 8005832:	6033      	str	r3, [r6, #0]
 8005834:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005838:	4607      	mov	r7, r0
 800583a:	460c      	mov	r4, r1
 800583c:	b10a      	cbz	r2, 8005842 <_printf_common+0x26>
 800583e:	3301      	adds	r3, #1
 8005840:	6033      	str	r3, [r6, #0]
 8005842:	6823      	ldr	r3, [r4, #0]
 8005844:	0699      	lsls	r1, r3, #26
 8005846:	bf42      	ittt	mi
 8005848:	6833      	ldrmi	r3, [r6, #0]
 800584a:	3302      	addmi	r3, #2
 800584c:	6033      	strmi	r3, [r6, #0]
 800584e:	6825      	ldr	r5, [r4, #0]
 8005850:	f015 0506 	ands.w	r5, r5, #6
 8005854:	d106      	bne.n	8005864 <_printf_common+0x48>
 8005856:	f104 0a19 	add.w	sl, r4, #25
 800585a:	68e3      	ldr	r3, [r4, #12]
 800585c:	6832      	ldr	r2, [r6, #0]
 800585e:	1a9b      	subs	r3, r3, r2
 8005860:	42ab      	cmp	r3, r5
 8005862:	dc26      	bgt.n	80058b2 <_printf_common+0x96>
 8005864:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005868:	6822      	ldr	r2, [r4, #0]
 800586a:	3b00      	subs	r3, #0
 800586c:	bf18      	it	ne
 800586e:	2301      	movne	r3, #1
 8005870:	0692      	lsls	r2, r2, #26
 8005872:	d42b      	bmi.n	80058cc <_printf_common+0xb0>
 8005874:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005878:	4641      	mov	r1, r8
 800587a:	4638      	mov	r0, r7
 800587c:	47c8      	blx	r9
 800587e:	3001      	adds	r0, #1
 8005880:	d01e      	beq.n	80058c0 <_printf_common+0xa4>
 8005882:	6823      	ldr	r3, [r4, #0]
 8005884:	6922      	ldr	r2, [r4, #16]
 8005886:	f003 0306 	and.w	r3, r3, #6
 800588a:	2b04      	cmp	r3, #4
 800588c:	bf02      	ittt	eq
 800588e:	68e5      	ldreq	r5, [r4, #12]
 8005890:	6833      	ldreq	r3, [r6, #0]
 8005892:	1aed      	subeq	r5, r5, r3
 8005894:	68a3      	ldr	r3, [r4, #8]
 8005896:	bf0c      	ite	eq
 8005898:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800589c:	2500      	movne	r5, #0
 800589e:	4293      	cmp	r3, r2
 80058a0:	bfc4      	itt	gt
 80058a2:	1a9b      	subgt	r3, r3, r2
 80058a4:	18ed      	addgt	r5, r5, r3
 80058a6:	2600      	movs	r6, #0
 80058a8:	341a      	adds	r4, #26
 80058aa:	42b5      	cmp	r5, r6
 80058ac:	d11a      	bne.n	80058e4 <_printf_common+0xc8>
 80058ae:	2000      	movs	r0, #0
 80058b0:	e008      	b.n	80058c4 <_printf_common+0xa8>
 80058b2:	2301      	movs	r3, #1
 80058b4:	4652      	mov	r2, sl
 80058b6:	4641      	mov	r1, r8
 80058b8:	4638      	mov	r0, r7
 80058ba:	47c8      	blx	r9
 80058bc:	3001      	adds	r0, #1
 80058be:	d103      	bne.n	80058c8 <_printf_common+0xac>
 80058c0:	f04f 30ff 	mov.w	r0, #4294967295
 80058c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058c8:	3501      	adds	r5, #1
 80058ca:	e7c6      	b.n	800585a <_printf_common+0x3e>
 80058cc:	18e1      	adds	r1, r4, r3
 80058ce:	1c5a      	adds	r2, r3, #1
 80058d0:	2030      	movs	r0, #48	@ 0x30
 80058d2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80058d6:	4422      	add	r2, r4
 80058d8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80058dc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80058e0:	3302      	adds	r3, #2
 80058e2:	e7c7      	b.n	8005874 <_printf_common+0x58>
 80058e4:	2301      	movs	r3, #1
 80058e6:	4622      	mov	r2, r4
 80058e8:	4641      	mov	r1, r8
 80058ea:	4638      	mov	r0, r7
 80058ec:	47c8      	blx	r9
 80058ee:	3001      	adds	r0, #1
 80058f0:	d0e6      	beq.n	80058c0 <_printf_common+0xa4>
 80058f2:	3601      	adds	r6, #1
 80058f4:	e7d9      	b.n	80058aa <_printf_common+0x8e>
	...

080058f8 <_printf_i>:
 80058f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80058fc:	7e0f      	ldrb	r7, [r1, #24]
 80058fe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005900:	2f78      	cmp	r7, #120	@ 0x78
 8005902:	4691      	mov	r9, r2
 8005904:	4680      	mov	r8, r0
 8005906:	460c      	mov	r4, r1
 8005908:	469a      	mov	sl, r3
 800590a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800590e:	d807      	bhi.n	8005920 <_printf_i+0x28>
 8005910:	2f62      	cmp	r7, #98	@ 0x62
 8005912:	d80a      	bhi.n	800592a <_printf_i+0x32>
 8005914:	2f00      	cmp	r7, #0
 8005916:	f000 80d2 	beq.w	8005abe <_printf_i+0x1c6>
 800591a:	2f58      	cmp	r7, #88	@ 0x58
 800591c:	f000 80b9 	beq.w	8005a92 <_printf_i+0x19a>
 8005920:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005924:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005928:	e03a      	b.n	80059a0 <_printf_i+0xa8>
 800592a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800592e:	2b15      	cmp	r3, #21
 8005930:	d8f6      	bhi.n	8005920 <_printf_i+0x28>
 8005932:	a101      	add	r1, pc, #4	@ (adr r1, 8005938 <_printf_i+0x40>)
 8005934:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005938:	08005991 	.word	0x08005991
 800593c:	080059a5 	.word	0x080059a5
 8005940:	08005921 	.word	0x08005921
 8005944:	08005921 	.word	0x08005921
 8005948:	08005921 	.word	0x08005921
 800594c:	08005921 	.word	0x08005921
 8005950:	080059a5 	.word	0x080059a5
 8005954:	08005921 	.word	0x08005921
 8005958:	08005921 	.word	0x08005921
 800595c:	08005921 	.word	0x08005921
 8005960:	08005921 	.word	0x08005921
 8005964:	08005aa5 	.word	0x08005aa5
 8005968:	080059cf 	.word	0x080059cf
 800596c:	08005a5f 	.word	0x08005a5f
 8005970:	08005921 	.word	0x08005921
 8005974:	08005921 	.word	0x08005921
 8005978:	08005ac7 	.word	0x08005ac7
 800597c:	08005921 	.word	0x08005921
 8005980:	080059cf 	.word	0x080059cf
 8005984:	08005921 	.word	0x08005921
 8005988:	08005921 	.word	0x08005921
 800598c:	08005a67 	.word	0x08005a67
 8005990:	6833      	ldr	r3, [r6, #0]
 8005992:	1d1a      	adds	r2, r3, #4
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	6032      	str	r2, [r6, #0]
 8005998:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800599c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80059a0:	2301      	movs	r3, #1
 80059a2:	e09d      	b.n	8005ae0 <_printf_i+0x1e8>
 80059a4:	6833      	ldr	r3, [r6, #0]
 80059a6:	6820      	ldr	r0, [r4, #0]
 80059a8:	1d19      	adds	r1, r3, #4
 80059aa:	6031      	str	r1, [r6, #0]
 80059ac:	0606      	lsls	r6, r0, #24
 80059ae:	d501      	bpl.n	80059b4 <_printf_i+0xbc>
 80059b0:	681d      	ldr	r5, [r3, #0]
 80059b2:	e003      	b.n	80059bc <_printf_i+0xc4>
 80059b4:	0645      	lsls	r5, r0, #25
 80059b6:	d5fb      	bpl.n	80059b0 <_printf_i+0xb8>
 80059b8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80059bc:	2d00      	cmp	r5, #0
 80059be:	da03      	bge.n	80059c8 <_printf_i+0xd0>
 80059c0:	232d      	movs	r3, #45	@ 0x2d
 80059c2:	426d      	negs	r5, r5
 80059c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80059c8:	4859      	ldr	r0, [pc, #356]	@ (8005b30 <_printf_i+0x238>)
 80059ca:	230a      	movs	r3, #10
 80059cc:	e011      	b.n	80059f2 <_printf_i+0xfa>
 80059ce:	6821      	ldr	r1, [r4, #0]
 80059d0:	6833      	ldr	r3, [r6, #0]
 80059d2:	0608      	lsls	r0, r1, #24
 80059d4:	f853 5b04 	ldr.w	r5, [r3], #4
 80059d8:	d402      	bmi.n	80059e0 <_printf_i+0xe8>
 80059da:	0649      	lsls	r1, r1, #25
 80059dc:	bf48      	it	mi
 80059de:	b2ad      	uxthmi	r5, r5
 80059e0:	2f6f      	cmp	r7, #111	@ 0x6f
 80059e2:	4853      	ldr	r0, [pc, #332]	@ (8005b30 <_printf_i+0x238>)
 80059e4:	6033      	str	r3, [r6, #0]
 80059e6:	bf14      	ite	ne
 80059e8:	230a      	movne	r3, #10
 80059ea:	2308      	moveq	r3, #8
 80059ec:	2100      	movs	r1, #0
 80059ee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80059f2:	6866      	ldr	r6, [r4, #4]
 80059f4:	60a6      	str	r6, [r4, #8]
 80059f6:	2e00      	cmp	r6, #0
 80059f8:	bfa2      	ittt	ge
 80059fa:	6821      	ldrge	r1, [r4, #0]
 80059fc:	f021 0104 	bicge.w	r1, r1, #4
 8005a00:	6021      	strge	r1, [r4, #0]
 8005a02:	b90d      	cbnz	r5, 8005a08 <_printf_i+0x110>
 8005a04:	2e00      	cmp	r6, #0
 8005a06:	d04b      	beq.n	8005aa0 <_printf_i+0x1a8>
 8005a08:	4616      	mov	r6, r2
 8005a0a:	fbb5 f1f3 	udiv	r1, r5, r3
 8005a0e:	fb03 5711 	mls	r7, r3, r1, r5
 8005a12:	5dc7      	ldrb	r7, [r0, r7]
 8005a14:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005a18:	462f      	mov	r7, r5
 8005a1a:	42bb      	cmp	r3, r7
 8005a1c:	460d      	mov	r5, r1
 8005a1e:	d9f4      	bls.n	8005a0a <_printf_i+0x112>
 8005a20:	2b08      	cmp	r3, #8
 8005a22:	d10b      	bne.n	8005a3c <_printf_i+0x144>
 8005a24:	6823      	ldr	r3, [r4, #0]
 8005a26:	07df      	lsls	r7, r3, #31
 8005a28:	d508      	bpl.n	8005a3c <_printf_i+0x144>
 8005a2a:	6923      	ldr	r3, [r4, #16]
 8005a2c:	6861      	ldr	r1, [r4, #4]
 8005a2e:	4299      	cmp	r1, r3
 8005a30:	bfde      	ittt	le
 8005a32:	2330      	movle	r3, #48	@ 0x30
 8005a34:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005a38:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005a3c:	1b92      	subs	r2, r2, r6
 8005a3e:	6122      	str	r2, [r4, #16]
 8005a40:	f8cd a000 	str.w	sl, [sp]
 8005a44:	464b      	mov	r3, r9
 8005a46:	aa03      	add	r2, sp, #12
 8005a48:	4621      	mov	r1, r4
 8005a4a:	4640      	mov	r0, r8
 8005a4c:	f7ff fee6 	bl	800581c <_printf_common>
 8005a50:	3001      	adds	r0, #1
 8005a52:	d14a      	bne.n	8005aea <_printf_i+0x1f2>
 8005a54:	f04f 30ff 	mov.w	r0, #4294967295
 8005a58:	b004      	add	sp, #16
 8005a5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a5e:	6823      	ldr	r3, [r4, #0]
 8005a60:	f043 0320 	orr.w	r3, r3, #32
 8005a64:	6023      	str	r3, [r4, #0]
 8005a66:	4833      	ldr	r0, [pc, #204]	@ (8005b34 <_printf_i+0x23c>)
 8005a68:	2778      	movs	r7, #120	@ 0x78
 8005a6a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005a6e:	6823      	ldr	r3, [r4, #0]
 8005a70:	6831      	ldr	r1, [r6, #0]
 8005a72:	061f      	lsls	r7, r3, #24
 8005a74:	f851 5b04 	ldr.w	r5, [r1], #4
 8005a78:	d402      	bmi.n	8005a80 <_printf_i+0x188>
 8005a7a:	065f      	lsls	r7, r3, #25
 8005a7c:	bf48      	it	mi
 8005a7e:	b2ad      	uxthmi	r5, r5
 8005a80:	6031      	str	r1, [r6, #0]
 8005a82:	07d9      	lsls	r1, r3, #31
 8005a84:	bf44      	itt	mi
 8005a86:	f043 0320 	orrmi.w	r3, r3, #32
 8005a8a:	6023      	strmi	r3, [r4, #0]
 8005a8c:	b11d      	cbz	r5, 8005a96 <_printf_i+0x19e>
 8005a8e:	2310      	movs	r3, #16
 8005a90:	e7ac      	b.n	80059ec <_printf_i+0xf4>
 8005a92:	4827      	ldr	r0, [pc, #156]	@ (8005b30 <_printf_i+0x238>)
 8005a94:	e7e9      	b.n	8005a6a <_printf_i+0x172>
 8005a96:	6823      	ldr	r3, [r4, #0]
 8005a98:	f023 0320 	bic.w	r3, r3, #32
 8005a9c:	6023      	str	r3, [r4, #0]
 8005a9e:	e7f6      	b.n	8005a8e <_printf_i+0x196>
 8005aa0:	4616      	mov	r6, r2
 8005aa2:	e7bd      	b.n	8005a20 <_printf_i+0x128>
 8005aa4:	6833      	ldr	r3, [r6, #0]
 8005aa6:	6825      	ldr	r5, [r4, #0]
 8005aa8:	6961      	ldr	r1, [r4, #20]
 8005aaa:	1d18      	adds	r0, r3, #4
 8005aac:	6030      	str	r0, [r6, #0]
 8005aae:	062e      	lsls	r6, r5, #24
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	d501      	bpl.n	8005ab8 <_printf_i+0x1c0>
 8005ab4:	6019      	str	r1, [r3, #0]
 8005ab6:	e002      	b.n	8005abe <_printf_i+0x1c6>
 8005ab8:	0668      	lsls	r0, r5, #25
 8005aba:	d5fb      	bpl.n	8005ab4 <_printf_i+0x1bc>
 8005abc:	8019      	strh	r1, [r3, #0]
 8005abe:	2300      	movs	r3, #0
 8005ac0:	6123      	str	r3, [r4, #16]
 8005ac2:	4616      	mov	r6, r2
 8005ac4:	e7bc      	b.n	8005a40 <_printf_i+0x148>
 8005ac6:	6833      	ldr	r3, [r6, #0]
 8005ac8:	1d1a      	adds	r2, r3, #4
 8005aca:	6032      	str	r2, [r6, #0]
 8005acc:	681e      	ldr	r6, [r3, #0]
 8005ace:	6862      	ldr	r2, [r4, #4]
 8005ad0:	2100      	movs	r1, #0
 8005ad2:	4630      	mov	r0, r6
 8005ad4:	f7fa fb84 	bl	80001e0 <memchr>
 8005ad8:	b108      	cbz	r0, 8005ade <_printf_i+0x1e6>
 8005ada:	1b80      	subs	r0, r0, r6
 8005adc:	6060      	str	r0, [r4, #4]
 8005ade:	6863      	ldr	r3, [r4, #4]
 8005ae0:	6123      	str	r3, [r4, #16]
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005ae8:	e7aa      	b.n	8005a40 <_printf_i+0x148>
 8005aea:	6923      	ldr	r3, [r4, #16]
 8005aec:	4632      	mov	r2, r6
 8005aee:	4649      	mov	r1, r9
 8005af0:	4640      	mov	r0, r8
 8005af2:	47d0      	blx	sl
 8005af4:	3001      	adds	r0, #1
 8005af6:	d0ad      	beq.n	8005a54 <_printf_i+0x15c>
 8005af8:	6823      	ldr	r3, [r4, #0]
 8005afa:	079b      	lsls	r3, r3, #30
 8005afc:	d413      	bmi.n	8005b26 <_printf_i+0x22e>
 8005afe:	68e0      	ldr	r0, [r4, #12]
 8005b00:	9b03      	ldr	r3, [sp, #12]
 8005b02:	4298      	cmp	r0, r3
 8005b04:	bfb8      	it	lt
 8005b06:	4618      	movlt	r0, r3
 8005b08:	e7a6      	b.n	8005a58 <_printf_i+0x160>
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	4632      	mov	r2, r6
 8005b0e:	4649      	mov	r1, r9
 8005b10:	4640      	mov	r0, r8
 8005b12:	47d0      	blx	sl
 8005b14:	3001      	adds	r0, #1
 8005b16:	d09d      	beq.n	8005a54 <_printf_i+0x15c>
 8005b18:	3501      	adds	r5, #1
 8005b1a:	68e3      	ldr	r3, [r4, #12]
 8005b1c:	9903      	ldr	r1, [sp, #12]
 8005b1e:	1a5b      	subs	r3, r3, r1
 8005b20:	42ab      	cmp	r3, r5
 8005b22:	dcf2      	bgt.n	8005b0a <_printf_i+0x212>
 8005b24:	e7eb      	b.n	8005afe <_printf_i+0x206>
 8005b26:	2500      	movs	r5, #0
 8005b28:	f104 0619 	add.w	r6, r4, #25
 8005b2c:	e7f5      	b.n	8005b1a <_printf_i+0x222>
 8005b2e:	bf00      	nop
 8005b30:	08007ff6 	.word	0x08007ff6
 8005b34:	08008007 	.word	0x08008007

08005b38 <std>:
 8005b38:	2300      	movs	r3, #0
 8005b3a:	b510      	push	{r4, lr}
 8005b3c:	4604      	mov	r4, r0
 8005b3e:	e9c0 3300 	strd	r3, r3, [r0]
 8005b42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005b46:	6083      	str	r3, [r0, #8]
 8005b48:	8181      	strh	r1, [r0, #12]
 8005b4a:	6643      	str	r3, [r0, #100]	@ 0x64
 8005b4c:	81c2      	strh	r2, [r0, #14]
 8005b4e:	6183      	str	r3, [r0, #24]
 8005b50:	4619      	mov	r1, r3
 8005b52:	2208      	movs	r2, #8
 8005b54:	305c      	adds	r0, #92	@ 0x5c
 8005b56:	f000 f914 	bl	8005d82 <memset>
 8005b5a:	4b0d      	ldr	r3, [pc, #52]	@ (8005b90 <std+0x58>)
 8005b5c:	6263      	str	r3, [r4, #36]	@ 0x24
 8005b5e:	4b0d      	ldr	r3, [pc, #52]	@ (8005b94 <std+0x5c>)
 8005b60:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005b62:	4b0d      	ldr	r3, [pc, #52]	@ (8005b98 <std+0x60>)
 8005b64:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005b66:	4b0d      	ldr	r3, [pc, #52]	@ (8005b9c <std+0x64>)
 8005b68:	6323      	str	r3, [r4, #48]	@ 0x30
 8005b6a:	4b0d      	ldr	r3, [pc, #52]	@ (8005ba0 <std+0x68>)
 8005b6c:	6224      	str	r4, [r4, #32]
 8005b6e:	429c      	cmp	r4, r3
 8005b70:	d006      	beq.n	8005b80 <std+0x48>
 8005b72:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005b76:	4294      	cmp	r4, r2
 8005b78:	d002      	beq.n	8005b80 <std+0x48>
 8005b7a:	33d0      	adds	r3, #208	@ 0xd0
 8005b7c:	429c      	cmp	r4, r3
 8005b7e:	d105      	bne.n	8005b8c <std+0x54>
 8005b80:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005b84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b88:	f000 b978 	b.w	8005e7c <__retarget_lock_init_recursive>
 8005b8c:	bd10      	pop	{r4, pc}
 8005b8e:	bf00      	nop
 8005b90:	08005cfd 	.word	0x08005cfd
 8005b94:	08005d1f 	.word	0x08005d1f
 8005b98:	08005d57 	.word	0x08005d57
 8005b9c:	08005d7b 	.word	0x08005d7b
 8005ba0:	2000032c 	.word	0x2000032c

08005ba4 <stdio_exit_handler>:
 8005ba4:	4a02      	ldr	r2, [pc, #8]	@ (8005bb0 <stdio_exit_handler+0xc>)
 8005ba6:	4903      	ldr	r1, [pc, #12]	@ (8005bb4 <stdio_exit_handler+0x10>)
 8005ba8:	4803      	ldr	r0, [pc, #12]	@ (8005bb8 <stdio_exit_handler+0x14>)
 8005baa:	f000 b869 	b.w	8005c80 <_fwalk_sglue>
 8005bae:	bf00      	nop
 8005bb0:	2000000c 	.word	0x2000000c
 8005bb4:	080077dd 	.word	0x080077dd
 8005bb8:	2000001c 	.word	0x2000001c

08005bbc <cleanup_stdio>:
 8005bbc:	6841      	ldr	r1, [r0, #4]
 8005bbe:	4b0c      	ldr	r3, [pc, #48]	@ (8005bf0 <cleanup_stdio+0x34>)
 8005bc0:	4299      	cmp	r1, r3
 8005bc2:	b510      	push	{r4, lr}
 8005bc4:	4604      	mov	r4, r0
 8005bc6:	d001      	beq.n	8005bcc <cleanup_stdio+0x10>
 8005bc8:	f001 fe08 	bl	80077dc <_fflush_r>
 8005bcc:	68a1      	ldr	r1, [r4, #8]
 8005bce:	4b09      	ldr	r3, [pc, #36]	@ (8005bf4 <cleanup_stdio+0x38>)
 8005bd0:	4299      	cmp	r1, r3
 8005bd2:	d002      	beq.n	8005bda <cleanup_stdio+0x1e>
 8005bd4:	4620      	mov	r0, r4
 8005bd6:	f001 fe01 	bl	80077dc <_fflush_r>
 8005bda:	68e1      	ldr	r1, [r4, #12]
 8005bdc:	4b06      	ldr	r3, [pc, #24]	@ (8005bf8 <cleanup_stdio+0x3c>)
 8005bde:	4299      	cmp	r1, r3
 8005be0:	d004      	beq.n	8005bec <cleanup_stdio+0x30>
 8005be2:	4620      	mov	r0, r4
 8005be4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005be8:	f001 bdf8 	b.w	80077dc <_fflush_r>
 8005bec:	bd10      	pop	{r4, pc}
 8005bee:	bf00      	nop
 8005bf0:	2000032c 	.word	0x2000032c
 8005bf4:	20000394 	.word	0x20000394
 8005bf8:	200003fc 	.word	0x200003fc

08005bfc <global_stdio_init.part.0>:
 8005bfc:	b510      	push	{r4, lr}
 8005bfe:	4b0b      	ldr	r3, [pc, #44]	@ (8005c2c <global_stdio_init.part.0+0x30>)
 8005c00:	4c0b      	ldr	r4, [pc, #44]	@ (8005c30 <global_stdio_init.part.0+0x34>)
 8005c02:	4a0c      	ldr	r2, [pc, #48]	@ (8005c34 <global_stdio_init.part.0+0x38>)
 8005c04:	601a      	str	r2, [r3, #0]
 8005c06:	4620      	mov	r0, r4
 8005c08:	2200      	movs	r2, #0
 8005c0a:	2104      	movs	r1, #4
 8005c0c:	f7ff ff94 	bl	8005b38 <std>
 8005c10:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005c14:	2201      	movs	r2, #1
 8005c16:	2109      	movs	r1, #9
 8005c18:	f7ff ff8e 	bl	8005b38 <std>
 8005c1c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005c20:	2202      	movs	r2, #2
 8005c22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c26:	2112      	movs	r1, #18
 8005c28:	f7ff bf86 	b.w	8005b38 <std>
 8005c2c:	20000464 	.word	0x20000464
 8005c30:	2000032c 	.word	0x2000032c
 8005c34:	08005ba5 	.word	0x08005ba5

08005c38 <__sfp_lock_acquire>:
 8005c38:	4801      	ldr	r0, [pc, #4]	@ (8005c40 <__sfp_lock_acquire+0x8>)
 8005c3a:	f000 b920 	b.w	8005e7e <__retarget_lock_acquire_recursive>
 8005c3e:	bf00      	nop
 8005c40:	2000046d 	.word	0x2000046d

08005c44 <__sfp_lock_release>:
 8005c44:	4801      	ldr	r0, [pc, #4]	@ (8005c4c <__sfp_lock_release+0x8>)
 8005c46:	f000 b91b 	b.w	8005e80 <__retarget_lock_release_recursive>
 8005c4a:	bf00      	nop
 8005c4c:	2000046d 	.word	0x2000046d

08005c50 <__sinit>:
 8005c50:	b510      	push	{r4, lr}
 8005c52:	4604      	mov	r4, r0
 8005c54:	f7ff fff0 	bl	8005c38 <__sfp_lock_acquire>
 8005c58:	6a23      	ldr	r3, [r4, #32]
 8005c5a:	b11b      	cbz	r3, 8005c64 <__sinit+0x14>
 8005c5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c60:	f7ff bff0 	b.w	8005c44 <__sfp_lock_release>
 8005c64:	4b04      	ldr	r3, [pc, #16]	@ (8005c78 <__sinit+0x28>)
 8005c66:	6223      	str	r3, [r4, #32]
 8005c68:	4b04      	ldr	r3, [pc, #16]	@ (8005c7c <__sinit+0x2c>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d1f5      	bne.n	8005c5c <__sinit+0xc>
 8005c70:	f7ff ffc4 	bl	8005bfc <global_stdio_init.part.0>
 8005c74:	e7f2      	b.n	8005c5c <__sinit+0xc>
 8005c76:	bf00      	nop
 8005c78:	08005bbd 	.word	0x08005bbd
 8005c7c:	20000464 	.word	0x20000464

08005c80 <_fwalk_sglue>:
 8005c80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c84:	4607      	mov	r7, r0
 8005c86:	4688      	mov	r8, r1
 8005c88:	4614      	mov	r4, r2
 8005c8a:	2600      	movs	r6, #0
 8005c8c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005c90:	f1b9 0901 	subs.w	r9, r9, #1
 8005c94:	d505      	bpl.n	8005ca2 <_fwalk_sglue+0x22>
 8005c96:	6824      	ldr	r4, [r4, #0]
 8005c98:	2c00      	cmp	r4, #0
 8005c9a:	d1f7      	bne.n	8005c8c <_fwalk_sglue+0xc>
 8005c9c:	4630      	mov	r0, r6
 8005c9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ca2:	89ab      	ldrh	r3, [r5, #12]
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d907      	bls.n	8005cb8 <_fwalk_sglue+0x38>
 8005ca8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005cac:	3301      	adds	r3, #1
 8005cae:	d003      	beq.n	8005cb8 <_fwalk_sglue+0x38>
 8005cb0:	4629      	mov	r1, r5
 8005cb2:	4638      	mov	r0, r7
 8005cb4:	47c0      	blx	r8
 8005cb6:	4306      	orrs	r6, r0
 8005cb8:	3568      	adds	r5, #104	@ 0x68
 8005cba:	e7e9      	b.n	8005c90 <_fwalk_sglue+0x10>

08005cbc <siprintf>:
 8005cbc:	b40e      	push	{r1, r2, r3}
 8005cbe:	b500      	push	{lr}
 8005cc0:	b09c      	sub	sp, #112	@ 0x70
 8005cc2:	ab1d      	add	r3, sp, #116	@ 0x74
 8005cc4:	9002      	str	r0, [sp, #8]
 8005cc6:	9006      	str	r0, [sp, #24]
 8005cc8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005ccc:	4809      	ldr	r0, [pc, #36]	@ (8005cf4 <siprintf+0x38>)
 8005cce:	9107      	str	r1, [sp, #28]
 8005cd0:	9104      	str	r1, [sp, #16]
 8005cd2:	4909      	ldr	r1, [pc, #36]	@ (8005cf8 <siprintf+0x3c>)
 8005cd4:	f853 2b04 	ldr.w	r2, [r3], #4
 8005cd8:	9105      	str	r1, [sp, #20]
 8005cda:	6800      	ldr	r0, [r0, #0]
 8005cdc:	9301      	str	r3, [sp, #4]
 8005cde:	a902      	add	r1, sp, #8
 8005ce0:	f001 fbfc 	bl	80074dc <_svfiprintf_r>
 8005ce4:	9b02      	ldr	r3, [sp, #8]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	701a      	strb	r2, [r3, #0]
 8005cea:	b01c      	add	sp, #112	@ 0x70
 8005cec:	f85d eb04 	ldr.w	lr, [sp], #4
 8005cf0:	b003      	add	sp, #12
 8005cf2:	4770      	bx	lr
 8005cf4:	20000018 	.word	0x20000018
 8005cf8:	ffff0208 	.word	0xffff0208

08005cfc <__sread>:
 8005cfc:	b510      	push	{r4, lr}
 8005cfe:	460c      	mov	r4, r1
 8005d00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d04:	f000 f86c 	bl	8005de0 <_read_r>
 8005d08:	2800      	cmp	r0, #0
 8005d0a:	bfab      	itete	ge
 8005d0c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005d0e:	89a3      	ldrhlt	r3, [r4, #12]
 8005d10:	181b      	addge	r3, r3, r0
 8005d12:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005d16:	bfac      	ite	ge
 8005d18:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005d1a:	81a3      	strhlt	r3, [r4, #12]
 8005d1c:	bd10      	pop	{r4, pc}

08005d1e <__swrite>:
 8005d1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d22:	461f      	mov	r7, r3
 8005d24:	898b      	ldrh	r3, [r1, #12]
 8005d26:	05db      	lsls	r3, r3, #23
 8005d28:	4605      	mov	r5, r0
 8005d2a:	460c      	mov	r4, r1
 8005d2c:	4616      	mov	r6, r2
 8005d2e:	d505      	bpl.n	8005d3c <__swrite+0x1e>
 8005d30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d34:	2302      	movs	r3, #2
 8005d36:	2200      	movs	r2, #0
 8005d38:	f000 f840 	bl	8005dbc <_lseek_r>
 8005d3c:	89a3      	ldrh	r3, [r4, #12]
 8005d3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d42:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005d46:	81a3      	strh	r3, [r4, #12]
 8005d48:	4632      	mov	r2, r6
 8005d4a:	463b      	mov	r3, r7
 8005d4c:	4628      	mov	r0, r5
 8005d4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d52:	f000 b857 	b.w	8005e04 <_write_r>

08005d56 <__sseek>:
 8005d56:	b510      	push	{r4, lr}
 8005d58:	460c      	mov	r4, r1
 8005d5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d5e:	f000 f82d 	bl	8005dbc <_lseek_r>
 8005d62:	1c43      	adds	r3, r0, #1
 8005d64:	89a3      	ldrh	r3, [r4, #12]
 8005d66:	bf15      	itete	ne
 8005d68:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005d6a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005d6e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005d72:	81a3      	strheq	r3, [r4, #12]
 8005d74:	bf18      	it	ne
 8005d76:	81a3      	strhne	r3, [r4, #12]
 8005d78:	bd10      	pop	{r4, pc}

08005d7a <__sclose>:
 8005d7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d7e:	f000 b80d 	b.w	8005d9c <_close_r>

08005d82 <memset>:
 8005d82:	4402      	add	r2, r0
 8005d84:	4603      	mov	r3, r0
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d100      	bne.n	8005d8c <memset+0xa>
 8005d8a:	4770      	bx	lr
 8005d8c:	f803 1b01 	strb.w	r1, [r3], #1
 8005d90:	e7f9      	b.n	8005d86 <memset+0x4>
	...

08005d94 <_localeconv_r>:
 8005d94:	4800      	ldr	r0, [pc, #0]	@ (8005d98 <_localeconv_r+0x4>)
 8005d96:	4770      	bx	lr
 8005d98:	20000158 	.word	0x20000158

08005d9c <_close_r>:
 8005d9c:	b538      	push	{r3, r4, r5, lr}
 8005d9e:	4d06      	ldr	r5, [pc, #24]	@ (8005db8 <_close_r+0x1c>)
 8005da0:	2300      	movs	r3, #0
 8005da2:	4604      	mov	r4, r0
 8005da4:	4608      	mov	r0, r1
 8005da6:	602b      	str	r3, [r5, #0]
 8005da8:	f7fb fde3 	bl	8001972 <_close>
 8005dac:	1c43      	adds	r3, r0, #1
 8005dae:	d102      	bne.n	8005db6 <_close_r+0x1a>
 8005db0:	682b      	ldr	r3, [r5, #0]
 8005db2:	b103      	cbz	r3, 8005db6 <_close_r+0x1a>
 8005db4:	6023      	str	r3, [r4, #0]
 8005db6:	bd38      	pop	{r3, r4, r5, pc}
 8005db8:	20000468 	.word	0x20000468

08005dbc <_lseek_r>:
 8005dbc:	b538      	push	{r3, r4, r5, lr}
 8005dbe:	4d07      	ldr	r5, [pc, #28]	@ (8005ddc <_lseek_r+0x20>)
 8005dc0:	4604      	mov	r4, r0
 8005dc2:	4608      	mov	r0, r1
 8005dc4:	4611      	mov	r1, r2
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	602a      	str	r2, [r5, #0]
 8005dca:	461a      	mov	r2, r3
 8005dcc:	f7fb fdf8 	bl	80019c0 <_lseek>
 8005dd0:	1c43      	adds	r3, r0, #1
 8005dd2:	d102      	bne.n	8005dda <_lseek_r+0x1e>
 8005dd4:	682b      	ldr	r3, [r5, #0]
 8005dd6:	b103      	cbz	r3, 8005dda <_lseek_r+0x1e>
 8005dd8:	6023      	str	r3, [r4, #0]
 8005dda:	bd38      	pop	{r3, r4, r5, pc}
 8005ddc:	20000468 	.word	0x20000468

08005de0 <_read_r>:
 8005de0:	b538      	push	{r3, r4, r5, lr}
 8005de2:	4d07      	ldr	r5, [pc, #28]	@ (8005e00 <_read_r+0x20>)
 8005de4:	4604      	mov	r4, r0
 8005de6:	4608      	mov	r0, r1
 8005de8:	4611      	mov	r1, r2
 8005dea:	2200      	movs	r2, #0
 8005dec:	602a      	str	r2, [r5, #0]
 8005dee:	461a      	mov	r2, r3
 8005df0:	f7fb fd86 	bl	8001900 <_read>
 8005df4:	1c43      	adds	r3, r0, #1
 8005df6:	d102      	bne.n	8005dfe <_read_r+0x1e>
 8005df8:	682b      	ldr	r3, [r5, #0]
 8005dfa:	b103      	cbz	r3, 8005dfe <_read_r+0x1e>
 8005dfc:	6023      	str	r3, [r4, #0]
 8005dfe:	bd38      	pop	{r3, r4, r5, pc}
 8005e00:	20000468 	.word	0x20000468

08005e04 <_write_r>:
 8005e04:	b538      	push	{r3, r4, r5, lr}
 8005e06:	4d07      	ldr	r5, [pc, #28]	@ (8005e24 <_write_r+0x20>)
 8005e08:	4604      	mov	r4, r0
 8005e0a:	4608      	mov	r0, r1
 8005e0c:	4611      	mov	r1, r2
 8005e0e:	2200      	movs	r2, #0
 8005e10:	602a      	str	r2, [r5, #0]
 8005e12:	461a      	mov	r2, r3
 8005e14:	f7fb fd91 	bl	800193a <_write>
 8005e18:	1c43      	adds	r3, r0, #1
 8005e1a:	d102      	bne.n	8005e22 <_write_r+0x1e>
 8005e1c:	682b      	ldr	r3, [r5, #0]
 8005e1e:	b103      	cbz	r3, 8005e22 <_write_r+0x1e>
 8005e20:	6023      	str	r3, [r4, #0]
 8005e22:	bd38      	pop	{r3, r4, r5, pc}
 8005e24:	20000468 	.word	0x20000468

08005e28 <__errno>:
 8005e28:	4b01      	ldr	r3, [pc, #4]	@ (8005e30 <__errno+0x8>)
 8005e2a:	6818      	ldr	r0, [r3, #0]
 8005e2c:	4770      	bx	lr
 8005e2e:	bf00      	nop
 8005e30:	20000018 	.word	0x20000018

08005e34 <__libc_init_array>:
 8005e34:	b570      	push	{r4, r5, r6, lr}
 8005e36:	4d0d      	ldr	r5, [pc, #52]	@ (8005e6c <__libc_init_array+0x38>)
 8005e38:	4c0d      	ldr	r4, [pc, #52]	@ (8005e70 <__libc_init_array+0x3c>)
 8005e3a:	1b64      	subs	r4, r4, r5
 8005e3c:	10a4      	asrs	r4, r4, #2
 8005e3e:	2600      	movs	r6, #0
 8005e40:	42a6      	cmp	r6, r4
 8005e42:	d109      	bne.n	8005e58 <__libc_init_array+0x24>
 8005e44:	4d0b      	ldr	r5, [pc, #44]	@ (8005e74 <__libc_init_array+0x40>)
 8005e46:	4c0c      	ldr	r4, [pc, #48]	@ (8005e78 <__libc_init_array+0x44>)
 8005e48:	f002 f866 	bl	8007f18 <_init>
 8005e4c:	1b64      	subs	r4, r4, r5
 8005e4e:	10a4      	asrs	r4, r4, #2
 8005e50:	2600      	movs	r6, #0
 8005e52:	42a6      	cmp	r6, r4
 8005e54:	d105      	bne.n	8005e62 <__libc_init_array+0x2e>
 8005e56:	bd70      	pop	{r4, r5, r6, pc}
 8005e58:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e5c:	4798      	blx	r3
 8005e5e:	3601      	adds	r6, #1
 8005e60:	e7ee      	b.n	8005e40 <__libc_init_array+0xc>
 8005e62:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e66:	4798      	blx	r3
 8005e68:	3601      	adds	r6, #1
 8005e6a:	e7f2      	b.n	8005e52 <__libc_init_array+0x1e>
 8005e6c:	08008360 	.word	0x08008360
 8005e70:	08008360 	.word	0x08008360
 8005e74:	08008360 	.word	0x08008360
 8005e78:	08008364 	.word	0x08008364

08005e7c <__retarget_lock_init_recursive>:
 8005e7c:	4770      	bx	lr

08005e7e <__retarget_lock_acquire_recursive>:
 8005e7e:	4770      	bx	lr

08005e80 <__retarget_lock_release_recursive>:
 8005e80:	4770      	bx	lr

08005e82 <quorem>:
 8005e82:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e86:	6903      	ldr	r3, [r0, #16]
 8005e88:	690c      	ldr	r4, [r1, #16]
 8005e8a:	42a3      	cmp	r3, r4
 8005e8c:	4607      	mov	r7, r0
 8005e8e:	db7e      	blt.n	8005f8e <quorem+0x10c>
 8005e90:	3c01      	subs	r4, #1
 8005e92:	f101 0814 	add.w	r8, r1, #20
 8005e96:	00a3      	lsls	r3, r4, #2
 8005e98:	f100 0514 	add.w	r5, r0, #20
 8005e9c:	9300      	str	r3, [sp, #0]
 8005e9e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005ea2:	9301      	str	r3, [sp, #4]
 8005ea4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005ea8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005eac:	3301      	adds	r3, #1
 8005eae:	429a      	cmp	r2, r3
 8005eb0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005eb4:	fbb2 f6f3 	udiv	r6, r2, r3
 8005eb8:	d32e      	bcc.n	8005f18 <quorem+0x96>
 8005eba:	f04f 0a00 	mov.w	sl, #0
 8005ebe:	46c4      	mov	ip, r8
 8005ec0:	46ae      	mov	lr, r5
 8005ec2:	46d3      	mov	fp, sl
 8005ec4:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005ec8:	b298      	uxth	r0, r3
 8005eca:	fb06 a000 	mla	r0, r6, r0, sl
 8005ece:	0c02      	lsrs	r2, r0, #16
 8005ed0:	0c1b      	lsrs	r3, r3, #16
 8005ed2:	fb06 2303 	mla	r3, r6, r3, r2
 8005ed6:	f8de 2000 	ldr.w	r2, [lr]
 8005eda:	b280      	uxth	r0, r0
 8005edc:	b292      	uxth	r2, r2
 8005ede:	1a12      	subs	r2, r2, r0
 8005ee0:	445a      	add	r2, fp
 8005ee2:	f8de 0000 	ldr.w	r0, [lr]
 8005ee6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005ef0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005ef4:	b292      	uxth	r2, r2
 8005ef6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005efa:	45e1      	cmp	r9, ip
 8005efc:	f84e 2b04 	str.w	r2, [lr], #4
 8005f00:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005f04:	d2de      	bcs.n	8005ec4 <quorem+0x42>
 8005f06:	9b00      	ldr	r3, [sp, #0]
 8005f08:	58eb      	ldr	r3, [r5, r3]
 8005f0a:	b92b      	cbnz	r3, 8005f18 <quorem+0x96>
 8005f0c:	9b01      	ldr	r3, [sp, #4]
 8005f0e:	3b04      	subs	r3, #4
 8005f10:	429d      	cmp	r5, r3
 8005f12:	461a      	mov	r2, r3
 8005f14:	d32f      	bcc.n	8005f76 <quorem+0xf4>
 8005f16:	613c      	str	r4, [r7, #16]
 8005f18:	4638      	mov	r0, r7
 8005f1a:	f001 f97b 	bl	8007214 <__mcmp>
 8005f1e:	2800      	cmp	r0, #0
 8005f20:	db25      	blt.n	8005f6e <quorem+0xec>
 8005f22:	4629      	mov	r1, r5
 8005f24:	2000      	movs	r0, #0
 8005f26:	f858 2b04 	ldr.w	r2, [r8], #4
 8005f2a:	f8d1 c000 	ldr.w	ip, [r1]
 8005f2e:	fa1f fe82 	uxth.w	lr, r2
 8005f32:	fa1f f38c 	uxth.w	r3, ip
 8005f36:	eba3 030e 	sub.w	r3, r3, lr
 8005f3a:	4403      	add	r3, r0
 8005f3c:	0c12      	lsrs	r2, r2, #16
 8005f3e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005f42:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005f4c:	45c1      	cmp	r9, r8
 8005f4e:	f841 3b04 	str.w	r3, [r1], #4
 8005f52:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005f56:	d2e6      	bcs.n	8005f26 <quorem+0xa4>
 8005f58:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005f5c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005f60:	b922      	cbnz	r2, 8005f6c <quorem+0xea>
 8005f62:	3b04      	subs	r3, #4
 8005f64:	429d      	cmp	r5, r3
 8005f66:	461a      	mov	r2, r3
 8005f68:	d30b      	bcc.n	8005f82 <quorem+0x100>
 8005f6a:	613c      	str	r4, [r7, #16]
 8005f6c:	3601      	adds	r6, #1
 8005f6e:	4630      	mov	r0, r6
 8005f70:	b003      	add	sp, #12
 8005f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f76:	6812      	ldr	r2, [r2, #0]
 8005f78:	3b04      	subs	r3, #4
 8005f7a:	2a00      	cmp	r2, #0
 8005f7c:	d1cb      	bne.n	8005f16 <quorem+0x94>
 8005f7e:	3c01      	subs	r4, #1
 8005f80:	e7c6      	b.n	8005f10 <quorem+0x8e>
 8005f82:	6812      	ldr	r2, [r2, #0]
 8005f84:	3b04      	subs	r3, #4
 8005f86:	2a00      	cmp	r2, #0
 8005f88:	d1ef      	bne.n	8005f6a <quorem+0xe8>
 8005f8a:	3c01      	subs	r4, #1
 8005f8c:	e7ea      	b.n	8005f64 <quorem+0xe2>
 8005f8e:	2000      	movs	r0, #0
 8005f90:	e7ee      	b.n	8005f70 <quorem+0xee>
 8005f92:	0000      	movs	r0, r0
 8005f94:	0000      	movs	r0, r0
	...

08005f98 <_dtoa_r>:
 8005f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f9c:	69c7      	ldr	r7, [r0, #28]
 8005f9e:	b099      	sub	sp, #100	@ 0x64
 8005fa0:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005fa4:	ec55 4b10 	vmov	r4, r5, d0
 8005fa8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8005faa:	9109      	str	r1, [sp, #36]	@ 0x24
 8005fac:	4683      	mov	fp, r0
 8005fae:	920e      	str	r2, [sp, #56]	@ 0x38
 8005fb0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005fb2:	b97f      	cbnz	r7, 8005fd4 <_dtoa_r+0x3c>
 8005fb4:	2010      	movs	r0, #16
 8005fb6:	f000 fdfd 	bl	8006bb4 <malloc>
 8005fba:	4602      	mov	r2, r0
 8005fbc:	f8cb 001c 	str.w	r0, [fp, #28]
 8005fc0:	b920      	cbnz	r0, 8005fcc <_dtoa_r+0x34>
 8005fc2:	4ba7      	ldr	r3, [pc, #668]	@ (8006260 <_dtoa_r+0x2c8>)
 8005fc4:	21ef      	movs	r1, #239	@ 0xef
 8005fc6:	48a7      	ldr	r0, [pc, #668]	@ (8006264 <_dtoa_r+0x2cc>)
 8005fc8:	f001 fc68 	bl	800789c <__assert_func>
 8005fcc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005fd0:	6007      	str	r7, [r0, #0]
 8005fd2:	60c7      	str	r7, [r0, #12]
 8005fd4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005fd8:	6819      	ldr	r1, [r3, #0]
 8005fda:	b159      	cbz	r1, 8005ff4 <_dtoa_r+0x5c>
 8005fdc:	685a      	ldr	r2, [r3, #4]
 8005fde:	604a      	str	r2, [r1, #4]
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	4093      	lsls	r3, r2
 8005fe4:	608b      	str	r3, [r1, #8]
 8005fe6:	4658      	mov	r0, fp
 8005fe8:	f000 feda 	bl	8006da0 <_Bfree>
 8005fec:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	601a      	str	r2, [r3, #0]
 8005ff4:	1e2b      	subs	r3, r5, #0
 8005ff6:	bfb9      	ittee	lt
 8005ff8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005ffc:	9303      	strlt	r3, [sp, #12]
 8005ffe:	2300      	movge	r3, #0
 8006000:	6033      	strge	r3, [r6, #0]
 8006002:	9f03      	ldr	r7, [sp, #12]
 8006004:	4b98      	ldr	r3, [pc, #608]	@ (8006268 <_dtoa_r+0x2d0>)
 8006006:	bfbc      	itt	lt
 8006008:	2201      	movlt	r2, #1
 800600a:	6032      	strlt	r2, [r6, #0]
 800600c:	43bb      	bics	r3, r7
 800600e:	d112      	bne.n	8006036 <_dtoa_r+0x9e>
 8006010:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006012:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006016:	6013      	str	r3, [r2, #0]
 8006018:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800601c:	4323      	orrs	r3, r4
 800601e:	f000 854d 	beq.w	8006abc <_dtoa_r+0xb24>
 8006022:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006024:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800627c <_dtoa_r+0x2e4>
 8006028:	2b00      	cmp	r3, #0
 800602a:	f000 854f 	beq.w	8006acc <_dtoa_r+0xb34>
 800602e:	f10a 0303 	add.w	r3, sl, #3
 8006032:	f000 bd49 	b.w	8006ac8 <_dtoa_r+0xb30>
 8006036:	ed9d 7b02 	vldr	d7, [sp, #8]
 800603a:	2200      	movs	r2, #0
 800603c:	ec51 0b17 	vmov	r0, r1, d7
 8006040:	2300      	movs	r3, #0
 8006042:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006046:	f7fa fd47 	bl	8000ad8 <__aeabi_dcmpeq>
 800604a:	4680      	mov	r8, r0
 800604c:	b158      	cbz	r0, 8006066 <_dtoa_r+0xce>
 800604e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006050:	2301      	movs	r3, #1
 8006052:	6013      	str	r3, [r2, #0]
 8006054:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006056:	b113      	cbz	r3, 800605e <_dtoa_r+0xc6>
 8006058:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800605a:	4b84      	ldr	r3, [pc, #528]	@ (800626c <_dtoa_r+0x2d4>)
 800605c:	6013      	str	r3, [r2, #0]
 800605e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006280 <_dtoa_r+0x2e8>
 8006062:	f000 bd33 	b.w	8006acc <_dtoa_r+0xb34>
 8006066:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800606a:	aa16      	add	r2, sp, #88	@ 0x58
 800606c:	a917      	add	r1, sp, #92	@ 0x5c
 800606e:	4658      	mov	r0, fp
 8006070:	f001 f980 	bl	8007374 <__d2b>
 8006074:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006078:	4681      	mov	r9, r0
 800607a:	2e00      	cmp	r6, #0
 800607c:	d077      	beq.n	800616e <_dtoa_r+0x1d6>
 800607e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006080:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006084:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006088:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800608c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006090:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006094:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006098:	4619      	mov	r1, r3
 800609a:	2200      	movs	r2, #0
 800609c:	4b74      	ldr	r3, [pc, #464]	@ (8006270 <_dtoa_r+0x2d8>)
 800609e:	f7fa f8fb 	bl	8000298 <__aeabi_dsub>
 80060a2:	a369      	add	r3, pc, #420	@ (adr r3, 8006248 <_dtoa_r+0x2b0>)
 80060a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a8:	f7fa faae 	bl	8000608 <__aeabi_dmul>
 80060ac:	a368      	add	r3, pc, #416	@ (adr r3, 8006250 <_dtoa_r+0x2b8>)
 80060ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060b2:	f7fa f8f3 	bl	800029c <__adddf3>
 80060b6:	4604      	mov	r4, r0
 80060b8:	4630      	mov	r0, r6
 80060ba:	460d      	mov	r5, r1
 80060bc:	f7fa fa3a 	bl	8000534 <__aeabi_i2d>
 80060c0:	a365      	add	r3, pc, #404	@ (adr r3, 8006258 <_dtoa_r+0x2c0>)
 80060c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060c6:	f7fa fa9f 	bl	8000608 <__aeabi_dmul>
 80060ca:	4602      	mov	r2, r0
 80060cc:	460b      	mov	r3, r1
 80060ce:	4620      	mov	r0, r4
 80060d0:	4629      	mov	r1, r5
 80060d2:	f7fa f8e3 	bl	800029c <__adddf3>
 80060d6:	4604      	mov	r4, r0
 80060d8:	460d      	mov	r5, r1
 80060da:	f7fa fd45 	bl	8000b68 <__aeabi_d2iz>
 80060de:	2200      	movs	r2, #0
 80060e0:	4607      	mov	r7, r0
 80060e2:	2300      	movs	r3, #0
 80060e4:	4620      	mov	r0, r4
 80060e6:	4629      	mov	r1, r5
 80060e8:	f7fa fd00 	bl	8000aec <__aeabi_dcmplt>
 80060ec:	b140      	cbz	r0, 8006100 <_dtoa_r+0x168>
 80060ee:	4638      	mov	r0, r7
 80060f0:	f7fa fa20 	bl	8000534 <__aeabi_i2d>
 80060f4:	4622      	mov	r2, r4
 80060f6:	462b      	mov	r3, r5
 80060f8:	f7fa fcee 	bl	8000ad8 <__aeabi_dcmpeq>
 80060fc:	b900      	cbnz	r0, 8006100 <_dtoa_r+0x168>
 80060fe:	3f01      	subs	r7, #1
 8006100:	2f16      	cmp	r7, #22
 8006102:	d851      	bhi.n	80061a8 <_dtoa_r+0x210>
 8006104:	4b5b      	ldr	r3, [pc, #364]	@ (8006274 <_dtoa_r+0x2dc>)
 8006106:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800610a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800610e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006112:	f7fa fceb 	bl	8000aec <__aeabi_dcmplt>
 8006116:	2800      	cmp	r0, #0
 8006118:	d048      	beq.n	80061ac <_dtoa_r+0x214>
 800611a:	3f01      	subs	r7, #1
 800611c:	2300      	movs	r3, #0
 800611e:	9312      	str	r3, [sp, #72]	@ 0x48
 8006120:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006122:	1b9b      	subs	r3, r3, r6
 8006124:	1e5a      	subs	r2, r3, #1
 8006126:	bf44      	itt	mi
 8006128:	f1c3 0801 	rsbmi	r8, r3, #1
 800612c:	2300      	movmi	r3, #0
 800612e:	9208      	str	r2, [sp, #32]
 8006130:	bf54      	ite	pl
 8006132:	f04f 0800 	movpl.w	r8, #0
 8006136:	9308      	strmi	r3, [sp, #32]
 8006138:	2f00      	cmp	r7, #0
 800613a:	db39      	blt.n	80061b0 <_dtoa_r+0x218>
 800613c:	9b08      	ldr	r3, [sp, #32]
 800613e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006140:	443b      	add	r3, r7
 8006142:	9308      	str	r3, [sp, #32]
 8006144:	2300      	movs	r3, #0
 8006146:	930a      	str	r3, [sp, #40]	@ 0x28
 8006148:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800614a:	2b09      	cmp	r3, #9
 800614c:	d864      	bhi.n	8006218 <_dtoa_r+0x280>
 800614e:	2b05      	cmp	r3, #5
 8006150:	bfc4      	itt	gt
 8006152:	3b04      	subgt	r3, #4
 8006154:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8006156:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006158:	f1a3 0302 	sub.w	r3, r3, #2
 800615c:	bfcc      	ite	gt
 800615e:	2400      	movgt	r4, #0
 8006160:	2401      	movle	r4, #1
 8006162:	2b03      	cmp	r3, #3
 8006164:	d863      	bhi.n	800622e <_dtoa_r+0x296>
 8006166:	e8df f003 	tbb	[pc, r3]
 800616a:	372a      	.short	0x372a
 800616c:	5535      	.short	0x5535
 800616e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8006172:	441e      	add	r6, r3
 8006174:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006178:	2b20      	cmp	r3, #32
 800617a:	bfc1      	itttt	gt
 800617c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006180:	409f      	lslgt	r7, r3
 8006182:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006186:	fa24 f303 	lsrgt.w	r3, r4, r3
 800618a:	bfd6      	itet	le
 800618c:	f1c3 0320 	rsble	r3, r3, #32
 8006190:	ea47 0003 	orrgt.w	r0, r7, r3
 8006194:	fa04 f003 	lslle.w	r0, r4, r3
 8006198:	f7fa f9bc 	bl	8000514 <__aeabi_ui2d>
 800619c:	2201      	movs	r2, #1
 800619e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80061a2:	3e01      	subs	r6, #1
 80061a4:	9214      	str	r2, [sp, #80]	@ 0x50
 80061a6:	e777      	b.n	8006098 <_dtoa_r+0x100>
 80061a8:	2301      	movs	r3, #1
 80061aa:	e7b8      	b.n	800611e <_dtoa_r+0x186>
 80061ac:	9012      	str	r0, [sp, #72]	@ 0x48
 80061ae:	e7b7      	b.n	8006120 <_dtoa_r+0x188>
 80061b0:	427b      	negs	r3, r7
 80061b2:	930a      	str	r3, [sp, #40]	@ 0x28
 80061b4:	2300      	movs	r3, #0
 80061b6:	eba8 0807 	sub.w	r8, r8, r7
 80061ba:	930f      	str	r3, [sp, #60]	@ 0x3c
 80061bc:	e7c4      	b.n	8006148 <_dtoa_r+0x1b0>
 80061be:	2300      	movs	r3, #0
 80061c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80061c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	dc35      	bgt.n	8006234 <_dtoa_r+0x29c>
 80061c8:	2301      	movs	r3, #1
 80061ca:	9300      	str	r3, [sp, #0]
 80061cc:	9307      	str	r3, [sp, #28]
 80061ce:	461a      	mov	r2, r3
 80061d0:	920e      	str	r2, [sp, #56]	@ 0x38
 80061d2:	e00b      	b.n	80061ec <_dtoa_r+0x254>
 80061d4:	2301      	movs	r3, #1
 80061d6:	e7f3      	b.n	80061c0 <_dtoa_r+0x228>
 80061d8:	2300      	movs	r3, #0
 80061da:	930b      	str	r3, [sp, #44]	@ 0x2c
 80061dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80061de:	18fb      	adds	r3, r7, r3
 80061e0:	9300      	str	r3, [sp, #0]
 80061e2:	3301      	adds	r3, #1
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	9307      	str	r3, [sp, #28]
 80061e8:	bfb8      	it	lt
 80061ea:	2301      	movlt	r3, #1
 80061ec:	f8db 001c 	ldr.w	r0, [fp, #28]
 80061f0:	2100      	movs	r1, #0
 80061f2:	2204      	movs	r2, #4
 80061f4:	f102 0514 	add.w	r5, r2, #20
 80061f8:	429d      	cmp	r5, r3
 80061fa:	d91f      	bls.n	800623c <_dtoa_r+0x2a4>
 80061fc:	6041      	str	r1, [r0, #4]
 80061fe:	4658      	mov	r0, fp
 8006200:	f000 fd8e 	bl	8006d20 <_Balloc>
 8006204:	4682      	mov	sl, r0
 8006206:	2800      	cmp	r0, #0
 8006208:	d13c      	bne.n	8006284 <_dtoa_r+0x2ec>
 800620a:	4b1b      	ldr	r3, [pc, #108]	@ (8006278 <_dtoa_r+0x2e0>)
 800620c:	4602      	mov	r2, r0
 800620e:	f240 11af 	movw	r1, #431	@ 0x1af
 8006212:	e6d8      	b.n	8005fc6 <_dtoa_r+0x2e>
 8006214:	2301      	movs	r3, #1
 8006216:	e7e0      	b.n	80061da <_dtoa_r+0x242>
 8006218:	2401      	movs	r4, #1
 800621a:	2300      	movs	r3, #0
 800621c:	9309      	str	r3, [sp, #36]	@ 0x24
 800621e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006220:	f04f 33ff 	mov.w	r3, #4294967295
 8006224:	9300      	str	r3, [sp, #0]
 8006226:	9307      	str	r3, [sp, #28]
 8006228:	2200      	movs	r2, #0
 800622a:	2312      	movs	r3, #18
 800622c:	e7d0      	b.n	80061d0 <_dtoa_r+0x238>
 800622e:	2301      	movs	r3, #1
 8006230:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006232:	e7f5      	b.n	8006220 <_dtoa_r+0x288>
 8006234:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006236:	9300      	str	r3, [sp, #0]
 8006238:	9307      	str	r3, [sp, #28]
 800623a:	e7d7      	b.n	80061ec <_dtoa_r+0x254>
 800623c:	3101      	adds	r1, #1
 800623e:	0052      	lsls	r2, r2, #1
 8006240:	e7d8      	b.n	80061f4 <_dtoa_r+0x25c>
 8006242:	bf00      	nop
 8006244:	f3af 8000 	nop.w
 8006248:	636f4361 	.word	0x636f4361
 800624c:	3fd287a7 	.word	0x3fd287a7
 8006250:	8b60c8b3 	.word	0x8b60c8b3
 8006254:	3fc68a28 	.word	0x3fc68a28
 8006258:	509f79fb 	.word	0x509f79fb
 800625c:	3fd34413 	.word	0x3fd34413
 8006260:	08008025 	.word	0x08008025
 8006264:	0800803c 	.word	0x0800803c
 8006268:	7ff00000 	.word	0x7ff00000
 800626c:	08007ff5 	.word	0x08007ff5
 8006270:	3ff80000 	.word	0x3ff80000
 8006274:	08008138 	.word	0x08008138
 8006278:	08008094 	.word	0x08008094
 800627c:	08008021 	.word	0x08008021
 8006280:	08007ff4 	.word	0x08007ff4
 8006284:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006288:	6018      	str	r0, [r3, #0]
 800628a:	9b07      	ldr	r3, [sp, #28]
 800628c:	2b0e      	cmp	r3, #14
 800628e:	f200 80a4 	bhi.w	80063da <_dtoa_r+0x442>
 8006292:	2c00      	cmp	r4, #0
 8006294:	f000 80a1 	beq.w	80063da <_dtoa_r+0x442>
 8006298:	2f00      	cmp	r7, #0
 800629a:	dd33      	ble.n	8006304 <_dtoa_r+0x36c>
 800629c:	4bad      	ldr	r3, [pc, #692]	@ (8006554 <_dtoa_r+0x5bc>)
 800629e:	f007 020f 	and.w	r2, r7, #15
 80062a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80062a6:	ed93 7b00 	vldr	d7, [r3]
 80062aa:	05f8      	lsls	r0, r7, #23
 80062ac:	ed8d 7b04 	vstr	d7, [sp, #16]
 80062b0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80062b4:	d516      	bpl.n	80062e4 <_dtoa_r+0x34c>
 80062b6:	4ba8      	ldr	r3, [pc, #672]	@ (8006558 <_dtoa_r+0x5c0>)
 80062b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80062bc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80062c0:	f7fa facc 	bl	800085c <__aeabi_ddiv>
 80062c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80062c8:	f004 040f 	and.w	r4, r4, #15
 80062cc:	2603      	movs	r6, #3
 80062ce:	4da2      	ldr	r5, [pc, #648]	@ (8006558 <_dtoa_r+0x5c0>)
 80062d0:	b954      	cbnz	r4, 80062e8 <_dtoa_r+0x350>
 80062d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80062d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80062da:	f7fa fabf 	bl	800085c <__aeabi_ddiv>
 80062de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80062e2:	e028      	b.n	8006336 <_dtoa_r+0x39e>
 80062e4:	2602      	movs	r6, #2
 80062e6:	e7f2      	b.n	80062ce <_dtoa_r+0x336>
 80062e8:	07e1      	lsls	r1, r4, #31
 80062ea:	d508      	bpl.n	80062fe <_dtoa_r+0x366>
 80062ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80062f0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80062f4:	f7fa f988 	bl	8000608 <__aeabi_dmul>
 80062f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80062fc:	3601      	adds	r6, #1
 80062fe:	1064      	asrs	r4, r4, #1
 8006300:	3508      	adds	r5, #8
 8006302:	e7e5      	b.n	80062d0 <_dtoa_r+0x338>
 8006304:	f000 80d2 	beq.w	80064ac <_dtoa_r+0x514>
 8006308:	427c      	negs	r4, r7
 800630a:	4b92      	ldr	r3, [pc, #584]	@ (8006554 <_dtoa_r+0x5bc>)
 800630c:	4d92      	ldr	r5, [pc, #584]	@ (8006558 <_dtoa_r+0x5c0>)
 800630e:	f004 020f 	and.w	r2, r4, #15
 8006312:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800631a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800631e:	f7fa f973 	bl	8000608 <__aeabi_dmul>
 8006322:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006326:	1124      	asrs	r4, r4, #4
 8006328:	2300      	movs	r3, #0
 800632a:	2602      	movs	r6, #2
 800632c:	2c00      	cmp	r4, #0
 800632e:	f040 80b2 	bne.w	8006496 <_dtoa_r+0x4fe>
 8006332:	2b00      	cmp	r3, #0
 8006334:	d1d3      	bne.n	80062de <_dtoa_r+0x346>
 8006336:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006338:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800633c:	2b00      	cmp	r3, #0
 800633e:	f000 80b7 	beq.w	80064b0 <_dtoa_r+0x518>
 8006342:	4b86      	ldr	r3, [pc, #536]	@ (800655c <_dtoa_r+0x5c4>)
 8006344:	2200      	movs	r2, #0
 8006346:	4620      	mov	r0, r4
 8006348:	4629      	mov	r1, r5
 800634a:	f7fa fbcf 	bl	8000aec <__aeabi_dcmplt>
 800634e:	2800      	cmp	r0, #0
 8006350:	f000 80ae 	beq.w	80064b0 <_dtoa_r+0x518>
 8006354:	9b07      	ldr	r3, [sp, #28]
 8006356:	2b00      	cmp	r3, #0
 8006358:	f000 80aa 	beq.w	80064b0 <_dtoa_r+0x518>
 800635c:	9b00      	ldr	r3, [sp, #0]
 800635e:	2b00      	cmp	r3, #0
 8006360:	dd37      	ble.n	80063d2 <_dtoa_r+0x43a>
 8006362:	1e7b      	subs	r3, r7, #1
 8006364:	9304      	str	r3, [sp, #16]
 8006366:	4620      	mov	r0, r4
 8006368:	4b7d      	ldr	r3, [pc, #500]	@ (8006560 <_dtoa_r+0x5c8>)
 800636a:	2200      	movs	r2, #0
 800636c:	4629      	mov	r1, r5
 800636e:	f7fa f94b 	bl	8000608 <__aeabi_dmul>
 8006372:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006376:	9c00      	ldr	r4, [sp, #0]
 8006378:	3601      	adds	r6, #1
 800637a:	4630      	mov	r0, r6
 800637c:	f7fa f8da 	bl	8000534 <__aeabi_i2d>
 8006380:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006384:	f7fa f940 	bl	8000608 <__aeabi_dmul>
 8006388:	4b76      	ldr	r3, [pc, #472]	@ (8006564 <_dtoa_r+0x5cc>)
 800638a:	2200      	movs	r2, #0
 800638c:	f7f9 ff86 	bl	800029c <__adddf3>
 8006390:	4605      	mov	r5, r0
 8006392:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006396:	2c00      	cmp	r4, #0
 8006398:	f040 808d 	bne.w	80064b6 <_dtoa_r+0x51e>
 800639c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80063a0:	4b71      	ldr	r3, [pc, #452]	@ (8006568 <_dtoa_r+0x5d0>)
 80063a2:	2200      	movs	r2, #0
 80063a4:	f7f9 ff78 	bl	8000298 <__aeabi_dsub>
 80063a8:	4602      	mov	r2, r0
 80063aa:	460b      	mov	r3, r1
 80063ac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80063b0:	462a      	mov	r2, r5
 80063b2:	4633      	mov	r3, r6
 80063b4:	f7fa fbb8 	bl	8000b28 <__aeabi_dcmpgt>
 80063b8:	2800      	cmp	r0, #0
 80063ba:	f040 828b 	bne.w	80068d4 <_dtoa_r+0x93c>
 80063be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80063c2:	462a      	mov	r2, r5
 80063c4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80063c8:	f7fa fb90 	bl	8000aec <__aeabi_dcmplt>
 80063cc:	2800      	cmp	r0, #0
 80063ce:	f040 8128 	bne.w	8006622 <_dtoa_r+0x68a>
 80063d2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80063d6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80063da:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80063dc:	2b00      	cmp	r3, #0
 80063de:	f2c0 815a 	blt.w	8006696 <_dtoa_r+0x6fe>
 80063e2:	2f0e      	cmp	r7, #14
 80063e4:	f300 8157 	bgt.w	8006696 <_dtoa_r+0x6fe>
 80063e8:	4b5a      	ldr	r3, [pc, #360]	@ (8006554 <_dtoa_r+0x5bc>)
 80063ea:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80063ee:	ed93 7b00 	vldr	d7, [r3]
 80063f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	ed8d 7b00 	vstr	d7, [sp]
 80063fa:	da03      	bge.n	8006404 <_dtoa_r+0x46c>
 80063fc:	9b07      	ldr	r3, [sp, #28]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	f340 8101 	ble.w	8006606 <_dtoa_r+0x66e>
 8006404:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006408:	4656      	mov	r6, sl
 800640a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800640e:	4620      	mov	r0, r4
 8006410:	4629      	mov	r1, r5
 8006412:	f7fa fa23 	bl	800085c <__aeabi_ddiv>
 8006416:	f7fa fba7 	bl	8000b68 <__aeabi_d2iz>
 800641a:	4680      	mov	r8, r0
 800641c:	f7fa f88a 	bl	8000534 <__aeabi_i2d>
 8006420:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006424:	f7fa f8f0 	bl	8000608 <__aeabi_dmul>
 8006428:	4602      	mov	r2, r0
 800642a:	460b      	mov	r3, r1
 800642c:	4620      	mov	r0, r4
 800642e:	4629      	mov	r1, r5
 8006430:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006434:	f7f9 ff30 	bl	8000298 <__aeabi_dsub>
 8006438:	f806 4b01 	strb.w	r4, [r6], #1
 800643c:	9d07      	ldr	r5, [sp, #28]
 800643e:	eba6 040a 	sub.w	r4, r6, sl
 8006442:	42a5      	cmp	r5, r4
 8006444:	4602      	mov	r2, r0
 8006446:	460b      	mov	r3, r1
 8006448:	f040 8117 	bne.w	800667a <_dtoa_r+0x6e2>
 800644c:	f7f9 ff26 	bl	800029c <__adddf3>
 8006450:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006454:	4604      	mov	r4, r0
 8006456:	460d      	mov	r5, r1
 8006458:	f7fa fb66 	bl	8000b28 <__aeabi_dcmpgt>
 800645c:	2800      	cmp	r0, #0
 800645e:	f040 80f9 	bne.w	8006654 <_dtoa_r+0x6bc>
 8006462:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006466:	4620      	mov	r0, r4
 8006468:	4629      	mov	r1, r5
 800646a:	f7fa fb35 	bl	8000ad8 <__aeabi_dcmpeq>
 800646e:	b118      	cbz	r0, 8006478 <_dtoa_r+0x4e0>
 8006470:	f018 0f01 	tst.w	r8, #1
 8006474:	f040 80ee 	bne.w	8006654 <_dtoa_r+0x6bc>
 8006478:	4649      	mov	r1, r9
 800647a:	4658      	mov	r0, fp
 800647c:	f000 fc90 	bl	8006da0 <_Bfree>
 8006480:	2300      	movs	r3, #0
 8006482:	7033      	strb	r3, [r6, #0]
 8006484:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006486:	3701      	adds	r7, #1
 8006488:	601f      	str	r7, [r3, #0]
 800648a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800648c:	2b00      	cmp	r3, #0
 800648e:	f000 831d 	beq.w	8006acc <_dtoa_r+0xb34>
 8006492:	601e      	str	r6, [r3, #0]
 8006494:	e31a      	b.n	8006acc <_dtoa_r+0xb34>
 8006496:	07e2      	lsls	r2, r4, #31
 8006498:	d505      	bpl.n	80064a6 <_dtoa_r+0x50e>
 800649a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800649e:	f7fa f8b3 	bl	8000608 <__aeabi_dmul>
 80064a2:	3601      	adds	r6, #1
 80064a4:	2301      	movs	r3, #1
 80064a6:	1064      	asrs	r4, r4, #1
 80064a8:	3508      	adds	r5, #8
 80064aa:	e73f      	b.n	800632c <_dtoa_r+0x394>
 80064ac:	2602      	movs	r6, #2
 80064ae:	e742      	b.n	8006336 <_dtoa_r+0x39e>
 80064b0:	9c07      	ldr	r4, [sp, #28]
 80064b2:	9704      	str	r7, [sp, #16]
 80064b4:	e761      	b.n	800637a <_dtoa_r+0x3e2>
 80064b6:	4b27      	ldr	r3, [pc, #156]	@ (8006554 <_dtoa_r+0x5bc>)
 80064b8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80064ba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80064be:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80064c2:	4454      	add	r4, sl
 80064c4:	2900      	cmp	r1, #0
 80064c6:	d053      	beq.n	8006570 <_dtoa_r+0x5d8>
 80064c8:	4928      	ldr	r1, [pc, #160]	@ (800656c <_dtoa_r+0x5d4>)
 80064ca:	2000      	movs	r0, #0
 80064cc:	f7fa f9c6 	bl	800085c <__aeabi_ddiv>
 80064d0:	4633      	mov	r3, r6
 80064d2:	462a      	mov	r2, r5
 80064d4:	f7f9 fee0 	bl	8000298 <__aeabi_dsub>
 80064d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80064dc:	4656      	mov	r6, sl
 80064de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064e2:	f7fa fb41 	bl	8000b68 <__aeabi_d2iz>
 80064e6:	4605      	mov	r5, r0
 80064e8:	f7fa f824 	bl	8000534 <__aeabi_i2d>
 80064ec:	4602      	mov	r2, r0
 80064ee:	460b      	mov	r3, r1
 80064f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064f4:	f7f9 fed0 	bl	8000298 <__aeabi_dsub>
 80064f8:	3530      	adds	r5, #48	@ 0x30
 80064fa:	4602      	mov	r2, r0
 80064fc:	460b      	mov	r3, r1
 80064fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006502:	f806 5b01 	strb.w	r5, [r6], #1
 8006506:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800650a:	f7fa faef 	bl	8000aec <__aeabi_dcmplt>
 800650e:	2800      	cmp	r0, #0
 8006510:	d171      	bne.n	80065f6 <_dtoa_r+0x65e>
 8006512:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006516:	4911      	ldr	r1, [pc, #68]	@ (800655c <_dtoa_r+0x5c4>)
 8006518:	2000      	movs	r0, #0
 800651a:	f7f9 febd 	bl	8000298 <__aeabi_dsub>
 800651e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006522:	f7fa fae3 	bl	8000aec <__aeabi_dcmplt>
 8006526:	2800      	cmp	r0, #0
 8006528:	f040 8095 	bne.w	8006656 <_dtoa_r+0x6be>
 800652c:	42a6      	cmp	r6, r4
 800652e:	f43f af50 	beq.w	80063d2 <_dtoa_r+0x43a>
 8006532:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006536:	4b0a      	ldr	r3, [pc, #40]	@ (8006560 <_dtoa_r+0x5c8>)
 8006538:	2200      	movs	r2, #0
 800653a:	f7fa f865 	bl	8000608 <__aeabi_dmul>
 800653e:	4b08      	ldr	r3, [pc, #32]	@ (8006560 <_dtoa_r+0x5c8>)
 8006540:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006544:	2200      	movs	r2, #0
 8006546:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800654a:	f7fa f85d 	bl	8000608 <__aeabi_dmul>
 800654e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006552:	e7c4      	b.n	80064de <_dtoa_r+0x546>
 8006554:	08008138 	.word	0x08008138
 8006558:	08008110 	.word	0x08008110
 800655c:	3ff00000 	.word	0x3ff00000
 8006560:	40240000 	.word	0x40240000
 8006564:	401c0000 	.word	0x401c0000
 8006568:	40140000 	.word	0x40140000
 800656c:	3fe00000 	.word	0x3fe00000
 8006570:	4631      	mov	r1, r6
 8006572:	4628      	mov	r0, r5
 8006574:	f7fa f848 	bl	8000608 <__aeabi_dmul>
 8006578:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800657c:	9415      	str	r4, [sp, #84]	@ 0x54
 800657e:	4656      	mov	r6, sl
 8006580:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006584:	f7fa faf0 	bl	8000b68 <__aeabi_d2iz>
 8006588:	4605      	mov	r5, r0
 800658a:	f7f9 ffd3 	bl	8000534 <__aeabi_i2d>
 800658e:	4602      	mov	r2, r0
 8006590:	460b      	mov	r3, r1
 8006592:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006596:	f7f9 fe7f 	bl	8000298 <__aeabi_dsub>
 800659a:	3530      	adds	r5, #48	@ 0x30
 800659c:	f806 5b01 	strb.w	r5, [r6], #1
 80065a0:	4602      	mov	r2, r0
 80065a2:	460b      	mov	r3, r1
 80065a4:	42a6      	cmp	r6, r4
 80065a6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80065aa:	f04f 0200 	mov.w	r2, #0
 80065ae:	d124      	bne.n	80065fa <_dtoa_r+0x662>
 80065b0:	4bac      	ldr	r3, [pc, #688]	@ (8006864 <_dtoa_r+0x8cc>)
 80065b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80065b6:	f7f9 fe71 	bl	800029c <__adddf3>
 80065ba:	4602      	mov	r2, r0
 80065bc:	460b      	mov	r3, r1
 80065be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065c2:	f7fa fab1 	bl	8000b28 <__aeabi_dcmpgt>
 80065c6:	2800      	cmp	r0, #0
 80065c8:	d145      	bne.n	8006656 <_dtoa_r+0x6be>
 80065ca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80065ce:	49a5      	ldr	r1, [pc, #660]	@ (8006864 <_dtoa_r+0x8cc>)
 80065d0:	2000      	movs	r0, #0
 80065d2:	f7f9 fe61 	bl	8000298 <__aeabi_dsub>
 80065d6:	4602      	mov	r2, r0
 80065d8:	460b      	mov	r3, r1
 80065da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065de:	f7fa fa85 	bl	8000aec <__aeabi_dcmplt>
 80065e2:	2800      	cmp	r0, #0
 80065e4:	f43f aef5 	beq.w	80063d2 <_dtoa_r+0x43a>
 80065e8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80065ea:	1e73      	subs	r3, r6, #1
 80065ec:	9315      	str	r3, [sp, #84]	@ 0x54
 80065ee:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80065f2:	2b30      	cmp	r3, #48	@ 0x30
 80065f4:	d0f8      	beq.n	80065e8 <_dtoa_r+0x650>
 80065f6:	9f04      	ldr	r7, [sp, #16]
 80065f8:	e73e      	b.n	8006478 <_dtoa_r+0x4e0>
 80065fa:	4b9b      	ldr	r3, [pc, #620]	@ (8006868 <_dtoa_r+0x8d0>)
 80065fc:	f7fa f804 	bl	8000608 <__aeabi_dmul>
 8006600:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006604:	e7bc      	b.n	8006580 <_dtoa_r+0x5e8>
 8006606:	d10c      	bne.n	8006622 <_dtoa_r+0x68a>
 8006608:	4b98      	ldr	r3, [pc, #608]	@ (800686c <_dtoa_r+0x8d4>)
 800660a:	2200      	movs	r2, #0
 800660c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006610:	f7f9 fffa 	bl	8000608 <__aeabi_dmul>
 8006614:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006618:	f7fa fa7c 	bl	8000b14 <__aeabi_dcmpge>
 800661c:	2800      	cmp	r0, #0
 800661e:	f000 8157 	beq.w	80068d0 <_dtoa_r+0x938>
 8006622:	2400      	movs	r4, #0
 8006624:	4625      	mov	r5, r4
 8006626:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006628:	43db      	mvns	r3, r3
 800662a:	9304      	str	r3, [sp, #16]
 800662c:	4656      	mov	r6, sl
 800662e:	2700      	movs	r7, #0
 8006630:	4621      	mov	r1, r4
 8006632:	4658      	mov	r0, fp
 8006634:	f000 fbb4 	bl	8006da0 <_Bfree>
 8006638:	2d00      	cmp	r5, #0
 800663a:	d0dc      	beq.n	80065f6 <_dtoa_r+0x65e>
 800663c:	b12f      	cbz	r7, 800664a <_dtoa_r+0x6b2>
 800663e:	42af      	cmp	r7, r5
 8006640:	d003      	beq.n	800664a <_dtoa_r+0x6b2>
 8006642:	4639      	mov	r1, r7
 8006644:	4658      	mov	r0, fp
 8006646:	f000 fbab 	bl	8006da0 <_Bfree>
 800664a:	4629      	mov	r1, r5
 800664c:	4658      	mov	r0, fp
 800664e:	f000 fba7 	bl	8006da0 <_Bfree>
 8006652:	e7d0      	b.n	80065f6 <_dtoa_r+0x65e>
 8006654:	9704      	str	r7, [sp, #16]
 8006656:	4633      	mov	r3, r6
 8006658:	461e      	mov	r6, r3
 800665a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800665e:	2a39      	cmp	r2, #57	@ 0x39
 8006660:	d107      	bne.n	8006672 <_dtoa_r+0x6da>
 8006662:	459a      	cmp	sl, r3
 8006664:	d1f8      	bne.n	8006658 <_dtoa_r+0x6c0>
 8006666:	9a04      	ldr	r2, [sp, #16]
 8006668:	3201      	adds	r2, #1
 800666a:	9204      	str	r2, [sp, #16]
 800666c:	2230      	movs	r2, #48	@ 0x30
 800666e:	f88a 2000 	strb.w	r2, [sl]
 8006672:	781a      	ldrb	r2, [r3, #0]
 8006674:	3201      	adds	r2, #1
 8006676:	701a      	strb	r2, [r3, #0]
 8006678:	e7bd      	b.n	80065f6 <_dtoa_r+0x65e>
 800667a:	4b7b      	ldr	r3, [pc, #492]	@ (8006868 <_dtoa_r+0x8d0>)
 800667c:	2200      	movs	r2, #0
 800667e:	f7f9 ffc3 	bl	8000608 <__aeabi_dmul>
 8006682:	2200      	movs	r2, #0
 8006684:	2300      	movs	r3, #0
 8006686:	4604      	mov	r4, r0
 8006688:	460d      	mov	r5, r1
 800668a:	f7fa fa25 	bl	8000ad8 <__aeabi_dcmpeq>
 800668e:	2800      	cmp	r0, #0
 8006690:	f43f aebb 	beq.w	800640a <_dtoa_r+0x472>
 8006694:	e6f0      	b.n	8006478 <_dtoa_r+0x4e0>
 8006696:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006698:	2a00      	cmp	r2, #0
 800669a:	f000 80db 	beq.w	8006854 <_dtoa_r+0x8bc>
 800669e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80066a0:	2a01      	cmp	r2, #1
 80066a2:	f300 80bf 	bgt.w	8006824 <_dtoa_r+0x88c>
 80066a6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80066a8:	2a00      	cmp	r2, #0
 80066aa:	f000 80b7 	beq.w	800681c <_dtoa_r+0x884>
 80066ae:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80066b2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80066b4:	4646      	mov	r6, r8
 80066b6:	9a08      	ldr	r2, [sp, #32]
 80066b8:	2101      	movs	r1, #1
 80066ba:	441a      	add	r2, r3
 80066bc:	4658      	mov	r0, fp
 80066be:	4498      	add	r8, r3
 80066c0:	9208      	str	r2, [sp, #32]
 80066c2:	f000 fc21 	bl	8006f08 <__i2b>
 80066c6:	4605      	mov	r5, r0
 80066c8:	b15e      	cbz	r6, 80066e2 <_dtoa_r+0x74a>
 80066ca:	9b08      	ldr	r3, [sp, #32]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	dd08      	ble.n	80066e2 <_dtoa_r+0x74a>
 80066d0:	42b3      	cmp	r3, r6
 80066d2:	9a08      	ldr	r2, [sp, #32]
 80066d4:	bfa8      	it	ge
 80066d6:	4633      	movge	r3, r6
 80066d8:	eba8 0803 	sub.w	r8, r8, r3
 80066dc:	1af6      	subs	r6, r6, r3
 80066de:	1ad3      	subs	r3, r2, r3
 80066e0:	9308      	str	r3, [sp, #32]
 80066e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80066e4:	b1f3      	cbz	r3, 8006724 <_dtoa_r+0x78c>
 80066e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	f000 80b7 	beq.w	800685c <_dtoa_r+0x8c4>
 80066ee:	b18c      	cbz	r4, 8006714 <_dtoa_r+0x77c>
 80066f0:	4629      	mov	r1, r5
 80066f2:	4622      	mov	r2, r4
 80066f4:	4658      	mov	r0, fp
 80066f6:	f000 fcc7 	bl	8007088 <__pow5mult>
 80066fa:	464a      	mov	r2, r9
 80066fc:	4601      	mov	r1, r0
 80066fe:	4605      	mov	r5, r0
 8006700:	4658      	mov	r0, fp
 8006702:	f000 fc17 	bl	8006f34 <__multiply>
 8006706:	4649      	mov	r1, r9
 8006708:	9004      	str	r0, [sp, #16]
 800670a:	4658      	mov	r0, fp
 800670c:	f000 fb48 	bl	8006da0 <_Bfree>
 8006710:	9b04      	ldr	r3, [sp, #16]
 8006712:	4699      	mov	r9, r3
 8006714:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006716:	1b1a      	subs	r2, r3, r4
 8006718:	d004      	beq.n	8006724 <_dtoa_r+0x78c>
 800671a:	4649      	mov	r1, r9
 800671c:	4658      	mov	r0, fp
 800671e:	f000 fcb3 	bl	8007088 <__pow5mult>
 8006722:	4681      	mov	r9, r0
 8006724:	2101      	movs	r1, #1
 8006726:	4658      	mov	r0, fp
 8006728:	f000 fbee 	bl	8006f08 <__i2b>
 800672c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800672e:	4604      	mov	r4, r0
 8006730:	2b00      	cmp	r3, #0
 8006732:	f000 81cf 	beq.w	8006ad4 <_dtoa_r+0xb3c>
 8006736:	461a      	mov	r2, r3
 8006738:	4601      	mov	r1, r0
 800673a:	4658      	mov	r0, fp
 800673c:	f000 fca4 	bl	8007088 <__pow5mult>
 8006740:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006742:	2b01      	cmp	r3, #1
 8006744:	4604      	mov	r4, r0
 8006746:	f300 8095 	bgt.w	8006874 <_dtoa_r+0x8dc>
 800674a:	9b02      	ldr	r3, [sp, #8]
 800674c:	2b00      	cmp	r3, #0
 800674e:	f040 8087 	bne.w	8006860 <_dtoa_r+0x8c8>
 8006752:	9b03      	ldr	r3, [sp, #12]
 8006754:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006758:	2b00      	cmp	r3, #0
 800675a:	f040 8089 	bne.w	8006870 <_dtoa_r+0x8d8>
 800675e:	9b03      	ldr	r3, [sp, #12]
 8006760:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006764:	0d1b      	lsrs	r3, r3, #20
 8006766:	051b      	lsls	r3, r3, #20
 8006768:	b12b      	cbz	r3, 8006776 <_dtoa_r+0x7de>
 800676a:	9b08      	ldr	r3, [sp, #32]
 800676c:	3301      	adds	r3, #1
 800676e:	9308      	str	r3, [sp, #32]
 8006770:	f108 0801 	add.w	r8, r8, #1
 8006774:	2301      	movs	r3, #1
 8006776:	930a      	str	r3, [sp, #40]	@ 0x28
 8006778:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800677a:	2b00      	cmp	r3, #0
 800677c:	f000 81b0 	beq.w	8006ae0 <_dtoa_r+0xb48>
 8006780:	6923      	ldr	r3, [r4, #16]
 8006782:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006786:	6918      	ldr	r0, [r3, #16]
 8006788:	f000 fb72 	bl	8006e70 <__hi0bits>
 800678c:	f1c0 0020 	rsb	r0, r0, #32
 8006790:	9b08      	ldr	r3, [sp, #32]
 8006792:	4418      	add	r0, r3
 8006794:	f010 001f 	ands.w	r0, r0, #31
 8006798:	d077      	beq.n	800688a <_dtoa_r+0x8f2>
 800679a:	f1c0 0320 	rsb	r3, r0, #32
 800679e:	2b04      	cmp	r3, #4
 80067a0:	dd6b      	ble.n	800687a <_dtoa_r+0x8e2>
 80067a2:	9b08      	ldr	r3, [sp, #32]
 80067a4:	f1c0 001c 	rsb	r0, r0, #28
 80067a8:	4403      	add	r3, r0
 80067aa:	4480      	add	r8, r0
 80067ac:	4406      	add	r6, r0
 80067ae:	9308      	str	r3, [sp, #32]
 80067b0:	f1b8 0f00 	cmp.w	r8, #0
 80067b4:	dd05      	ble.n	80067c2 <_dtoa_r+0x82a>
 80067b6:	4649      	mov	r1, r9
 80067b8:	4642      	mov	r2, r8
 80067ba:	4658      	mov	r0, fp
 80067bc:	f000 fcbe 	bl	800713c <__lshift>
 80067c0:	4681      	mov	r9, r0
 80067c2:	9b08      	ldr	r3, [sp, #32]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	dd05      	ble.n	80067d4 <_dtoa_r+0x83c>
 80067c8:	4621      	mov	r1, r4
 80067ca:	461a      	mov	r2, r3
 80067cc:	4658      	mov	r0, fp
 80067ce:	f000 fcb5 	bl	800713c <__lshift>
 80067d2:	4604      	mov	r4, r0
 80067d4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d059      	beq.n	800688e <_dtoa_r+0x8f6>
 80067da:	4621      	mov	r1, r4
 80067dc:	4648      	mov	r0, r9
 80067de:	f000 fd19 	bl	8007214 <__mcmp>
 80067e2:	2800      	cmp	r0, #0
 80067e4:	da53      	bge.n	800688e <_dtoa_r+0x8f6>
 80067e6:	1e7b      	subs	r3, r7, #1
 80067e8:	9304      	str	r3, [sp, #16]
 80067ea:	4649      	mov	r1, r9
 80067ec:	2300      	movs	r3, #0
 80067ee:	220a      	movs	r2, #10
 80067f0:	4658      	mov	r0, fp
 80067f2:	f000 faf7 	bl	8006de4 <__multadd>
 80067f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80067f8:	4681      	mov	r9, r0
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	f000 8172 	beq.w	8006ae4 <_dtoa_r+0xb4c>
 8006800:	2300      	movs	r3, #0
 8006802:	4629      	mov	r1, r5
 8006804:	220a      	movs	r2, #10
 8006806:	4658      	mov	r0, fp
 8006808:	f000 faec 	bl	8006de4 <__multadd>
 800680c:	9b00      	ldr	r3, [sp, #0]
 800680e:	2b00      	cmp	r3, #0
 8006810:	4605      	mov	r5, r0
 8006812:	dc67      	bgt.n	80068e4 <_dtoa_r+0x94c>
 8006814:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006816:	2b02      	cmp	r3, #2
 8006818:	dc41      	bgt.n	800689e <_dtoa_r+0x906>
 800681a:	e063      	b.n	80068e4 <_dtoa_r+0x94c>
 800681c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800681e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006822:	e746      	b.n	80066b2 <_dtoa_r+0x71a>
 8006824:	9b07      	ldr	r3, [sp, #28]
 8006826:	1e5c      	subs	r4, r3, #1
 8006828:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800682a:	42a3      	cmp	r3, r4
 800682c:	bfbf      	itttt	lt
 800682e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006830:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8006832:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006834:	1ae3      	sublt	r3, r4, r3
 8006836:	bfb4      	ite	lt
 8006838:	18d2      	addlt	r2, r2, r3
 800683a:	1b1c      	subge	r4, r3, r4
 800683c:	9b07      	ldr	r3, [sp, #28]
 800683e:	bfbc      	itt	lt
 8006840:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8006842:	2400      	movlt	r4, #0
 8006844:	2b00      	cmp	r3, #0
 8006846:	bfb5      	itete	lt
 8006848:	eba8 0603 	sublt.w	r6, r8, r3
 800684c:	9b07      	ldrge	r3, [sp, #28]
 800684e:	2300      	movlt	r3, #0
 8006850:	4646      	movge	r6, r8
 8006852:	e730      	b.n	80066b6 <_dtoa_r+0x71e>
 8006854:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006856:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006858:	4646      	mov	r6, r8
 800685a:	e735      	b.n	80066c8 <_dtoa_r+0x730>
 800685c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800685e:	e75c      	b.n	800671a <_dtoa_r+0x782>
 8006860:	2300      	movs	r3, #0
 8006862:	e788      	b.n	8006776 <_dtoa_r+0x7de>
 8006864:	3fe00000 	.word	0x3fe00000
 8006868:	40240000 	.word	0x40240000
 800686c:	40140000 	.word	0x40140000
 8006870:	9b02      	ldr	r3, [sp, #8]
 8006872:	e780      	b.n	8006776 <_dtoa_r+0x7de>
 8006874:	2300      	movs	r3, #0
 8006876:	930a      	str	r3, [sp, #40]	@ 0x28
 8006878:	e782      	b.n	8006780 <_dtoa_r+0x7e8>
 800687a:	d099      	beq.n	80067b0 <_dtoa_r+0x818>
 800687c:	9a08      	ldr	r2, [sp, #32]
 800687e:	331c      	adds	r3, #28
 8006880:	441a      	add	r2, r3
 8006882:	4498      	add	r8, r3
 8006884:	441e      	add	r6, r3
 8006886:	9208      	str	r2, [sp, #32]
 8006888:	e792      	b.n	80067b0 <_dtoa_r+0x818>
 800688a:	4603      	mov	r3, r0
 800688c:	e7f6      	b.n	800687c <_dtoa_r+0x8e4>
 800688e:	9b07      	ldr	r3, [sp, #28]
 8006890:	9704      	str	r7, [sp, #16]
 8006892:	2b00      	cmp	r3, #0
 8006894:	dc20      	bgt.n	80068d8 <_dtoa_r+0x940>
 8006896:	9300      	str	r3, [sp, #0]
 8006898:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800689a:	2b02      	cmp	r3, #2
 800689c:	dd1e      	ble.n	80068dc <_dtoa_r+0x944>
 800689e:	9b00      	ldr	r3, [sp, #0]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	f47f aec0 	bne.w	8006626 <_dtoa_r+0x68e>
 80068a6:	4621      	mov	r1, r4
 80068a8:	2205      	movs	r2, #5
 80068aa:	4658      	mov	r0, fp
 80068ac:	f000 fa9a 	bl	8006de4 <__multadd>
 80068b0:	4601      	mov	r1, r0
 80068b2:	4604      	mov	r4, r0
 80068b4:	4648      	mov	r0, r9
 80068b6:	f000 fcad 	bl	8007214 <__mcmp>
 80068ba:	2800      	cmp	r0, #0
 80068bc:	f77f aeb3 	ble.w	8006626 <_dtoa_r+0x68e>
 80068c0:	4656      	mov	r6, sl
 80068c2:	2331      	movs	r3, #49	@ 0x31
 80068c4:	f806 3b01 	strb.w	r3, [r6], #1
 80068c8:	9b04      	ldr	r3, [sp, #16]
 80068ca:	3301      	adds	r3, #1
 80068cc:	9304      	str	r3, [sp, #16]
 80068ce:	e6ae      	b.n	800662e <_dtoa_r+0x696>
 80068d0:	9c07      	ldr	r4, [sp, #28]
 80068d2:	9704      	str	r7, [sp, #16]
 80068d4:	4625      	mov	r5, r4
 80068d6:	e7f3      	b.n	80068c0 <_dtoa_r+0x928>
 80068d8:	9b07      	ldr	r3, [sp, #28]
 80068da:	9300      	str	r3, [sp, #0]
 80068dc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80068de:	2b00      	cmp	r3, #0
 80068e0:	f000 8104 	beq.w	8006aec <_dtoa_r+0xb54>
 80068e4:	2e00      	cmp	r6, #0
 80068e6:	dd05      	ble.n	80068f4 <_dtoa_r+0x95c>
 80068e8:	4629      	mov	r1, r5
 80068ea:	4632      	mov	r2, r6
 80068ec:	4658      	mov	r0, fp
 80068ee:	f000 fc25 	bl	800713c <__lshift>
 80068f2:	4605      	mov	r5, r0
 80068f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d05a      	beq.n	80069b0 <_dtoa_r+0xa18>
 80068fa:	6869      	ldr	r1, [r5, #4]
 80068fc:	4658      	mov	r0, fp
 80068fe:	f000 fa0f 	bl	8006d20 <_Balloc>
 8006902:	4606      	mov	r6, r0
 8006904:	b928      	cbnz	r0, 8006912 <_dtoa_r+0x97a>
 8006906:	4b84      	ldr	r3, [pc, #528]	@ (8006b18 <_dtoa_r+0xb80>)
 8006908:	4602      	mov	r2, r0
 800690a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800690e:	f7ff bb5a 	b.w	8005fc6 <_dtoa_r+0x2e>
 8006912:	692a      	ldr	r2, [r5, #16]
 8006914:	3202      	adds	r2, #2
 8006916:	0092      	lsls	r2, r2, #2
 8006918:	f105 010c 	add.w	r1, r5, #12
 800691c:	300c      	adds	r0, #12
 800691e:	f000 ffaf 	bl	8007880 <memcpy>
 8006922:	2201      	movs	r2, #1
 8006924:	4631      	mov	r1, r6
 8006926:	4658      	mov	r0, fp
 8006928:	f000 fc08 	bl	800713c <__lshift>
 800692c:	f10a 0301 	add.w	r3, sl, #1
 8006930:	9307      	str	r3, [sp, #28]
 8006932:	9b00      	ldr	r3, [sp, #0]
 8006934:	4453      	add	r3, sl
 8006936:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006938:	9b02      	ldr	r3, [sp, #8]
 800693a:	f003 0301 	and.w	r3, r3, #1
 800693e:	462f      	mov	r7, r5
 8006940:	930a      	str	r3, [sp, #40]	@ 0x28
 8006942:	4605      	mov	r5, r0
 8006944:	9b07      	ldr	r3, [sp, #28]
 8006946:	4621      	mov	r1, r4
 8006948:	3b01      	subs	r3, #1
 800694a:	4648      	mov	r0, r9
 800694c:	9300      	str	r3, [sp, #0]
 800694e:	f7ff fa98 	bl	8005e82 <quorem>
 8006952:	4639      	mov	r1, r7
 8006954:	9002      	str	r0, [sp, #8]
 8006956:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800695a:	4648      	mov	r0, r9
 800695c:	f000 fc5a 	bl	8007214 <__mcmp>
 8006960:	462a      	mov	r2, r5
 8006962:	9008      	str	r0, [sp, #32]
 8006964:	4621      	mov	r1, r4
 8006966:	4658      	mov	r0, fp
 8006968:	f000 fc70 	bl	800724c <__mdiff>
 800696c:	68c2      	ldr	r2, [r0, #12]
 800696e:	4606      	mov	r6, r0
 8006970:	bb02      	cbnz	r2, 80069b4 <_dtoa_r+0xa1c>
 8006972:	4601      	mov	r1, r0
 8006974:	4648      	mov	r0, r9
 8006976:	f000 fc4d 	bl	8007214 <__mcmp>
 800697a:	4602      	mov	r2, r0
 800697c:	4631      	mov	r1, r6
 800697e:	4658      	mov	r0, fp
 8006980:	920e      	str	r2, [sp, #56]	@ 0x38
 8006982:	f000 fa0d 	bl	8006da0 <_Bfree>
 8006986:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006988:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800698a:	9e07      	ldr	r6, [sp, #28]
 800698c:	ea43 0102 	orr.w	r1, r3, r2
 8006990:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006992:	4319      	orrs	r1, r3
 8006994:	d110      	bne.n	80069b8 <_dtoa_r+0xa20>
 8006996:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800699a:	d029      	beq.n	80069f0 <_dtoa_r+0xa58>
 800699c:	9b08      	ldr	r3, [sp, #32]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	dd02      	ble.n	80069a8 <_dtoa_r+0xa10>
 80069a2:	9b02      	ldr	r3, [sp, #8]
 80069a4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80069a8:	9b00      	ldr	r3, [sp, #0]
 80069aa:	f883 8000 	strb.w	r8, [r3]
 80069ae:	e63f      	b.n	8006630 <_dtoa_r+0x698>
 80069b0:	4628      	mov	r0, r5
 80069b2:	e7bb      	b.n	800692c <_dtoa_r+0x994>
 80069b4:	2201      	movs	r2, #1
 80069b6:	e7e1      	b.n	800697c <_dtoa_r+0x9e4>
 80069b8:	9b08      	ldr	r3, [sp, #32]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	db04      	blt.n	80069c8 <_dtoa_r+0xa30>
 80069be:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80069c0:	430b      	orrs	r3, r1
 80069c2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80069c4:	430b      	orrs	r3, r1
 80069c6:	d120      	bne.n	8006a0a <_dtoa_r+0xa72>
 80069c8:	2a00      	cmp	r2, #0
 80069ca:	dded      	ble.n	80069a8 <_dtoa_r+0xa10>
 80069cc:	4649      	mov	r1, r9
 80069ce:	2201      	movs	r2, #1
 80069d0:	4658      	mov	r0, fp
 80069d2:	f000 fbb3 	bl	800713c <__lshift>
 80069d6:	4621      	mov	r1, r4
 80069d8:	4681      	mov	r9, r0
 80069da:	f000 fc1b 	bl	8007214 <__mcmp>
 80069de:	2800      	cmp	r0, #0
 80069e0:	dc03      	bgt.n	80069ea <_dtoa_r+0xa52>
 80069e2:	d1e1      	bne.n	80069a8 <_dtoa_r+0xa10>
 80069e4:	f018 0f01 	tst.w	r8, #1
 80069e8:	d0de      	beq.n	80069a8 <_dtoa_r+0xa10>
 80069ea:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80069ee:	d1d8      	bne.n	80069a2 <_dtoa_r+0xa0a>
 80069f0:	9a00      	ldr	r2, [sp, #0]
 80069f2:	2339      	movs	r3, #57	@ 0x39
 80069f4:	7013      	strb	r3, [r2, #0]
 80069f6:	4633      	mov	r3, r6
 80069f8:	461e      	mov	r6, r3
 80069fa:	3b01      	subs	r3, #1
 80069fc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006a00:	2a39      	cmp	r2, #57	@ 0x39
 8006a02:	d052      	beq.n	8006aaa <_dtoa_r+0xb12>
 8006a04:	3201      	adds	r2, #1
 8006a06:	701a      	strb	r2, [r3, #0]
 8006a08:	e612      	b.n	8006630 <_dtoa_r+0x698>
 8006a0a:	2a00      	cmp	r2, #0
 8006a0c:	dd07      	ble.n	8006a1e <_dtoa_r+0xa86>
 8006a0e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006a12:	d0ed      	beq.n	80069f0 <_dtoa_r+0xa58>
 8006a14:	9a00      	ldr	r2, [sp, #0]
 8006a16:	f108 0301 	add.w	r3, r8, #1
 8006a1a:	7013      	strb	r3, [r2, #0]
 8006a1c:	e608      	b.n	8006630 <_dtoa_r+0x698>
 8006a1e:	9b07      	ldr	r3, [sp, #28]
 8006a20:	9a07      	ldr	r2, [sp, #28]
 8006a22:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006a26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d028      	beq.n	8006a7e <_dtoa_r+0xae6>
 8006a2c:	4649      	mov	r1, r9
 8006a2e:	2300      	movs	r3, #0
 8006a30:	220a      	movs	r2, #10
 8006a32:	4658      	mov	r0, fp
 8006a34:	f000 f9d6 	bl	8006de4 <__multadd>
 8006a38:	42af      	cmp	r7, r5
 8006a3a:	4681      	mov	r9, r0
 8006a3c:	f04f 0300 	mov.w	r3, #0
 8006a40:	f04f 020a 	mov.w	r2, #10
 8006a44:	4639      	mov	r1, r7
 8006a46:	4658      	mov	r0, fp
 8006a48:	d107      	bne.n	8006a5a <_dtoa_r+0xac2>
 8006a4a:	f000 f9cb 	bl	8006de4 <__multadd>
 8006a4e:	4607      	mov	r7, r0
 8006a50:	4605      	mov	r5, r0
 8006a52:	9b07      	ldr	r3, [sp, #28]
 8006a54:	3301      	adds	r3, #1
 8006a56:	9307      	str	r3, [sp, #28]
 8006a58:	e774      	b.n	8006944 <_dtoa_r+0x9ac>
 8006a5a:	f000 f9c3 	bl	8006de4 <__multadd>
 8006a5e:	4629      	mov	r1, r5
 8006a60:	4607      	mov	r7, r0
 8006a62:	2300      	movs	r3, #0
 8006a64:	220a      	movs	r2, #10
 8006a66:	4658      	mov	r0, fp
 8006a68:	f000 f9bc 	bl	8006de4 <__multadd>
 8006a6c:	4605      	mov	r5, r0
 8006a6e:	e7f0      	b.n	8006a52 <_dtoa_r+0xaba>
 8006a70:	9b00      	ldr	r3, [sp, #0]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	bfcc      	ite	gt
 8006a76:	461e      	movgt	r6, r3
 8006a78:	2601      	movle	r6, #1
 8006a7a:	4456      	add	r6, sl
 8006a7c:	2700      	movs	r7, #0
 8006a7e:	4649      	mov	r1, r9
 8006a80:	2201      	movs	r2, #1
 8006a82:	4658      	mov	r0, fp
 8006a84:	f000 fb5a 	bl	800713c <__lshift>
 8006a88:	4621      	mov	r1, r4
 8006a8a:	4681      	mov	r9, r0
 8006a8c:	f000 fbc2 	bl	8007214 <__mcmp>
 8006a90:	2800      	cmp	r0, #0
 8006a92:	dcb0      	bgt.n	80069f6 <_dtoa_r+0xa5e>
 8006a94:	d102      	bne.n	8006a9c <_dtoa_r+0xb04>
 8006a96:	f018 0f01 	tst.w	r8, #1
 8006a9a:	d1ac      	bne.n	80069f6 <_dtoa_r+0xa5e>
 8006a9c:	4633      	mov	r3, r6
 8006a9e:	461e      	mov	r6, r3
 8006aa0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006aa4:	2a30      	cmp	r2, #48	@ 0x30
 8006aa6:	d0fa      	beq.n	8006a9e <_dtoa_r+0xb06>
 8006aa8:	e5c2      	b.n	8006630 <_dtoa_r+0x698>
 8006aaa:	459a      	cmp	sl, r3
 8006aac:	d1a4      	bne.n	80069f8 <_dtoa_r+0xa60>
 8006aae:	9b04      	ldr	r3, [sp, #16]
 8006ab0:	3301      	adds	r3, #1
 8006ab2:	9304      	str	r3, [sp, #16]
 8006ab4:	2331      	movs	r3, #49	@ 0x31
 8006ab6:	f88a 3000 	strb.w	r3, [sl]
 8006aba:	e5b9      	b.n	8006630 <_dtoa_r+0x698>
 8006abc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006abe:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006b1c <_dtoa_r+0xb84>
 8006ac2:	b11b      	cbz	r3, 8006acc <_dtoa_r+0xb34>
 8006ac4:	f10a 0308 	add.w	r3, sl, #8
 8006ac8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006aca:	6013      	str	r3, [r2, #0]
 8006acc:	4650      	mov	r0, sl
 8006ace:	b019      	add	sp, #100	@ 0x64
 8006ad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ad4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ad6:	2b01      	cmp	r3, #1
 8006ad8:	f77f ae37 	ble.w	800674a <_dtoa_r+0x7b2>
 8006adc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006ade:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ae0:	2001      	movs	r0, #1
 8006ae2:	e655      	b.n	8006790 <_dtoa_r+0x7f8>
 8006ae4:	9b00      	ldr	r3, [sp, #0]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	f77f aed6 	ble.w	8006898 <_dtoa_r+0x900>
 8006aec:	4656      	mov	r6, sl
 8006aee:	4621      	mov	r1, r4
 8006af0:	4648      	mov	r0, r9
 8006af2:	f7ff f9c6 	bl	8005e82 <quorem>
 8006af6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006afa:	f806 8b01 	strb.w	r8, [r6], #1
 8006afe:	9b00      	ldr	r3, [sp, #0]
 8006b00:	eba6 020a 	sub.w	r2, r6, sl
 8006b04:	4293      	cmp	r3, r2
 8006b06:	ddb3      	ble.n	8006a70 <_dtoa_r+0xad8>
 8006b08:	4649      	mov	r1, r9
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	220a      	movs	r2, #10
 8006b0e:	4658      	mov	r0, fp
 8006b10:	f000 f968 	bl	8006de4 <__multadd>
 8006b14:	4681      	mov	r9, r0
 8006b16:	e7ea      	b.n	8006aee <_dtoa_r+0xb56>
 8006b18:	08008094 	.word	0x08008094
 8006b1c:	08008018 	.word	0x08008018

08006b20 <_free_r>:
 8006b20:	b538      	push	{r3, r4, r5, lr}
 8006b22:	4605      	mov	r5, r0
 8006b24:	2900      	cmp	r1, #0
 8006b26:	d041      	beq.n	8006bac <_free_r+0x8c>
 8006b28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b2c:	1f0c      	subs	r4, r1, #4
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	bfb8      	it	lt
 8006b32:	18e4      	addlt	r4, r4, r3
 8006b34:	f000 f8e8 	bl	8006d08 <__malloc_lock>
 8006b38:	4a1d      	ldr	r2, [pc, #116]	@ (8006bb0 <_free_r+0x90>)
 8006b3a:	6813      	ldr	r3, [r2, #0]
 8006b3c:	b933      	cbnz	r3, 8006b4c <_free_r+0x2c>
 8006b3e:	6063      	str	r3, [r4, #4]
 8006b40:	6014      	str	r4, [r2, #0]
 8006b42:	4628      	mov	r0, r5
 8006b44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b48:	f000 b8e4 	b.w	8006d14 <__malloc_unlock>
 8006b4c:	42a3      	cmp	r3, r4
 8006b4e:	d908      	bls.n	8006b62 <_free_r+0x42>
 8006b50:	6820      	ldr	r0, [r4, #0]
 8006b52:	1821      	adds	r1, r4, r0
 8006b54:	428b      	cmp	r3, r1
 8006b56:	bf01      	itttt	eq
 8006b58:	6819      	ldreq	r1, [r3, #0]
 8006b5a:	685b      	ldreq	r3, [r3, #4]
 8006b5c:	1809      	addeq	r1, r1, r0
 8006b5e:	6021      	streq	r1, [r4, #0]
 8006b60:	e7ed      	b.n	8006b3e <_free_r+0x1e>
 8006b62:	461a      	mov	r2, r3
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	b10b      	cbz	r3, 8006b6c <_free_r+0x4c>
 8006b68:	42a3      	cmp	r3, r4
 8006b6a:	d9fa      	bls.n	8006b62 <_free_r+0x42>
 8006b6c:	6811      	ldr	r1, [r2, #0]
 8006b6e:	1850      	adds	r0, r2, r1
 8006b70:	42a0      	cmp	r0, r4
 8006b72:	d10b      	bne.n	8006b8c <_free_r+0x6c>
 8006b74:	6820      	ldr	r0, [r4, #0]
 8006b76:	4401      	add	r1, r0
 8006b78:	1850      	adds	r0, r2, r1
 8006b7a:	4283      	cmp	r3, r0
 8006b7c:	6011      	str	r1, [r2, #0]
 8006b7e:	d1e0      	bne.n	8006b42 <_free_r+0x22>
 8006b80:	6818      	ldr	r0, [r3, #0]
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	6053      	str	r3, [r2, #4]
 8006b86:	4408      	add	r0, r1
 8006b88:	6010      	str	r0, [r2, #0]
 8006b8a:	e7da      	b.n	8006b42 <_free_r+0x22>
 8006b8c:	d902      	bls.n	8006b94 <_free_r+0x74>
 8006b8e:	230c      	movs	r3, #12
 8006b90:	602b      	str	r3, [r5, #0]
 8006b92:	e7d6      	b.n	8006b42 <_free_r+0x22>
 8006b94:	6820      	ldr	r0, [r4, #0]
 8006b96:	1821      	adds	r1, r4, r0
 8006b98:	428b      	cmp	r3, r1
 8006b9a:	bf04      	itt	eq
 8006b9c:	6819      	ldreq	r1, [r3, #0]
 8006b9e:	685b      	ldreq	r3, [r3, #4]
 8006ba0:	6063      	str	r3, [r4, #4]
 8006ba2:	bf04      	itt	eq
 8006ba4:	1809      	addeq	r1, r1, r0
 8006ba6:	6021      	streq	r1, [r4, #0]
 8006ba8:	6054      	str	r4, [r2, #4]
 8006baa:	e7ca      	b.n	8006b42 <_free_r+0x22>
 8006bac:	bd38      	pop	{r3, r4, r5, pc}
 8006bae:	bf00      	nop
 8006bb0:	20000474 	.word	0x20000474

08006bb4 <malloc>:
 8006bb4:	4b02      	ldr	r3, [pc, #8]	@ (8006bc0 <malloc+0xc>)
 8006bb6:	4601      	mov	r1, r0
 8006bb8:	6818      	ldr	r0, [r3, #0]
 8006bba:	f000 b825 	b.w	8006c08 <_malloc_r>
 8006bbe:	bf00      	nop
 8006bc0:	20000018 	.word	0x20000018

08006bc4 <sbrk_aligned>:
 8006bc4:	b570      	push	{r4, r5, r6, lr}
 8006bc6:	4e0f      	ldr	r6, [pc, #60]	@ (8006c04 <sbrk_aligned+0x40>)
 8006bc8:	460c      	mov	r4, r1
 8006bca:	6831      	ldr	r1, [r6, #0]
 8006bcc:	4605      	mov	r5, r0
 8006bce:	b911      	cbnz	r1, 8006bd6 <sbrk_aligned+0x12>
 8006bd0:	f000 fe46 	bl	8007860 <_sbrk_r>
 8006bd4:	6030      	str	r0, [r6, #0]
 8006bd6:	4621      	mov	r1, r4
 8006bd8:	4628      	mov	r0, r5
 8006bda:	f000 fe41 	bl	8007860 <_sbrk_r>
 8006bde:	1c43      	adds	r3, r0, #1
 8006be0:	d103      	bne.n	8006bea <sbrk_aligned+0x26>
 8006be2:	f04f 34ff 	mov.w	r4, #4294967295
 8006be6:	4620      	mov	r0, r4
 8006be8:	bd70      	pop	{r4, r5, r6, pc}
 8006bea:	1cc4      	adds	r4, r0, #3
 8006bec:	f024 0403 	bic.w	r4, r4, #3
 8006bf0:	42a0      	cmp	r0, r4
 8006bf2:	d0f8      	beq.n	8006be6 <sbrk_aligned+0x22>
 8006bf4:	1a21      	subs	r1, r4, r0
 8006bf6:	4628      	mov	r0, r5
 8006bf8:	f000 fe32 	bl	8007860 <_sbrk_r>
 8006bfc:	3001      	adds	r0, #1
 8006bfe:	d1f2      	bne.n	8006be6 <sbrk_aligned+0x22>
 8006c00:	e7ef      	b.n	8006be2 <sbrk_aligned+0x1e>
 8006c02:	bf00      	nop
 8006c04:	20000470 	.word	0x20000470

08006c08 <_malloc_r>:
 8006c08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c0c:	1ccd      	adds	r5, r1, #3
 8006c0e:	f025 0503 	bic.w	r5, r5, #3
 8006c12:	3508      	adds	r5, #8
 8006c14:	2d0c      	cmp	r5, #12
 8006c16:	bf38      	it	cc
 8006c18:	250c      	movcc	r5, #12
 8006c1a:	2d00      	cmp	r5, #0
 8006c1c:	4606      	mov	r6, r0
 8006c1e:	db01      	blt.n	8006c24 <_malloc_r+0x1c>
 8006c20:	42a9      	cmp	r1, r5
 8006c22:	d904      	bls.n	8006c2e <_malloc_r+0x26>
 8006c24:	230c      	movs	r3, #12
 8006c26:	6033      	str	r3, [r6, #0]
 8006c28:	2000      	movs	r0, #0
 8006c2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c2e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006d04 <_malloc_r+0xfc>
 8006c32:	f000 f869 	bl	8006d08 <__malloc_lock>
 8006c36:	f8d8 3000 	ldr.w	r3, [r8]
 8006c3a:	461c      	mov	r4, r3
 8006c3c:	bb44      	cbnz	r4, 8006c90 <_malloc_r+0x88>
 8006c3e:	4629      	mov	r1, r5
 8006c40:	4630      	mov	r0, r6
 8006c42:	f7ff ffbf 	bl	8006bc4 <sbrk_aligned>
 8006c46:	1c43      	adds	r3, r0, #1
 8006c48:	4604      	mov	r4, r0
 8006c4a:	d158      	bne.n	8006cfe <_malloc_r+0xf6>
 8006c4c:	f8d8 4000 	ldr.w	r4, [r8]
 8006c50:	4627      	mov	r7, r4
 8006c52:	2f00      	cmp	r7, #0
 8006c54:	d143      	bne.n	8006cde <_malloc_r+0xd6>
 8006c56:	2c00      	cmp	r4, #0
 8006c58:	d04b      	beq.n	8006cf2 <_malloc_r+0xea>
 8006c5a:	6823      	ldr	r3, [r4, #0]
 8006c5c:	4639      	mov	r1, r7
 8006c5e:	4630      	mov	r0, r6
 8006c60:	eb04 0903 	add.w	r9, r4, r3
 8006c64:	f000 fdfc 	bl	8007860 <_sbrk_r>
 8006c68:	4581      	cmp	r9, r0
 8006c6a:	d142      	bne.n	8006cf2 <_malloc_r+0xea>
 8006c6c:	6821      	ldr	r1, [r4, #0]
 8006c6e:	1a6d      	subs	r5, r5, r1
 8006c70:	4629      	mov	r1, r5
 8006c72:	4630      	mov	r0, r6
 8006c74:	f7ff ffa6 	bl	8006bc4 <sbrk_aligned>
 8006c78:	3001      	adds	r0, #1
 8006c7a:	d03a      	beq.n	8006cf2 <_malloc_r+0xea>
 8006c7c:	6823      	ldr	r3, [r4, #0]
 8006c7e:	442b      	add	r3, r5
 8006c80:	6023      	str	r3, [r4, #0]
 8006c82:	f8d8 3000 	ldr.w	r3, [r8]
 8006c86:	685a      	ldr	r2, [r3, #4]
 8006c88:	bb62      	cbnz	r2, 8006ce4 <_malloc_r+0xdc>
 8006c8a:	f8c8 7000 	str.w	r7, [r8]
 8006c8e:	e00f      	b.n	8006cb0 <_malloc_r+0xa8>
 8006c90:	6822      	ldr	r2, [r4, #0]
 8006c92:	1b52      	subs	r2, r2, r5
 8006c94:	d420      	bmi.n	8006cd8 <_malloc_r+0xd0>
 8006c96:	2a0b      	cmp	r2, #11
 8006c98:	d917      	bls.n	8006cca <_malloc_r+0xc2>
 8006c9a:	1961      	adds	r1, r4, r5
 8006c9c:	42a3      	cmp	r3, r4
 8006c9e:	6025      	str	r5, [r4, #0]
 8006ca0:	bf18      	it	ne
 8006ca2:	6059      	strne	r1, [r3, #4]
 8006ca4:	6863      	ldr	r3, [r4, #4]
 8006ca6:	bf08      	it	eq
 8006ca8:	f8c8 1000 	streq.w	r1, [r8]
 8006cac:	5162      	str	r2, [r4, r5]
 8006cae:	604b      	str	r3, [r1, #4]
 8006cb0:	4630      	mov	r0, r6
 8006cb2:	f000 f82f 	bl	8006d14 <__malloc_unlock>
 8006cb6:	f104 000b 	add.w	r0, r4, #11
 8006cba:	1d23      	adds	r3, r4, #4
 8006cbc:	f020 0007 	bic.w	r0, r0, #7
 8006cc0:	1ac2      	subs	r2, r0, r3
 8006cc2:	bf1c      	itt	ne
 8006cc4:	1a1b      	subne	r3, r3, r0
 8006cc6:	50a3      	strne	r3, [r4, r2]
 8006cc8:	e7af      	b.n	8006c2a <_malloc_r+0x22>
 8006cca:	6862      	ldr	r2, [r4, #4]
 8006ccc:	42a3      	cmp	r3, r4
 8006cce:	bf0c      	ite	eq
 8006cd0:	f8c8 2000 	streq.w	r2, [r8]
 8006cd4:	605a      	strne	r2, [r3, #4]
 8006cd6:	e7eb      	b.n	8006cb0 <_malloc_r+0xa8>
 8006cd8:	4623      	mov	r3, r4
 8006cda:	6864      	ldr	r4, [r4, #4]
 8006cdc:	e7ae      	b.n	8006c3c <_malloc_r+0x34>
 8006cde:	463c      	mov	r4, r7
 8006ce0:	687f      	ldr	r7, [r7, #4]
 8006ce2:	e7b6      	b.n	8006c52 <_malloc_r+0x4a>
 8006ce4:	461a      	mov	r2, r3
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	42a3      	cmp	r3, r4
 8006cea:	d1fb      	bne.n	8006ce4 <_malloc_r+0xdc>
 8006cec:	2300      	movs	r3, #0
 8006cee:	6053      	str	r3, [r2, #4]
 8006cf0:	e7de      	b.n	8006cb0 <_malloc_r+0xa8>
 8006cf2:	230c      	movs	r3, #12
 8006cf4:	6033      	str	r3, [r6, #0]
 8006cf6:	4630      	mov	r0, r6
 8006cf8:	f000 f80c 	bl	8006d14 <__malloc_unlock>
 8006cfc:	e794      	b.n	8006c28 <_malloc_r+0x20>
 8006cfe:	6005      	str	r5, [r0, #0]
 8006d00:	e7d6      	b.n	8006cb0 <_malloc_r+0xa8>
 8006d02:	bf00      	nop
 8006d04:	20000474 	.word	0x20000474

08006d08 <__malloc_lock>:
 8006d08:	4801      	ldr	r0, [pc, #4]	@ (8006d10 <__malloc_lock+0x8>)
 8006d0a:	f7ff b8b8 	b.w	8005e7e <__retarget_lock_acquire_recursive>
 8006d0e:	bf00      	nop
 8006d10:	2000046c 	.word	0x2000046c

08006d14 <__malloc_unlock>:
 8006d14:	4801      	ldr	r0, [pc, #4]	@ (8006d1c <__malloc_unlock+0x8>)
 8006d16:	f7ff b8b3 	b.w	8005e80 <__retarget_lock_release_recursive>
 8006d1a:	bf00      	nop
 8006d1c:	2000046c 	.word	0x2000046c

08006d20 <_Balloc>:
 8006d20:	b570      	push	{r4, r5, r6, lr}
 8006d22:	69c6      	ldr	r6, [r0, #28]
 8006d24:	4604      	mov	r4, r0
 8006d26:	460d      	mov	r5, r1
 8006d28:	b976      	cbnz	r6, 8006d48 <_Balloc+0x28>
 8006d2a:	2010      	movs	r0, #16
 8006d2c:	f7ff ff42 	bl	8006bb4 <malloc>
 8006d30:	4602      	mov	r2, r0
 8006d32:	61e0      	str	r0, [r4, #28]
 8006d34:	b920      	cbnz	r0, 8006d40 <_Balloc+0x20>
 8006d36:	4b18      	ldr	r3, [pc, #96]	@ (8006d98 <_Balloc+0x78>)
 8006d38:	4818      	ldr	r0, [pc, #96]	@ (8006d9c <_Balloc+0x7c>)
 8006d3a:	216b      	movs	r1, #107	@ 0x6b
 8006d3c:	f000 fdae 	bl	800789c <__assert_func>
 8006d40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006d44:	6006      	str	r6, [r0, #0]
 8006d46:	60c6      	str	r6, [r0, #12]
 8006d48:	69e6      	ldr	r6, [r4, #28]
 8006d4a:	68f3      	ldr	r3, [r6, #12]
 8006d4c:	b183      	cbz	r3, 8006d70 <_Balloc+0x50>
 8006d4e:	69e3      	ldr	r3, [r4, #28]
 8006d50:	68db      	ldr	r3, [r3, #12]
 8006d52:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006d56:	b9b8      	cbnz	r0, 8006d88 <_Balloc+0x68>
 8006d58:	2101      	movs	r1, #1
 8006d5a:	fa01 f605 	lsl.w	r6, r1, r5
 8006d5e:	1d72      	adds	r2, r6, #5
 8006d60:	0092      	lsls	r2, r2, #2
 8006d62:	4620      	mov	r0, r4
 8006d64:	f000 fdb8 	bl	80078d8 <_calloc_r>
 8006d68:	b160      	cbz	r0, 8006d84 <_Balloc+0x64>
 8006d6a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006d6e:	e00e      	b.n	8006d8e <_Balloc+0x6e>
 8006d70:	2221      	movs	r2, #33	@ 0x21
 8006d72:	2104      	movs	r1, #4
 8006d74:	4620      	mov	r0, r4
 8006d76:	f000 fdaf 	bl	80078d8 <_calloc_r>
 8006d7a:	69e3      	ldr	r3, [r4, #28]
 8006d7c:	60f0      	str	r0, [r6, #12]
 8006d7e:	68db      	ldr	r3, [r3, #12]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d1e4      	bne.n	8006d4e <_Balloc+0x2e>
 8006d84:	2000      	movs	r0, #0
 8006d86:	bd70      	pop	{r4, r5, r6, pc}
 8006d88:	6802      	ldr	r2, [r0, #0]
 8006d8a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006d8e:	2300      	movs	r3, #0
 8006d90:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006d94:	e7f7      	b.n	8006d86 <_Balloc+0x66>
 8006d96:	bf00      	nop
 8006d98:	08008025 	.word	0x08008025
 8006d9c:	080080a5 	.word	0x080080a5

08006da0 <_Bfree>:
 8006da0:	b570      	push	{r4, r5, r6, lr}
 8006da2:	69c6      	ldr	r6, [r0, #28]
 8006da4:	4605      	mov	r5, r0
 8006da6:	460c      	mov	r4, r1
 8006da8:	b976      	cbnz	r6, 8006dc8 <_Bfree+0x28>
 8006daa:	2010      	movs	r0, #16
 8006dac:	f7ff ff02 	bl	8006bb4 <malloc>
 8006db0:	4602      	mov	r2, r0
 8006db2:	61e8      	str	r0, [r5, #28]
 8006db4:	b920      	cbnz	r0, 8006dc0 <_Bfree+0x20>
 8006db6:	4b09      	ldr	r3, [pc, #36]	@ (8006ddc <_Bfree+0x3c>)
 8006db8:	4809      	ldr	r0, [pc, #36]	@ (8006de0 <_Bfree+0x40>)
 8006dba:	218f      	movs	r1, #143	@ 0x8f
 8006dbc:	f000 fd6e 	bl	800789c <__assert_func>
 8006dc0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006dc4:	6006      	str	r6, [r0, #0]
 8006dc6:	60c6      	str	r6, [r0, #12]
 8006dc8:	b13c      	cbz	r4, 8006dda <_Bfree+0x3a>
 8006dca:	69eb      	ldr	r3, [r5, #28]
 8006dcc:	6862      	ldr	r2, [r4, #4]
 8006dce:	68db      	ldr	r3, [r3, #12]
 8006dd0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006dd4:	6021      	str	r1, [r4, #0]
 8006dd6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006dda:	bd70      	pop	{r4, r5, r6, pc}
 8006ddc:	08008025 	.word	0x08008025
 8006de0:	080080a5 	.word	0x080080a5

08006de4 <__multadd>:
 8006de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006de8:	690d      	ldr	r5, [r1, #16]
 8006dea:	4607      	mov	r7, r0
 8006dec:	460c      	mov	r4, r1
 8006dee:	461e      	mov	r6, r3
 8006df0:	f101 0c14 	add.w	ip, r1, #20
 8006df4:	2000      	movs	r0, #0
 8006df6:	f8dc 3000 	ldr.w	r3, [ip]
 8006dfa:	b299      	uxth	r1, r3
 8006dfc:	fb02 6101 	mla	r1, r2, r1, r6
 8006e00:	0c1e      	lsrs	r6, r3, #16
 8006e02:	0c0b      	lsrs	r3, r1, #16
 8006e04:	fb02 3306 	mla	r3, r2, r6, r3
 8006e08:	b289      	uxth	r1, r1
 8006e0a:	3001      	adds	r0, #1
 8006e0c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006e10:	4285      	cmp	r5, r0
 8006e12:	f84c 1b04 	str.w	r1, [ip], #4
 8006e16:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006e1a:	dcec      	bgt.n	8006df6 <__multadd+0x12>
 8006e1c:	b30e      	cbz	r6, 8006e62 <__multadd+0x7e>
 8006e1e:	68a3      	ldr	r3, [r4, #8]
 8006e20:	42ab      	cmp	r3, r5
 8006e22:	dc19      	bgt.n	8006e58 <__multadd+0x74>
 8006e24:	6861      	ldr	r1, [r4, #4]
 8006e26:	4638      	mov	r0, r7
 8006e28:	3101      	adds	r1, #1
 8006e2a:	f7ff ff79 	bl	8006d20 <_Balloc>
 8006e2e:	4680      	mov	r8, r0
 8006e30:	b928      	cbnz	r0, 8006e3e <__multadd+0x5a>
 8006e32:	4602      	mov	r2, r0
 8006e34:	4b0c      	ldr	r3, [pc, #48]	@ (8006e68 <__multadd+0x84>)
 8006e36:	480d      	ldr	r0, [pc, #52]	@ (8006e6c <__multadd+0x88>)
 8006e38:	21ba      	movs	r1, #186	@ 0xba
 8006e3a:	f000 fd2f 	bl	800789c <__assert_func>
 8006e3e:	6922      	ldr	r2, [r4, #16]
 8006e40:	3202      	adds	r2, #2
 8006e42:	f104 010c 	add.w	r1, r4, #12
 8006e46:	0092      	lsls	r2, r2, #2
 8006e48:	300c      	adds	r0, #12
 8006e4a:	f000 fd19 	bl	8007880 <memcpy>
 8006e4e:	4621      	mov	r1, r4
 8006e50:	4638      	mov	r0, r7
 8006e52:	f7ff ffa5 	bl	8006da0 <_Bfree>
 8006e56:	4644      	mov	r4, r8
 8006e58:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006e5c:	3501      	adds	r5, #1
 8006e5e:	615e      	str	r6, [r3, #20]
 8006e60:	6125      	str	r5, [r4, #16]
 8006e62:	4620      	mov	r0, r4
 8006e64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e68:	08008094 	.word	0x08008094
 8006e6c:	080080a5 	.word	0x080080a5

08006e70 <__hi0bits>:
 8006e70:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006e74:	4603      	mov	r3, r0
 8006e76:	bf36      	itet	cc
 8006e78:	0403      	lslcc	r3, r0, #16
 8006e7a:	2000      	movcs	r0, #0
 8006e7c:	2010      	movcc	r0, #16
 8006e7e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006e82:	bf3c      	itt	cc
 8006e84:	021b      	lslcc	r3, r3, #8
 8006e86:	3008      	addcc	r0, #8
 8006e88:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006e8c:	bf3c      	itt	cc
 8006e8e:	011b      	lslcc	r3, r3, #4
 8006e90:	3004      	addcc	r0, #4
 8006e92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e96:	bf3c      	itt	cc
 8006e98:	009b      	lslcc	r3, r3, #2
 8006e9a:	3002      	addcc	r0, #2
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	db05      	blt.n	8006eac <__hi0bits+0x3c>
 8006ea0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006ea4:	f100 0001 	add.w	r0, r0, #1
 8006ea8:	bf08      	it	eq
 8006eaa:	2020      	moveq	r0, #32
 8006eac:	4770      	bx	lr

08006eae <__lo0bits>:
 8006eae:	6803      	ldr	r3, [r0, #0]
 8006eb0:	4602      	mov	r2, r0
 8006eb2:	f013 0007 	ands.w	r0, r3, #7
 8006eb6:	d00b      	beq.n	8006ed0 <__lo0bits+0x22>
 8006eb8:	07d9      	lsls	r1, r3, #31
 8006eba:	d421      	bmi.n	8006f00 <__lo0bits+0x52>
 8006ebc:	0798      	lsls	r0, r3, #30
 8006ebe:	bf49      	itett	mi
 8006ec0:	085b      	lsrmi	r3, r3, #1
 8006ec2:	089b      	lsrpl	r3, r3, #2
 8006ec4:	2001      	movmi	r0, #1
 8006ec6:	6013      	strmi	r3, [r2, #0]
 8006ec8:	bf5c      	itt	pl
 8006eca:	6013      	strpl	r3, [r2, #0]
 8006ecc:	2002      	movpl	r0, #2
 8006ece:	4770      	bx	lr
 8006ed0:	b299      	uxth	r1, r3
 8006ed2:	b909      	cbnz	r1, 8006ed8 <__lo0bits+0x2a>
 8006ed4:	0c1b      	lsrs	r3, r3, #16
 8006ed6:	2010      	movs	r0, #16
 8006ed8:	b2d9      	uxtb	r1, r3
 8006eda:	b909      	cbnz	r1, 8006ee0 <__lo0bits+0x32>
 8006edc:	3008      	adds	r0, #8
 8006ede:	0a1b      	lsrs	r3, r3, #8
 8006ee0:	0719      	lsls	r1, r3, #28
 8006ee2:	bf04      	itt	eq
 8006ee4:	091b      	lsreq	r3, r3, #4
 8006ee6:	3004      	addeq	r0, #4
 8006ee8:	0799      	lsls	r1, r3, #30
 8006eea:	bf04      	itt	eq
 8006eec:	089b      	lsreq	r3, r3, #2
 8006eee:	3002      	addeq	r0, #2
 8006ef0:	07d9      	lsls	r1, r3, #31
 8006ef2:	d403      	bmi.n	8006efc <__lo0bits+0x4e>
 8006ef4:	085b      	lsrs	r3, r3, #1
 8006ef6:	f100 0001 	add.w	r0, r0, #1
 8006efa:	d003      	beq.n	8006f04 <__lo0bits+0x56>
 8006efc:	6013      	str	r3, [r2, #0]
 8006efe:	4770      	bx	lr
 8006f00:	2000      	movs	r0, #0
 8006f02:	4770      	bx	lr
 8006f04:	2020      	movs	r0, #32
 8006f06:	4770      	bx	lr

08006f08 <__i2b>:
 8006f08:	b510      	push	{r4, lr}
 8006f0a:	460c      	mov	r4, r1
 8006f0c:	2101      	movs	r1, #1
 8006f0e:	f7ff ff07 	bl	8006d20 <_Balloc>
 8006f12:	4602      	mov	r2, r0
 8006f14:	b928      	cbnz	r0, 8006f22 <__i2b+0x1a>
 8006f16:	4b05      	ldr	r3, [pc, #20]	@ (8006f2c <__i2b+0x24>)
 8006f18:	4805      	ldr	r0, [pc, #20]	@ (8006f30 <__i2b+0x28>)
 8006f1a:	f240 1145 	movw	r1, #325	@ 0x145
 8006f1e:	f000 fcbd 	bl	800789c <__assert_func>
 8006f22:	2301      	movs	r3, #1
 8006f24:	6144      	str	r4, [r0, #20]
 8006f26:	6103      	str	r3, [r0, #16]
 8006f28:	bd10      	pop	{r4, pc}
 8006f2a:	bf00      	nop
 8006f2c:	08008094 	.word	0x08008094
 8006f30:	080080a5 	.word	0x080080a5

08006f34 <__multiply>:
 8006f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f38:	4614      	mov	r4, r2
 8006f3a:	690a      	ldr	r2, [r1, #16]
 8006f3c:	6923      	ldr	r3, [r4, #16]
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	bfa8      	it	ge
 8006f42:	4623      	movge	r3, r4
 8006f44:	460f      	mov	r7, r1
 8006f46:	bfa4      	itt	ge
 8006f48:	460c      	movge	r4, r1
 8006f4a:	461f      	movge	r7, r3
 8006f4c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006f50:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006f54:	68a3      	ldr	r3, [r4, #8]
 8006f56:	6861      	ldr	r1, [r4, #4]
 8006f58:	eb0a 0609 	add.w	r6, sl, r9
 8006f5c:	42b3      	cmp	r3, r6
 8006f5e:	b085      	sub	sp, #20
 8006f60:	bfb8      	it	lt
 8006f62:	3101      	addlt	r1, #1
 8006f64:	f7ff fedc 	bl	8006d20 <_Balloc>
 8006f68:	b930      	cbnz	r0, 8006f78 <__multiply+0x44>
 8006f6a:	4602      	mov	r2, r0
 8006f6c:	4b44      	ldr	r3, [pc, #272]	@ (8007080 <__multiply+0x14c>)
 8006f6e:	4845      	ldr	r0, [pc, #276]	@ (8007084 <__multiply+0x150>)
 8006f70:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006f74:	f000 fc92 	bl	800789c <__assert_func>
 8006f78:	f100 0514 	add.w	r5, r0, #20
 8006f7c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006f80:	462b      	mov	r3, r5
 8006f82:	2200      	movs	r2, #0
 8006f84:	4543      	cmp	r3, r8
 8006f86:	d321      	bcc.n	8006fcc <__multiply+0x98>
 8006f88:	f107 0114 	add.w	r1, r7, #20
 8006f8c:	f104 0214 	add.w	r2, r4, #20
 8006f90:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006f94:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006f98:	9302      	str	r3, [sp, #8]
 8006f9a:	1b13      	subs	r3, r2, r4
 8006f9c:	3b15      	subs	r3, #21
 8006f9e:	f023 0303 	bic.w	r3, r3, #3
 8006fa2:	3304      	adds	r3, #4
 8006fa4:	f104 0715 	add.w	r7, r4, #21
 8006fa8:	42ba      	cmp	r2, r7
 8006faa:	bf38      	it	cc
 8006fac:	2304      	movcc	r3, #4
 8006fae:	9301      	str	r3, [sp, #4]
 8006fb0:	9b02      	ldr	r3, [sp, #8]
 8006fb2:	9103      	str	r1, [sp, #12]
 8006fb4:	428b      	cmp	r3, r1
 8006fb6:	d80c      	bhi.n	8006fd2 <__multiply+0x9e>
 8006fb8:	2e00      	cmp	r6, #0
 8006fba:	dd03      	ble.n	8006fc4 <__multiply+0x90>
 8006fbc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d05b      	beq.n	800707c <__multiply+0x148>
 8006fc4:	6106      	str	r6, [r0, #16]
 8006fc6:	b005      	add	sp, #20
 8006fc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fcc:	f843 2b04 	str.w	r2, [r3], #4
 8006fd0:	e7d8      	b.n	8006f84 <__multiply+0x50>
 8006fd2:	f8b1 a000 	ldrh.w	sl, [r1]
 8006fd6:	f1ba 0f00 	cmp.w	sl, #0
 8006fda:	d024      	beq.n	8007026 <__multiply+0xf2>
 8006fdc:	f104 0e14 	add.w	lr, r4, #20
 8006fe0:	46a9      	mov	r9, r5
 8006fe2:	f04f 0c00 	mov.w	ip, #0
 8006fe6:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006fea:	f8d9 3000 	ldr.w	r3, [r9]
 8006fee:	fa1f fb87 	uxth.w	fp, r7
 8006ff2:	b29b      	uxth	r3, r3
 8006ff4:	fb0a 330b 	mla	r3, sl, fp, r3
 8006ff8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8006ffc:	f8d9 7000 	ldr.w	r7, [r9]
 8007000:	4463      	add	r3, ip
 8007002:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007006:	fb0a c70b 	mla	r7, sl, fp, ip
 800700a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800700e:	b29b      	uxth	r3, r3
 8007010:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007014:	4572      	cmp	r2, lr
 8007016:	f849 3b04 	str.w	r3, [r9], #4
 800701a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800701e:	d8e2      	bhi.n	8006fe6 <__multiply+0xb2>
 8007020:	9b01      	ldr	r3, [sp, #4]
 8007022:	f845 c003 	str.w	ip, [r5, r3]
 8007026:	9b03      	ldr	r3, [sp, #12]
 8007028:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800702c:	3104      	adds	r1, #4
 800702e:	f1b9 0f00 	cmp.w	r9, #0
 8007032:	d021      	beq.n	8007078 <__multiply+0x144>
 8007034:	682b      	ldr	r3, [r5, #0]
 8007036:	f104 0c14 	add.w	ip, r4, #20
 800703a:	46ae      	mov	lr, r5
 800703c:	f04f 0a00 	mov.w	sl, #0
 8007040:	f8bc b000 	ldrh.w	fp, [ip]
 8007044:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007048:	fb09 770b 	mla	r7, r9, fp, r7
 800704c:	4457      	add	r7, sl
 800704e:	b29b      	uxth	r3, r3
 8007050:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007054:	f84e 3b04 	str.w	r3, [lr], #4
 8007058:	f85c 3b04 	ldr.w	r3, [ip], #4
 800705c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007060:	f8be 3000 	ldrh.w	r3, [lr]
 8007064:	fb09 330a 	mla	r3, r9, sl, r3
 8007068:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800706c:	4562      	cmp	r2, ip
 800706e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007072:	d8e5      	bhi.n	8007040 <__multiply+0x10c>
 8007074:	9f01      	ldr	r7, [sp, #4]
 8007076:	51eb      	str	r3, [r5, r7]
 8007078:	3504      	adds	r5, #4
 800707a:	e799      	b.n	8006fb0 <__multiply+0x7c>
 800707c:	3e01      	subs	r6, #1
 800707e:	e79b      	b.n	8006fb8 <__multiply+0x84>
 8007080:	08008094 	.word	0x08008094
 8007084:	080080a5 	.word	0x080080a5

08007088 <__pow5mult>:
 8007088:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800708c:	4615      	mov	r5, r2
 800708e:	f012 0203 	ands.w	r2, r2, #3
 8007092:	4607      	mov	r7, r0
 8007094:	460e      	mov	r6, r1
 8007096:	d007      	beq.n	80070a8 <__pow5mult+0x20>
 8007098:	4c25      	ldr	r4, [pc, #148]	@ (8007130 <__pow5mult+0xa8>)
 800709a:	3a01      	subs	r2, #1
 800709c:	2300      	movs	r3, #0
 800709e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80070a2:	f7ff fe9f 	bl	8006de4 <__multadd>
 80070a6:	4606      	mov	r6, r0
 80070a8:	10ad      	asrs	r5, r5, #2
 80070aa:	d03d      	beq.n	8007128 <__pow5mult+0xa0>
 80070ac:	69fc      	ldr	r4, [r7, #28]
 80070ae:	b97c      	cbnz	r4, 80070d0 <__pow5mult+0x48>
 80070b0:	2010      	movs	r0, #16
 80070b2:	f7ff fd7f 	bl	8006bb4 <malloc>
 80070b6:	4602      	mov	r2, r0
 80070b8:	61f8      	str	r0, [r7, #28]
 80070ba:	b928      	cbnz	r0, 80070c8 <__pow5mult+0x40>
 80070bc:	4b1d      	ldr	r3, [pc, #116]	@ (8007134 <__pow5mult+0xac>)
 80070be:	481e      	ldr	r0, [pc, #120]	@ (8007138 <__pow5mult+0xb0>)
 80070c0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80070c4:	f000 fbea 	bl	800789c <__assert_func>
 80070c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80070cc:	6004      	str	r4, [r0, #0]
 80070ce:	60c4      	str	r4, [r0, #12]
 80070d0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80070d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80070d8:	b94c      	cbnz	r4, 80070ee <__pow5mult+0x66>
 80070da:	f240 2171 	movw	r1, #625	@ 0x271
 80070de:	4638      	mov	r0, r7
 80070e0:	f7ff ff12 	bl	8006f08 <__i2b>
 80070e4:	2300      	movs	r3, #0
 80070e6:	f8c8 0008 	str.w	r0, [r8, #8]
 80070ea:	4604      	mov	r4, r0
 80070ec:	6003      	str	r3, [r0, #0]
 80070ee:	f04f 0900 	mov.w	r9, #0
 80070f2:	07eb      	lsls	r3, r5, #31
 80070f4:	d50a      	bpl.n	800710c <__pow5mult+0x84>
 80070f6:	4631      	mov	r1, r6
 80070f8:	4622      	mov	r2, r4
 80070fa:	4638      	mov	r0, r7
 80070fc:	f7ff ff1a 	bl	8006f34 <__multiply>
 8007100:	4631      	mov	r1, r6
 8007102:	4680      	mov	r8, r0
 8007104:	4638      	mov	r0, r7
 8007106:	f7ff fe4b 	bl	8006da0 <_Bfree>
 800710a:	4646      	mov	r6, r8
 800710c:	106d      	asrs	r5, r5, #1
 800710e:	d00b      	beq.n	8007128 <__pow5mult+0xa0>
 8007110:	6820      	ldr	r0, [r4, #0]
 8007112:	b938      	cbnz	r0, 8007124 <__pow5mult+0x9c>
 8007114:	4622      	mov	r2, r4
 8007116:	4621      	mov	r1, r4
 8007118:	4638      	mov	r0, r7
 800711a:	f7ff ff0b 	bl	8006f34 <__multiply>
 800711e:	6020      	str	r0, [r4, #0]
 8007120:	f8c0 9000 	str.w	r9, [r0]
 8007124:	4604      	mov	r4, r0
 8007126:	e7e4      	b.n	80070f2 <__pow5mult+0x6a>
 8007128:	4630      	mov	r0, r6
 800712a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800712e:	bf00      	nop
 8007130:	08008100 	.word	0x08008100
 8007134:	08008025 	.word	0x08008025
 8007138:	080080a5 	.word	0x080080a5

0800713c <__lshift>:
 800713c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007140:	460c      	mov	r4, r1
 8007142:	6849      	ldr	r1, [r1, #4]
 8007144:	6923      	ldr	r3, [r4, #16]
 8007146:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800714a:	68a3      	ldr	r3, [r4, #8]
 800714c:	4607      	mov	r7, r0
 800714e:	4691      	mov	r9, r2
 8007150:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007154:	f108 0601 	add.w	r6, r8, #1
 8007158:	42b3      	cmp	r3, r6
 800715a:	db0b      	blt.n	8007174 <__lshift+0x38>
 800715c:	4638      	mov	r0, r7
 800715e:	f7ff fddf 	bl	8006d20 <_Balloc>
 8007162:	4605      	mov	r5, r0
 8007164:	b948      	cbnz	r0, 800717a <__lshift+0x3e>
 8007166:	4602      	mov	r2, r0
 8007168:	4b28      	ldr	r3, [pc, #160]	@ (800720c <__lshift+0xd0>)
 800716a:	4829      	ldr	r0, [pc, #164]	@ (8007210 <__lshift+0xd4>)
 800716c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007170:	f000 fb94 	bl	800789c <__assert_func>
 8007174:	3101      	adds	r1, #1
 8007176:	005b      	lsls	r3, r3, #1
 8007178:	e7ee      	b.n	8007158 <__lshift+0x1c>
 800717a:	2300      	movs	r3, #0
 800717c:	f100 0114 	add.w	r1, r0, #20
 8007180:	f100 0210 	add.w	r2, r0, #16
 8007184:	4618      	mov	r0, r3
 8007186:	4553      	cmp	r3, sl
 8007188:	db33      	blt.n	80071f2 <__lshift+0xb6>
 800718a:	6920      	ldr	r0, [r4, #16]
 800718c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007190:	f104 0314 	add.w	r3, r4, #20
 8007194:	f019 091f 	ands.w	r9, r9, #31
 8007198:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800719c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80071a0:	d02b      	beq.n	80071fa <__lshift+0xbe>
 80071a2:	f1c9 0e20 	rsb	lr, r9, #32
 80071a6:	468a      	mov	sl, r1
 80071a8:	2200      	movs	r2, #0
 80071aa:	6818      	ldr	r0, [r3, #0]
 80071ac:	fa00 f009 	lsl.w	r0, r0, r9
 80071b0:	4310      	orrs	r0, r2
 80071b2:	f84a 0b04 	str.w	r0, [sl], #4
 80071b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80071ba:	459c      	cmp	ip, r3
 80071bc:	fa22 f20e 	lsr.w	r2, r2, lr
 80071c0:	d8f3      	bhi.n	80071aa <__lshift+0x6e>
 80071c2:	ebac 0304 	sub.w	r3, ip, r4
 80071c6:	3b15      	subs	r3, #21
 80071c8:	f023 0303 	bic.w	r3, r3, #3
 80071cc:	3304      	adds	r3, #4
 80071ce:	f104 0015 	add.w	r0, r4, #21
 80071d2:	4584      	cmp	ip, r0
 80071d4:	bf38      	it	cc
 80071d6:	2304      	movcc	r3, #4
 80071d8:	50ca      	str	r2, [r1, r3]
 80071da:	b10a      	cbz	r2, 80071e0 <__lshift+0xa4>
 80071dc:	f108 0602 	add.w	r6, r8, #2
 80071e0:	3e01      	subs	r6, #1
 80071e2:	4638      	mov	r0, r7
 80071e4:	612e      	str	r6, [r5, #16]
 80071e6:	4621      	mov	r1, r4
 80071e8:	f7ff fdda 	bl	8006da0 <_Bfree>
 80071ec:	4628      	mov	r0, r5
 80071ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071f2:	f842 0f04 	str.w	r0, [r2, #4]!
 80071f6:	3301      	adds	r3, #1
 80071f8:	e7c5      	b.n	8007186 <__lshift+0x4a>
 80071fa:	3904      	subs	r1, #4
 80071fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8007200:	f841 2f04 	str.w	r2, [r1, #4]!
 8007204:	459c      	cmp	ip, r3
 8007206:	d8f9      	bhi.n	80071fc <__lshift+0xc0>
 8007208:	e7ea      	b.n	80071e0 <__lshift+0xa4>
 800720a:	bf00      	nop
 800720c:	08008094 	.word	0x08008094
 8007210:	080080a5 	.word	0x080080a5

08007214 <__mcmp>:
 8007214:	690a      	ldr	r2, [r1, #16]
 8007216:	4603      	mov	r3, r0
 8007218:	6900      	ldr	r0, [r0, #16]
 800721a:	1a80      	subs	r0, r0, r2
 800721c:	b530      	push	{r4, r5, lr}
 800721e:	d10e      	bne.n	800723e <__mcmp+0x2a>
 8007220:	3314      	adds	r3, #20
 8007222:	3114      	adds	r1, #20
 8007224:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007228:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800722c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007230:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007234:	4295      	cmp	r5, r2
 8007236:	d003      	beq.n	8007240 <__mcmp+0x2c>
 8007238:	d205      	bcs.n	8007246 <__mcmp+0x32>
 800723a:	f04f 30ff 	mov.w	r0, #4294967295
 800723e:	bd30      	pop	{r4, r5, pc}
 8007240:	42a3      	cmp	r3, r4
 8007242:	d3f3      	bcc.n	800722c <__mcmp+0x18>
 8007244:	e7fb      	b.n	800723e <__mcmp+0x2a>
 8007246:	2001      	movs	r0, #1
 8007248:	e7f9      	b.n	800723e <__mcmp+0x2a>
	...

0800724c <__mdiff>:
 800724c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007250:	4689      	mov	r9, r1
 8007252:	4606      	mov	r6, r0
 8007254:	4611      	mov	r1, r2
 8007256:	4648      	mov	r0, r9
 8007258:	4614      	mov	r4, r2
 800725a:	f7ff ffdb 	bl	8007214 <__mcmp>
 800725e:	1e05      	subs	r5, r0, #0
 8007260:	d112      	bne.n	8007288 <__mdiff+0x3c>
 8007262:	4629      	mov	r1, r5
 8007264:	4630      	mov	r0, r6
 8007266:	f7ff fd5b 	bl	8006d20 <_Balloc>
 800726a:	4602      	mov	r2, r0
 800726c:	b928      	cbnz	r0, 800727a <__mdiff+0x2e>
 800726e:	4b3f      	ldr	r3, [pc, #252]	@ (800736c <__mdiff+0x120>)
 8007270:	f240 2137 	movw	r1, #567	@ 0x237
 8007274:	483e      	ldr	r0, [pc, #248]	@ (8007370 <__mdiff+0x124>)
 8007276:	f000 fb11 	bl	800789c <__assert_func>
 800727a:	2301      	movs	r3, #1
 800727c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007280:	4610      	mov	r0, r2
 8007282:	b003      	add	sp, #12
 8007284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007288:	bfbc      	itt	lt
 800728a:	464b      	movlt	r3, r9
 800728c:	46a1      	movlt	r9, r4
 800728e:	4630      	mov	r0, r6
 8007290:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007294:	bfba      	itte	lt
 8007296:	461c      	movlt	r4, r3
 8007298:	2501      	movlt	r5, #1
 800729a:	2500      	movge	r5, #0
 800729c:	f7ff fd40 	bl	8006d20 <_Balloc>
 80072a0:	4602      	mov	r2, r0
 80072a2:	b918      	cbnz	r0, 80072ac <__mdiff+0x60>
 80072a4:	4b31      	ldr	r3, [pc, #196]	@ (800736c <__mdiff+0x120>)
 80072a6:	f240 2145 	movw	r1, #581	@ 0x245
 80072aa:	e7e3      	b.n	8007274 <__mdiff+0x28>
 80072ac:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80072b0:	6926      	ldr	r6, [r4, #16]
 80072b2:	60c5      	str	r5, [r0, #12]
 80072b4:	f109 0310 	add.w	r3, r9, #16
 80072b8:	f109 0514 	add.w	r5, r9, #20
 80072bc:	f104 0e14 	add.w	lr, r4, #20
 80072c0:	f100 0b14 	add.w	fp, r0, #20
 80072c4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80072c8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80072cc:	9301      	str	r3, [sp, #4]
 80072ce:	46d9      	mov	r9, fp
 80072d0:	f04f 0c00 	mov.w	ip, #0
 80072d4:	9b01      	ldr	r3, [sp, #4]
 80072d6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80072da:	f853 af04 	ldr.w	sl, [r3, #4]!
 80072de:	9301      	str	r3, [sp, #4]
 80072e0:	fa1f f38a 	uxth.w	r3, sl
 80072e4:	4619      	mov	r1, r3
 80072e6:	b283      	uxth	r3, r0
 80072e8:	1acb      	subs	r3, r1, r3
 80072ea:	0c00      	lsrs	r0, r0, #16
 80072ec:	4463      	add	r3, ip
 80072ee:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80072f2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80072f6:	b29b      	uxth	r3, r3
 80072f8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80072fc:	4576      	cmp	r6, lr
 80072fe:	f849 3b04 	str.w	r3, [r9], #4
 8007302:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007306:	d8e5      	bhi.n	80072d4 <__mdiff+0x88>
 8007308:	1b33      	subs	r3, r6, r4
 800730a:	3b15      	subs	r3, #21
 800730c:	f023 0303 	bic.w	r3, r3, #3
 8007310:	3415      	adds	r4, #21
 8007312:	3304      	adds	r3, #4
 8007314:	42a6      	cmp	r6, r4
 8007316:	bf38      	it	cc
 8007318:	2304      	movcc	r3, #4
 800731a:	441d      	add	r5, r3
 800731c:	445b      	add	r3, fp
 800731e:	461e      	mov	r6, r3
 8007320:	462c      	mov	r4, r5
 8007322:	4544      	cmp	r4, r8
 8007324:	d30e      	bcc.n	8007344 <__mdiff+0xf8>
 8007326:	f108 0103 	add.w	r1, r8, #3
 800732a:	1b49      	subs	r1, r1, r5
 800732c:	f021 0103 	bic.w	r1, r1, #3
 8007330:	3d03      	subs	r5, #3
 8007332:	45a8      	cmp	r8, r5
 8007334:	bf38      	it	cc
 8007336:	2100      	movcc	r1, #0
 8007338:	440b      	add	r3, r1
 800733a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800733e:	b191      	cbz	r1, 8007366 <__mdiff+0x11a>
 8007340:	6117      	str	r7, [r2, #16]
 8007342:	e79d      	b.n	8007280 <__mdiff+0x34>
 8007344:	f854 1b04 	ldr.w	r1, [r4], #4
 8007348:	46e6      	mov	lr, ip
 800734a:	0c08      	lsrs	r0, r1, #16
 800734c:	fa1c fc81 	uxtah	ip, ip, r1
 8007350:	4471      	add	r1, lr
 8007352:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007356:	b289      	uxth	r1, r1
 8007358:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800735c:	f846 1b04 	str.w	r1, [r6], #4
 8007360:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007364:	e7dd      	b.n	8007322 <__mdiff+0xd6>
 8007366:	3f01      	subs	r7, #1
 8007368:	e7e7      	b.n	800733a <__mdiff+0xee>
 800736a:	bf00      	nop
 800736c:	08008094 	.word	0x08008094
 8007370:	080080a5 	.word	0x080080a5

08007374 <__d2b>:
 8007374:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007378:	460f      	mov	r7, r1
 800737a:	2101      	movs	r1, #1
 800737c:	ec59 8b10 	vmov	r8, r9, d0
 8007380:	4616      	mov	r6, r2
 8007382:	f7ff fccd 	bl	8006d20 <_Balloc>
 8007386:	4604      	mov	r4, r0
 8007388:	b930      	cbnz	r0, 8007398 <__d2b+0x24>
 800738a:	4602      	mov	r2, r0
 800738c:	4b23      	ldr	r3, [pc, #140]	@ (800741c <__d2b+0xa8>)
 800738e:	4824      	ldr	r0, [pc, #144]	@ (8007420 <__d2b+0xac>)
 8007390:	f240 310f 	movw	r1, #783	@ 0x30f
 8007394:	f000 fa82 	bl	800789c <__assert_func>
 8007398:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800739c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80073a0:	b10d      	cbz	r5, 80073a6 <__d2b+0x32>
 80073a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80073a6:	9301      	str	r3, [sp, #4]
 80073a8:	f1b8 0300 	subs.w	r3, r8, #0
 80073ac:	d023      	beq.n	80073f6 <__d2b+0x82>
 80073ae:	4668      	mov	r0, sp
 80073b0:	9300      	str	r3, [sp, #0]
 80073b2:	f7ff fd7c 	bl	8006eae <__lo0bits>
 80073b6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80073ba:	b1d0      	cbz	r0, 80073f2 <__d2b+0x7e>
 80073bc:	f1c0 0320 	rsb	r3, r0, #32
 80073c0:	fa02 f303 	lsl.w	r3, r2, r3
 80073c4:	430b      	orrs	r3, r1
 80073c6:	40c2      	lsrs	r2, r0
 80073c8:	6163      	str	r3, [r4, #20]
 80073ca:	9201      	str	r2, [sp, #4]
 80073cc:	9b01      	ldr	r3, [sp, #4]
 80073ce:	61a3      	str	r3, [r4, #24]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	bf0c      	ite	eq
 80073d4:	2201      	moveq	r2, #1
 80073d6:	2202      	movne	r2, #2
 80073d8:	6122      	str	r2, [r4, #16]
 80073da:	b1a5      	cbz	r5, 8007406 <__d2b+0x92>
 80073dc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80073e0:	4405      	add	r5, r0
 80073e2:	603d      	str	r5, [r7, #0]
 80073e4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80073e8:	6030      	str	r0, [r6, #0]
 80073ea:	4620      	mov	r0, r4
 80073ec:	b003      	add	sp, #12
 80073ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80073f2:	6161      	str	r1, [r4, #20]
 80073f4:	e7ea      	b.n	80073cc <__d2b+0x58>
 80073f6:	a801      	add	r0, sp, #4
 80073f8:	f7ff fd59 	bl	8006eae <__lo0bits>
 80073fc:	9b01      	ldr	r3, [sp, #4]
 80073fe:	6163      	str	r3, [r4, #20]
 8007400:	3020      	adds	r0, #32
 8007402:	2201      	movs	r2, #1
 8007404:	e7e8      	b.n	80073d8 <__d2b+0x64>
 8007406:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800740a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800740e:	6038      	str	r0, [r7, #0]
 8007410:	6918      	ldr	r0, [r3, #16]
 8007412:	f7ff fd2d 	bl	8006e70 <__hi0bits>
 8007416:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800741a:	e7e5      	b.n	80073e8 <__d2b+0x74>
 800741c:	08008094 	.word	0x08008094
 8007420:	080080a5 	.word	0x080080a5

08007424 <__ssputs_r>:
 8007424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007428:	688e      	ldr	r6, [r1, #8]
 800742a:	461f      	mov	r7, r3
 800742c:	42be      	cmp	r6, r7
 800742e:	680b      	ldr	r3, [r1, #0]
 8007430:	4682      	mov	sl, r0
 8007432:	460c      	mov	r4, r1
 8007434:	4690      	mov	r8, r2
 8007436:	d82d      	bhi.n	8007494 <__ssputs_r+0x70>
 8007438:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800743c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007440:	d026      	beq.n	8007490 <__ssputs_r+0x6c>
 8007442:	6965      	ldr	r5, [r4, #20]
 8007444:	6909      	ldr	r1, [r1, #16]
 8007446:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800744a:	eba3 0901 	sub.w	r9, r3, r1
 800744e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007452:	1c7b      	adds	r3, r7, #1
 8007454:	444b      	add	r3, r9
 8007456:	106d      	asrs	r5, r5, #1
 8007458:	429d      	cmp	r5, r3
 800745a:	bf38      	it	cc
 800745c:	461d      	movcc	r5, r3
 800745e:	0553      	lsls	r3, r2, #21
 8007460:	d527      	bpl.n	80074b2 <__ssputs_r+0x8e>
 8007462:	4629      	mov	r1, r5
 8007464:	f7ff fbd0 	bl	8006c08 <_malloc_r>
 8007468:	4606      	mov	r6, r0
 800746a:	b360      	cbz	r0, 80074c6 <__ssputs_r+0xa2>
 800746c:	6921      	ldr	r1, [r4, #16]
 800746e:	464a      	mov	r2, r9
 8007470:	f000 fa06 	bl	8007880 <memcpy>
 8007474:	89a3      	ldrh	r3, [r4, #12]
 8007476:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800747a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800747e:	81a3      	strh	r3, [r4, #12]
 8007480:	6126      	str	r6, [r4, #16]
 8007482:	6165      	str	r5, [r4, #20]
 8007484:	444e      	add	r6, r9
 8007486:	eba5 0509 	sub.w	r5, r5, r9
 800748a:	6026      	str	r6, [r4, #0]
 800748c:	60a5      	str	r5, [r4, #8]
 800748e:	463e      	mov	r6, r7
 8007490:	42be      	cmp	r6, r7
 8007492:	d900      	bls.n	8007496 <__ssputs_r+0x72>
 8007494:	463e      	mov	r6, r7
 8007496:	6820      	ldr	r0, [r4, #0]
 8007498:	4632      	mov	r2, r6
 800749a:	4641      	mov	r1, r8
 800749c:	f000 f9c6 	bl	800782c <memmove>
 80074a0:	68a3      	ldr	r3, [r4, #8]
 80074a2:	1b9b      	subs	r3, r3, r6
 80074a4:	60a3      	str	r3, [r4, #8]
 80074a6:	6823      	ldr	r3, [r4, #0]
 80074a8:	4433      	add	r3, r6
 80074aa:	6023      	str	r3, [r4, #0]
 80074ac:	2000      	movs	r0, #0
 80074ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074b2:	462a      	mov	r2, r5
 80074b4:	f000 fa36 	bl	8007924 <_realloc_r>
 80074b8:	4606      	mov	r6, r0
 80074ba:	2800      	cmp	r0, #0
 80074bc:	d1e0      	bne.n	8007480 <__ssputs_r+0x5c>
 80074be:	6921      	ldr	r1, [r4, #16]
 80074c0:	4650      	mov	r0, sl
 80074c2:	f7ff fb2d 	bl	8006b20 <_free_r>
 80074c6:	230c      	movs	r3, #12
 80074c8:	f8ca 3000 	str.w	r3, [sl]
 80074cc:	89a3      	ldrh	r3, [r4, #12]
 80074ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80074d2:	81a3      	strh	r3, [r4, #12]
 80074d4:	f04f 30ff 	mov.w	r0, #4294967295
 80074d8:	e7e9      	b.n	80074ae <__ssputs_r+0x8a>
	...

080074dc <_svfiprintf_r>:
 80074dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074e0:	4698      	mov	r8, r3
 80074e2:	898b      	ldrh	r3, [r1, #12]
 80074e4:	061b      	lsls	r3, r3, #24
 80074e6:	b09d      	sub	sp, #116	@ 0x74
 80074e8:	4607      	mov	r7, r0
 80074ea:	460d      	mov	r5, r1
 80074ec:	4614      	mov	r4, r2
 80074ee:	d510      	bpl.n	8007512 <_svfiprintf_r+0x36>
 80074f0:	690b      	ldr	r3, [r1, #16]
 80074f2:	b973      	cbnz	r3, 8007512 <_svfiprintf_r+0x36>
 80074f4:	2140      	movs	r1, #64	@ 0x40
 80074f6:	f7ff fb87 	bl	8006c08 <_malloc_r>
 80074fa:	6028      	str	r0, [r5, #0]
 80074fc:	6128      	str	r0, [r5, #16]
 80074fe:	b930      	cbnz	r0, 800750e <_svfiprintf_r+0x32>
 8007500:	230c      	movs	r3, #12
 8007502:	603b      	str	r3, [r7, #0]
 8007504:	f04f 30ff 	mov.w	r0, #4294967295
 8007508:	b01d      	add	sp, #116	@ 0x74
 800750a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800750e:	2340      	movs	r3, #64	@ 0x40
 8007510:	616b      	str	r3, [r5, #20]
 8007512:	2300      	movs	r3, #0
 8007514:	9309      	str	r3, [sp, #36]	@ 0x24
 8007516:	2320      	movs	r3, #32
 8007518:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800751c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007520:	2330      	movs	r3, #48	@ 0x30
 8007522:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80076c0 <_svfiprintf_r+0x1e4>
 8007526:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800752a:	f04f 0901 	mov.w	r9, #1
 800752e:	4623      	mov	r3, r4
 8007530:	469a      	mov	sl, r3
 8007532:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007536:	b10a      	cbz	r2, 800753c <_svfiprintf_r+0x60>
 8007538:	2a25      	cmp	r2, #37	@ 0x25
 800753a:	d1f9      	bne.n	8007530 <_svfiprintf_r+0x54>
 800753c:	ebba 0b04 	subs.w	fp, sl, r4
 8007540:	d00b      	beq.n	800755a <_svfiprintf_r+0x7e>
 8007542:	465b      	mov	r3, fp
 8007544:	4622      	mov	r2, r4
 8007546:	4629      	mov	r1, r5
 8007548:	4638      	mov	r0, r7
 800754a:	f7ff ff6b 	bl	8007424 <__ssputs_r>
 800754e:	3001      	adds	r0, #1
 8007550:	f000 80a7 	beq.w	80076a2 <_svfiprintf_r+0x1c6>
 8007554:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007556:	445a      	add	r2, fp
 8007558:	9209      	str	r2, [sp, #36]	@ 0x24
 800755a:	f89a 3000 	ldrb.w	r3, [sl]
 800755e:	2b00      	cmp	r3, #0
 8007560:	f000 809f 	beq.w	80076a2 <_svfiprintf_r+0x1c6>
 8007564:	2300      	movs	r3, #0
 8007566:	f04f 32ff 	mov.w	r2, #4294967295
 800756a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800756e:	f10a 0a01 	add.w	sl, sl, #1
 8007572:	9304      	str	r3, [sp, #16]
 8007574:	9307      	str	r3, [sp, #28]
 8007576:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800757a:	931a      	str	r3, [sp, #104]	@ 0x68
 800757c:	4654      	mov	r4, sl
 800757e:	2205      	movs	r2, #5
 8007580:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007584:	484e      	ldr	r0, [pc, #312]	@ (80076c0 <_svfiprintf_r+0x1e4>)
 8007586:	f7f8 fe2b 	bl	80001e0 <memchr>
 800758a:	9a04      	ldr	r2, [sp, #16]
 800758c:	b9d8      	cbnz	r0, 80075c6 <_svfiprintf_r+0xea>
 800758e:	06d0      	lsls	r0, r2, #27
 8007590:	bf44      	itt	mi
 8007592:	2320      	movmi	r3, #32
 8007594:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007598:	0711      	lsls	r1, r2, #28
 800759a:	bf44      	itt	mi
 800759c:	232b      	movmi	r3, #43	@ 0x2b
 800759e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80075a2:	f89a 3000 	ldrb.w	r3, [sl]
 80075a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80075a8:	d015      	beq.n	80075d6 <_svfiprintf_r+0xfa>
 80075aa:	9a07      	ldr	r2, [sp, #28]
 80075ac:	4654      	mov	r4, sl
 80075ae:	2000      	movs	r0, #0
 80075b0:	f04f 0c0a 	mov.w	ip, #10
 80075b4:	4621      	mov	r1, r4
 80075b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80075ba:	3b30      	subs	r3, #48	@ 0x30
 80075bc:	2b09      	cmp	r3, #9
 80075be:	d94b      	bls.n	8007658 <_svfiprintf_r+0x17c>
 80075c0:	b1b0      	cbz	r0, 80075f0 <_svfiprintf_r+0x114>
 80075c2:	9207      	str	r2, [sp, #28]
 80075c4:	e014      	b.n	80075f0 <_svfiprintf_r+0x114>
 80075c6:	eba0 0308 	sub.w	r3, r0, r8
 80075ca:	fa09 f303 	lsl.w	r3, r9, r3
 80075ce:	4313      	orrs	r3, r2
 80075d0:	9304      	str	r3, [sp, #16]
 80075d2:	46a2      	mov	sl, r4
 80075d4:	e7d2      	b.n	800757c <_svfiprintf_r+0xa0>
 80075d6:	9b03      	ldr	r3, [sp, #12]
 80075d8:	1d19      	adds	r1, r3, #4
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	9103      	str	r1, [sp, #12]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	bfbb      	ittet	lt
 80075e2:	425b      	neglt	r3, r3
 80075e4:	f042 0202 	orrlt.w	r2, r2, #2
 80075e8:	9307      	strge	r3, [sp, #28]
 80075ea:	9307      	strlt	r3, [sp, #28]
 80075ec:	bfb8      	it	lt
 80075ee:	9204      	strlt	r2, [sp, #16]
 80075f0:	7823      	ldrb	r3, [r4, #0]
 80075f2:	2b2e      	cmp	r3, #46	@ 0x2e
 80075f4:	d10a      	bne.n	800760c <_svfiprintf_r+0x130>
 80075f6:	7863      	ldrb	r3, [r4, #1]
 80075f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80075fa:	d132      	bne.n	8007662 <_svfiprintf_r+0x186>
 80075fc:	9b03      	ldr	r3, [sp, #12]
 80075fe:	1d1a      	adds	r2, r3, #4
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	9203      	str	r2, [sp, #12]
 8007604:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007608:	3402      	adds	r4, #2
 800760a:	9305      	str	r3, [sp, #20]
 800760c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80076d0 <_svfiprintf_r+0x1f4>
 8007610:	7821      	ldrb	r1, [r4, #0]
 8007612:	2203      	movs	r2, #3
 8007614:	4650      	mov	r0, sl
 8007616:	f7f8 fde3 	bl	80001e0 <memchr>
 800761a:	b138      	cbz	r0, 800762c <_svfiprintf_r+0x150>
 800761c:	9b04      	ldr	r3, [sp, #16]
 800761e:	eba0 000a 	sub.w	r0, r0, sl
 8007622:	2240      	movs	r2, #64	@ 0x40
 8007624:	4082      	lsls	r2, r0
 8007626:	4313      	orrs	r3, r2
 8007628:	3401      	adds	r4, #1
 800762a:	9304      	str	r3, [sp, #16]
 800762c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007630:	4824      	ldr	r0, [pc, #144]	@ (80076c4 <_svfiprintf_r+0x1e8>)
 8007632:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007636:	2206      	movs	r2, #6
 8007638:	f7f8 fdd2 	bl	80001e0 <memchr>
 800763c:	2800      	cmp	r0, #0
 800763e:	d036      	beq.n	80076ae <_svfiprintf_r+0x1d2>
 8007640:	4b21      	ldr	r3, [pc, #132]	@ (80076c8 <_svfiprintf_r+0x1ec>)
 8007642:	bb1b      	cbnz	r3, 800768c <_svfiprintf_r+0x1b0>
 8007644:	9b03      	ldr	r3, [sp, #12]
 8007646:	3307      	adds	r3, #7
 8007648:	f023 0307 	bic.w	r3, r3, #7
 800764c:	3308      	adds	r3, #8
 800764e:	9303      	str	r3, [sp, #12]
 8007650:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007652:	4433      	add	r3, r6
 8007654:	9309      	str	r3, [sp, #36]	@ 0x24
 8007656:	e76a      	b.n	800752e <_svfiprintf_r+0x52>
 8007658:	fb0c 3202 	mla	r2, ip, r2, r3
 800765c:	460c      	mov	r4, r1
 800765e:	2001      	movs	r0, #1
 8007660:	e7a8      	b.n	80075b4 <_svfiprintf_r+0xd8>
 8007662:	2300      	movs	r3, #0
 8007664:	3401      	adds	r4, #1
 8007666:	9305      	str	r3, [sp, #20]
 8007668:	4619      	mov	r1, r3
 800766a:	f04f 0c0a 	mov.w	ip, #10
 800766e:	4620      	mov	r0, r4
 8007670:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007674:	3a30      	subs	r2, #48	@ 0x30
 8007676:	2a09      	cmp	r2, #9
 8007678:	d903      	bls.n	8007682 <_svfiprintf_r+0x1a6>
 800767a:	2b00      	cmp	r3, #0
 800767c:	d0c6      	beq.n	800760c <_svfiprintf_r+0x130>
 800767e:	9105      	str	r1, [sp, #20]
 8007680:	e7c4      	b.n	800760c <_svfiprintf_r+0x130>
 8007682:	fb0c 2101 	mla	r1, ip, r1, r2
 8007686:	4604      	mov	r4, r0
 8007688:	2301      	movs	r3, #1
 800768a:	e7f0      	b.n	800766e <_svfiprintf_r+0x192>
 800768c:	ab03      	add	r3, sp, #12
 800768e:	9300      	str	r3, [sp, #0]
 8007690:	462a      	mov	r2, r5
 8007692:	4b0e      	ldr	r3, [pc, #56]	@ (80076cc <_svfiprintf_r+0x1f0>)
 8007694:	a904      	add	r1, sp, #16
 8007696:	4638      	mov	r0, r7
 8007698:	f7fd fe96 	bl	80053c8 <_printf_float>
 800769c:	1c42      	adds	r2, r0, #1
 800769e:	4606      	mov	r6, r0
 80076a0:	d1d6      	bne.n	8007650 <_svfiprintf_r+0x174>
 80076a2:	89ab      	ldrh	r3, [r5, #12]
 80076a4:	065b      	lsls	r3, r3, #25
 80076a6:	f53f af2d 	bmi.w	8007504 <_svfiprintf_r+0x28>
 80076aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80076ac:	e72c      	b.n	8007508 <_svfiprintf_r+0x2c>
 80076ae:	ab03      	add	r3, sp, #12
 80076b0:	9300      	str	r3, [sp, #0]
 80076b2:	462a      	mov	r2, r5
 80076b4:	4b05      	ldr	r3, [pc, #20]	@ (80076cc <_svfiprintf_r+0x1f0>)
 80076b6:	a904      	add	r1, sp, #16
 80076b8:	4638      	mov	r0, r7
 80076ba:	f7fe f91d 	bl	80058f8 <_printf_i>
 80076be:	e7ed      	b.n	800769c <_svfiprintf_r+0x1c0>
 80076c0:	08008200 	.word	0x08008200
 80076c4:	0800820a 	.word	0x0800820a
 80076c8:	080053c9 	.word	0x080053c9
 80076cc:	08007425 	.word	0x08007425
 80076d0:	08008206 	.word	0x08008206

080076d4 <__sflush_r>:
 80076d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80076d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076dc:	0716      	lsls	r6, r2, #28
 80076de:	4605      	mov	r5, r0
 80076e0:	460c      	mov	r4, r1
 80076e2:	d454      	bmi.n	800778e <__sflush_r+0xba>
 80076e4:	684b      	ldr	r3, [r1, #4]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	dc02      	bgt.n	80076f0 <__sflush_r+0x1c>
 80076ea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	dd48      	ble.n	8007782 <__sflush_r+0xae>
 80076f0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80076f2:	2e00      	cmp	r6, #0
 80076f4:	d045      	beq.n	8007782 <__sflush_r+0xae>
 80076f6:	2300      	movs	r3, #0
 80076f8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80076fc:	682f      	ldr	r7, [r5, #0]
 80076fe:	6a21      	ldr	r1, [r4, #32]
 8007700:	602b      	str	r3, [r5, #0]
 8007702:	d030      	beq.n	8007766 <__sflush_r+0x92>
 8007704:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007706:	89a3      	ldrh	r3, [r4, #12]
 8007708:	0759      	lsls	r1, r3, #29
 800770a:	d505      	bpl.n	8007718 <__sflush_r+0x44>
 800770c:	6863      	ldr	r3, [r4, #4]
 800770e:	1ad2      	subs	r2, r2, r3
 8007710:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007712:	b10b      	cbz	r3, 8007718 <__sflush_r+0x44>
 8007714:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007716:	1ad2      	subs	r2, r2, r3
 8007718:	2300      	movs	r3, #0
 800771a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800771c:	6a21      	ldr	r1, [r4, #32]
 800771e:	4628      	mov	r0, r5
 8007720:	47b0      	blx	r6
 8007722:	1c43      	adds	r3, r0, #1
 8007724:	89a3      	ldrh	r3, [r4, #12]
 8007726:	d106      	bne.n	8007736 <__sflush_r+0x62>
 8007728:	6829      	ldr	r1, [r5, #0]
 800772a:	291d      	cmp	r1, #29
 800772c:	d82b      	bhi.n	8007786 <__sflush_r+0xb2>
 800772e:	4a2a      	ldr	r2, [pc, #168]	@ (80077d8 <__sflush_r+0x104>)
 8007730:	410a      	asrs	r2, r1
 8007732:	07d6      	lsls	r6, r2, #31
 8007734:	d427      	bmi.n	8007786 <__sflush_r+0xb2>
 8007736:	2200      	movs	r2, #0
 8007738:	6062      	str	r2, [r4, #4]
 800773a:	04d9      	lsls	r1, r3, #19
 800773c:	6922      	ldr	r2, [r4, #16]
 800773e:	6022      	str	r2, [r4, #0]
 8007740:	d504      	bpl.n	800774c <__sflush_r+0x78>
 8007742:	1c42      	adds	r2, r0, #1
 8007744:	d101      	bne.n	800774a <__sflush_r+0x76>
 8007746:	682b      	ldr	r3, [r5, #0]
 8007748:	b903      	cbnz	r3, 800774c <__sflush_r+0x78>
 800774a:	6560      	str	r0, [r4, #84]	@ 0x54
 800774c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800774e:	602f      	str	r7, [r5, #0]
 8007750:	b1b9      	cbz	r1, 8007782 <__sflush_r+0xae>
 8007752:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007756:	4299      	cmp	r1, r3
 8007758:	d002      	beq.n	8007760 <__sflush_r+0x8c>
 800775a:	4628      	mov	r0, r5
 800775c:	f7ff f9e0 	bl	8006b20 <_free_r>
 8007760:	2300      	movs	r3, #0
 8007762:	6363      	str	r3, [r4, #52]	@ 0x34
 8007764:	e00d      	b.n	8007782 <__sflush_r+0xae>
 8007766:	2301      	movs	r3, #1
 8007768:	4628      	mov	r0, r5
 800776a:	47b0      	blx	r6
 800776c:	4602      	mov	r2, r0
 800776e:	1c50      	adds	r0, r2, #1
 8007770:	d1c9      	bne.n	8007706 <__sflush_r+0x32>
 8007772:	682b      	ldr	r3, [r5, #0]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d0c6      	beq.n	8007706 <__sflush_r+0x32>
 8007778:	2b1d      	cmp	r3, #29
 800777a:	d001      	beq.n	8007780 <__sflush_r+0xac>
 800777c:	2b16      	cmp	r3, #22
 800777e:	d11e      	bne.n	80077be <__sflush_r+0xea>
 8007780:	602f      	str	r7, [r5, #0]
 8007782:	2000      	movs	r0, #0
 8007784:	e022      	b.n	80077cc <__sflush_r+0xf8>
 8007786:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800778a:	b21b      	sxth	r3, r3
 800778c:	e01b      	b.n	80077c6 <__sflush_r+0xf2>
 800778e:	690f      	ldr	r7, [r1, #16]
 8007790:	2f00      	cmp	r7, #0
 8007792:	d0f6      	beq.n	8007782 <__sflush_r+0xae>
 8007794:	0793      	lsls	r3, r2, #30
 8007796:	680e      	ldr	r6, [r1, #0]
 8007798:	bf08      	it	eq
 800779a:	694b      	ldreq	r3, [r1, #20]
 800779c:	600f      	str	r7, [r1, #0]
 800779e:	bf18      	it	ne
 80077a0:	2300      	movne	r3, #0
 80077a2:	eba6 0807 	sub.w	r8, r6, r7
 80077a6:	608b      	str	r3, [r1, #8]
 80077a8:	f1b8 0f00 	cmp.w	r8, #0
 80077ac:	dde9      	ble.n	8007782 <__sflush_r+0xae>
 80077ae:	6a21      	ldr	r1, [r4, #32]
 80077b0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80077b2:	4643      	mov	r3, r8
 80077b4:	463a      	mov	r2, r7
 80077b6:	4628      	mov	r0, r5
 80077b8:	47b0      	blx	r6
 80077ba:	2800      	cmp	r0, #0
 80077bc:	dc08      	bgt.n	80077d0 <__sflush_r+0xfc>
 80077be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80077c6:	81a3      	strh	r3, [r4, #12]
 80077c8:	f04f 30ff 	mov.w	r0, #4294967295
 80077cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077d0:	4407      	add	r7, r0
 80077d2:	eba8 0800 	sub.w	r8, r8, r0
 80077d6:	e7e7      	b.n	80077a8 <__sflush_r+0xd4>
 80077d8:	dfbffffe 	.word	0xdfbffffe

080077dc <_fflush_r>:
 80077dc:	b538      	push	{r3, r4, r5, lr}
 80077de:	690b      	ldr	r3, [r1, #16]
 80077e0:	4605      	mov	r5, r0
 80077e2:	460c      	mov	r4, r1
 80077e4:	b913      	cbnz	r3, 80077ec <_fflush_r+0x10>
 80077e6:	2500      	movs	r5, #0
 80077e8:	4628      	mov	r0, r5
 80077ea:	bd38      	pop	{r3, r4, r5, pc}
 80077ec:	b118      	cbz	r0, 80077f6 <_fflush_r+0x1a>
 80077ee:	6a03      	ldr	r3, [r0, #32]
 80077f0:	b90b      	cbnz	r3, 80077f6 <_fflush_r+0x1a>
 80077f2:	f7fe fa2d 	bl	8005c50 <__sinit>
 80077f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d0f3      	beq.n	80077e6 <_fflush_r+0xa>
 80077fe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007800:	07d0      	lsls	r0, r2, #31
 8007802:	d404      	bmi.n	800780e <_fflush_r+0x32>
 8007804:	0599      	lsls	r1, r3, #22
 8007806:	d402      	bmi.n	800780e <_fflush_r+0x32>
 8007808:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800780a:	f7fe fb38 	bl	8005e7e <__retarget_lock_acquire_recursive>
 800780e:	4628      	mov	r0, r5
 8007810:	4621      	mov	r1, r4
 8007812:	f7ff ff5f 	bl	80076d4 <__sflush_r>
 8007816:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007818:	07da      	lsls	r2, r3, #31
 800781a:	4605      	mov	r5, r0
 800781c:	d4e4      	bmi.n	80077e8 <_fflush_r+0xc>
 800781e:	89a3      	ldrh	r3, [r4, #12]
 8007820:	059b      	lsls	r3, r3, #22
 8007822:	d4e1      	bmi.n	80077e8 <_fflush_r+0xc>
 8007824:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007826:	f7fe fb2b 	bl	8005e80 <__retarget_lock_release_recursive>
 800782a:	e7dd      	b.n	80077e8 <_fflush_r+0xc>

0800782c <memmove>:
 800782c:	4288      	cmp	r0, r1
 800782e:	b510      	push	{r4, lr}
 8007830:	eb01 0402 	add.w	r4, r1, r2
 8007834:	d902      	bls.n	800783c <memmove+0x10>
 8007836:	4284      	cmp	r4, r0
 8007838:	4623      	mov	r3, r4
 800783a:	d807      	bhi.n	800784c <memmove+0x20>
 800783c:	1e43      	subs	r3, r0, #1
 800783e:	42a1      	cmp	r1, r4
 8007840:	d008      	beq.n	8007854 <memmove+0x28>
 8007842:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007846:	f803 2f01 	strb.w	r2, [r3, #1]!
 800784a:	e7f8      	b.n	800783e <memmove+0x12>
 800784c:	4402      	add	r2, r0
 800784e:	4601      	mov	r1, r0
 8007850:	428a      	cmp	r2, r1
 8007852:	d100      	bne.n	8007856 <memmove+0x2a>
 8007854:	bd10      	pop	{r4, pc}
 8007856:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800785a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800785e:	e7f7      	b.n	8007850 <memmove+0x24>

08007860 <_sbrk_r>:
 8007860:	b538      	push	{r3, r4, r5, lr}
 8007862:	4d06      	ldr	r5, [pc, #24]	@ (800787c <_sbrk_r+0x1c>)
 8007864:	2300      	movs	r3, #0
 8007866:	4604      	mov	r4, r0
 8007868:	4608      	mov	r0, r1
 800786a:	602b      	str	r3, [r5, #0]
 800786c:	f7fa f8b6 	bl	80019dc <_sbrk>
 8007870:	1c43      	adds	r3, r0, #1
 8007872:	d102      	bne.n	800787a <_sbrk_r+0x1a>
 8007874:	682b      	ldr	r3, [r5, #0]
 8007876:	b103      	cbz	r3, 800787a <_sbrk_r+0x1a>
 8007878:	6023      	str	r3, [r4, #0]
 800787a:	bd38      	pop	{r3, r4, r5, pc}
 800787c:	20000468 	.word	0x20000468

08007880 <memcpy>:
 8007880:	440a      	add	r2, r1
 8007882:	4291      	cmp	r1, r2
 8007884:	f100 33ff 	add.w	r3, r0, #4294967295
 8007888:	d100      	bne.n	800788c <memcpy+0xc>
 800788a:	4770      	bx	lr
 800788c:	b510      	push	{r4, lr}
 800788e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007892:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007896:	4291      	cmp	r1, r2
 8007898:	d1f9      	bne.n	800788e <memcpy+0xe>
 800789a:	bd10      	pop	{r4, pc}

0800789c <__assert_func>:
 800789c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800789e:	4614      	mov	r4, r2
 80078a0:	461a      	mov	r2, r3
 80078a2:	4b09      	ldr	r3, [pc, #36]	@ (80078c8 <__assert_func+0x2c>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	4605      	mov	r5, r0
 80078a8:	68d8      	ldr	r0, [r3, #12]
 80078aa:	b954      	cbnz	r4, 80078c2 <__assert_func+0x26>
 80078ac:	4b07      	ldr	r3, [pc, #28]	@ (80078cc <__assert_func+0x30>)
 80078ae:	461c      	mov	r4, r3
 80078b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80078b4:	9100      	str	r1, [sp, #0]
 80078b6:	462b      	mov	r3, r5
 80078b8:	4905      	ldr	r1, [pc, #20]	@ (80078d0 <__assert_func+0x34>)
 80078ba:	f000 f86f 	bl	800799c <fiprintf>
 80078be:	f000 f87f 	bl	80079c0 <abort>
 80078c2:	4b04      	ldr	r3, [pc, #16]	@ (80078d4 <__assert_func+0x38>)
 80078c4:	e7f4      	b.n	80078b0 <__assert_func+0x14>
 80078c6:	bf00      	nop
 80078c8:	20000018 	.word	0x20000018
 80078cc:	08008256 	.word	0x08008256
 80078d0:	08008228 	.word	0x08008228
 80078d4:	0800821b 	.word	0x0800821b

080078d8 <_calloc_r>:
 80078d8:	b570      	push	{r4, r5, r6, lr}
 80078da:	fba1 5402 	umull	r5, r4, r1, r2
 80078de:	b93c      	cbnz	r4, 80078f0 <_calloc_r+0x18>
 80078e0:	4629      	mov	r1, r5
 80078e2:	f7ff f991 	bl	8006c08 <_malloc_r>
 80078e6:	4606      	mov	r6, r0
 80078e8:	b928      	cbnz	r0, 80078f6 <_calloc_r+0x1e>
 80078ea:	2600      	movs	r6, #0
 80078ec:	4630      	mov	r0, r6
 80078ee:	bd70      	pop	{r4, r5, r6, pc}
 80078f0:	220c      	movs	r2, #12
 80078f2:	6002      	str	r2, [r0, #0]
 80078f4:	e7f9      	b.n	80078ea <_calloc_r+0x12>
 80078f6:	462a      	mov	r2, r5
 80078f8:	4621      	mov	r1, r4
 80078fa:	f7fe fa42 	bl	8005d82 <memset>
 80078fe:	e7f5      	b.n	80078ec <_calloc_r+0x14>

08007900 <__ascii_mbtowc>:
 8007900:	b082      	sub	sp, #8
 8007902:	b901      	cbnz	r1, 8007906 <__ascii_mbtowc+0x6>
 8007904:	a901      	add	r1, sp, #4
 8007906:	b142      	cbz	r2, 800791a <__ascii_mbtowc+0x1a>
 8007908:	b14b      	cbz	r3, 800791e <__ascii_mbtowc+0x1e>
 800790a:	7813      	ldrb	r3, [r2, #0]
 800790c:	600b      	str	r3, [r1, #0]
 800790e:	7812      	ldrb	r2, [r2, #0]
 8007910:	1e10      	subs	r0, r2, #0
 8007912:	bf18      	it	ne
 8007914:	2001      	movne	r0, #1
 8007916:	b002      	add	sp, #8
 8007918:	4770      	bx	lr
 800791a:	4610      	mov	r0, r2
 800791c:	e7fb      	b.n	8007916 <__ascii_mbtowc+0x16>
 800791e:	f06f 0001 	mvn.w	r0, #1
 8007922:	e7f8      	b.n	8007916 <__ascii_mbtowc+0x16>

08007924 <_realloc_r>:
 8007924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007928:	4680      	mov	r8, r0
 800792a:	4615      	mov	r5, r2
 800792c:	460c      	mov	r4, r1
 800792e:	b921      	cbnz	r1, 800793a <_realloc_r+0x16>
 8007930:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007934:	4611      	mov	r1, r2
 8007936:	f7ff b967 	b.w	8006c08 <_malloc_r>
 800793a:	b92a      	cbnz	r2, 8007948 <_realloc_r+0x24>
 800793c:	f7ff f8f0 	bl	8006b20 <_free_r>
 8007940:	2400      	movs	r4, #0
 8007942:	4620      	mov	r0, r4
 8007944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007948:	f000 f841 	bl	80079ce <_malloc_usable_size_r>
 800794c:	4285      	cmp	r5, r0
 800794e:	4606      	mov	r6, r0
 8007950:	d802      	bhi.n	8007958 <_realloc_r+0x34>
 8007952:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007956:	d8f4      	bhi.n	8007942 <_realloc_r+0x1e>
 8007958:	4629      	mov	r1, r5
 800795a:	4640      	mov	r0, r8
 800795c:	f7ff f954 	bl	8006c08 <_malloc_r>
 8007960:	4607      	mov	r7, r0
 8007962:	2800      	cmp	r0, #0
 8007964:	d0ec      	beq.n	8007940 <_realloc_r+0x1c>
 8007966:	42b5      	cmp	r5, r6
 8007968:	462a      	mov	r2, r5
 800796a:	4621      	mov	r1, r4
 800796c:	bf28      	it	cs
 800796e:	4632      	movcs	r2, r6
 8007970:	f7ff ff86 	bl	8007880 <memcpy>
 8007974:	4621      	mov	r1, r4
 8007976:	4640      	mov	r0, r8
 8007978:	f7ff f8d2 	bl	8006b20 <_free_r>
 800797c:	463c      	mov	r4, r7
 800797e:	e7e0      	b.n	8007942 <_realloc_r+0x1e>

08007980 <__ascii_wctomb>:
 8007980:	4603      	mov	r3, r0
 8007982:	4608      	mov	r0, r1
 8007984:	b141      	cbz	r1, 8007998 <__ascii_wctomb+0x18>
 8007986:	2aff      	cmp	r2, #255	@ 0xff
 8007988:	d904      	bls.n	8007994 <__ascii_wctomb+0x14>
 800798a:	228a      	movs	r2, #138	@ 0x8a
 800798c:	601a      	str	r2, [r3, #0]
 800798e:	f04f 30ff 	mov.w	r0, #4294967295
 8007992:	4770      	bx	lr
 8007994:	700a      	strb	r2, [r1, #0]
 8007996:	2001      	movs	r0, #1
 8007998:	4770      	bx	lr
	...

0800799c <fiprintf>:
 800799c:	b40e      	push	{r1, r2, r3}
 800799e:	b503      	push	{r0, r1, lr}
 80079a0:	4601      	mov	r1, r0
 80079a2:	ab03      	add	r3, sp, #12
 80079a4:	4805      	ldr	r0, [pc, #20]	@ (80079bc <fiprintf+0x20>)
 80079a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80079aa:	6800      	ldr	r0, [r0, #0]
 80079ac:	9301      	str	r3, [sp, #4]
 80079ae:	f000 f83f 	bl	8007a30 <_vfiprintf_r>
 80079b2:	b002      	add	sp, #8
 80079b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80079b8:	b003      	add	sp, #12
 80079ba:	4770      	bx	lr
 80079bc:	20000018 	.word	0x20000018

080079c0 <abort>:
 80079c0:	b508      	push	{r3, lr}
 80079c2:	2006      	movs	r0, #6
 80079c4:	f000 fa08 	bl	8007dd8 <raise>
 80079c8:	2001      	movs	r0, #1
 80079ca:	f7f9 ff8e 	bl	80018ea <_exit>

080079ce <_malloc_usable_size_r>:
 80079ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079d2:	1f18      	subs	r0, r3, #4
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	bfbc      	itt	lt
 80079d8:	580b      	ldrlt	r3, [r1, r0]
 80079da:	18c0      	addlt	r0, r0, r3
 80079dc:	4770      	bx	lr

080079de <__sfputc_r>:
 80079de:	6893      	ldr	r3, [r2, #8]
 80079e0:	3b01      	subs	r3, #1
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	b410      	push	{r4}
 80079e6:	6093      	str	r3, [r2, #8]
 80079e8:	da08      	bge.n	80079fc <__sfputc_r+0x1e>
 80079ea:	6994      	ldr	r4, [r2, #24]
 80079ec:	42a3      	cmp	r3, r4
 80079ee:	db01      	blt.n	80079f4 <__sfputc_r+0x16>
 80079f0:	290a      	cmp	r1, #10
 80079f2:	d103      	bne.n	80079fc <__sfputc_r+0x1e>
 80079f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80079f8:	f000 b932 	b.w	8007c60 <__swbuf_r>
 80079fc:	6813      	ldr	r3, [r2, #0]
 80079fe:	1c58      	adds	r0, r3, #1
 8007a00:	6010      	str	r0, [r2, #0]
 8007a02:	7019      	strb	r1, [r3, #0]
 8007a04:	4608      	mov	r0, r1
 8007a06:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a0a:	4770      	bx	lr

08007a0c <__sfputs_r>:
 8007a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a0e:	4606      	mov	r6, r0
 8007a10:	460f      	mov	r7, r1
 8007a12:	4614      	mov	r4, r2
 8007a14:	18d5      	adds	r5, r2, r3
 8007a16:	42ac      	cmp	r4, r5
 8007a18:	d101      	bne.n	8007a1e <__sfputs_r+0x12>
 8007a1a:	2000      	movs	r0, #0
 8007a1c:	e007      	b.n	8007a2e <__sfputs_r+0x22>
 8007a1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a22:	463a      	mov	r2, r7
 8007a24:	4630      	mov	r0, r6
 8007a26:	f7ff ffda 	bl	80079de <__sfputc_r>
 8007a2a:	1c43      	adds	r3, r0, #1
 8007a2c:	d1f3      	bne.n	8007a16 <__sfputs_r+0xa>
 8007a2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007a30 <_vfiprintf_r>:
 8007a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a34:	460d      	mov	r5, r1
 8007a36:	b09d      	sub	sp, #116	@ 0x74
 8007a38:	4614      	mov	r4, r2
 8007a3a:	4698      	mov	r8, r3
 8007a3c:	4606      	mov	r6, r0
 8007a3e:	b118      	cbz	r0, 8007a48 <_vfiprintf_r+0x18>
 8007a40:	6a03      	ldr	r3, [r0, #32]
 8007a42:	b90b      	cbnz	r3, 8007a48 <_vfiprintf_r+0x18>
 8007a44:	f7fe f904 	bl	8005c50 <__sinit>
 8007a48:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007a4a:	07d9      	lsls	r1, r3, #31
 8007a4c:	d405      	bmi.n	8007a5a <_vfiprintf_r+0x2a>
 8007a4e:	89ab      	ldrh	r3, [r5, #12]
 8007a50:	059a      	lsls	r2, r3, #22
 8007a52:	d402      	bmi.n	8007a5a <_vfiprintf_r+0x2a>
 8007a54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007a56:	f7fe fa12 	bl	8005e7e <__retarget_lock_acquire_recursive>
 8007a5a:	89ab      	ldrh	r3, [r5, #12]
 8007a5c:	071b      	lsls	r3, r3, #28
 8007a5e:	d501      	bpl.n	8007a64 <_vfiprintf_r+0x34>
 8007a60:	692b      	ldr	r3, [r5, #16]
 8007a62:	b99b      	cbnz	r3, 8007a8c <_vfiprintf_r+0x5c>
 8007a64:	4629      	mov	r1, r5
 8007a66:	4630      	mov	r0, r6
 8007a68:	f000 f938 	bl	8007cdc <__swsetup_r>
 8007a6c:	b170      	cbz	r0, 8007a8c <_vfiprintf_r+0x5c>
 8007a6e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007a70:	07dc      	lsls	r4, r3, #31
 8007a72:	d504      	bpl.n	8007a7e <_vfiprintf_r+0x4e>
 8007a74:	f04f 30ff 	mov.w	r0, #4294967295
 8007a78:	b01d      	add	sp, #116	@ 0x74
 8007a7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a7e:	89ab      	ldrh	r3, [r5, #12]
 8007a80:	0598      	lsls	r0, r3, #22
 8007a82:	d4f7      	bmi.n	8007a74 <_vfiprintf_r+0x44>
 8007a84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007a86:	f7fe f9fb 	bl	8005e80 <__retarget_lock_release_recursive>
 8007a8a:	e7f3      	b.n	8007a74 <_vfiprintf_r+0x44>
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a90:	2320      	movs	r3, #32
 8007a92:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007a96:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a9a:	2330      	movs	r3, #48	@ 0x30
 8007a9c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007c4c <_vfiprintf_r+0x21c>
 8007aa0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007aa4:	f04f 0901 	mov.w	r9, #1
 8007aa8:	4623      	mov	r3, r4
 8007aaa:	469a      	mov	sl, r3
 8007aac:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ab0:	b10a      	cbz	r2, 8007ab6 <_vfiprintf_r+0x86>
 8007ab2:	2a25      	cmp	r2, #37	@ 0x25
 8007ab4:	d1f9      	bne.n	8007aaa <_vfiprintf_r+0x7a>
 8007ab6:	ebba 0b04 	subs.w	fp, sl, r4
 8007aba:	d00b      	beq.n	8007ad4 <_vfiprintf_r+0xa4>
 8007abc:	465b      	mov	r3, fp
 8007abe:	4622      	mov	r2, r4
 8007ac0:	4629      	mov	r1, r5
 8007ac2:	4630      	mov	r0, r6
 8007ac4:	f7ff ffa2 	bl	8007a0c <__sfputs_r>
 8007ac8:	3001      	adds	r0, #1
 8007aca:	f000 80a7 	beq.w	8007c1c <_vfiprintf_r+0x1ec>
 8007ace:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007ad0:	445a      	add	r2, fp
 8007ad2:	9209      	str	r2, [sp, #36]	@ 0x24
 8007ad4:	f89a 3000 	ldrb.w	r3, [sl]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	f000 809f 	beq.w	8007c1c <_vfiprintf_r+0x1ec>
 8007ade:	2300      	movs	r3, #0
 8007ae0:	f04f 32ff 	mov.w	r2, #4294967295
 8007ae4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ae8:	f10a 0a01 	add.w	sl, sl, #1
 8007aec:	9304      	str	r3, [sp, #16]
 8007aee:	9307      	str	r3, [sp, #28]
 8007af0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007af4:	931a      	str	r3, [sp, #104]	@ 0x68
 8007af6:	4654      	mov	r4, sl
 8007af8:	2205      	movs	r2, #5
 8007afa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007afe:	4853      	ldr	r0, [pc, #332]	@ (8007c4c <_vfiprintf_r+0x21c>)
 8007b00:	f7f8 fb6e 	bl	80001e0 <memchr>
 8007b04:	9a04      	ldr	r2, [sp, #16]
 8007b06:	b9d8      	cbnz	r0, 8007b40 <_vfiprintf_r+0x110>
 8007b08:	06d1      	lsls	r1, r2, #27
 8007b0a:	bf44      	itt	mi
 8007b0c:	2320      	movmi	r3, #32
 8007b0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007b12:	0713      	lsls	r3, r2, #28
 8007b14:	bf44      	itt	mi
 8007b16:	232b      	movmi	r3, #43	@ 0x2b
 8007b18:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007b1c:	f89a 3000 	ldrb.w	r3, [sl]
 8007b20:	2b2a      	cmp	r3, #42	@ 0x2a
 8007b22:	d015      	beq.n	8007b50 <_vfiprintf_r+0x120>
 8007b24:	9a07      	ldr	r2, [sp, #28]
 8007b26:	4654      	mov	r4, sl
 8007b28:	2000      	movs	r0, #0
 8007b2a:	f04f 0c0a 	mov.w	ip, #10
 8007b2e:	4621      	mov	r1, r4
 8007b30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b34:	3b30      	subs	r3, #48	@ 0x30
 8007b36:	2b09      	cmp	r3, #9
 8007b38:	d94b      	bls.n	8007bd2 <_vfiprintf_r+0x1a2>
 8007b3a:	b1b0      	cbz	r0, 8007b6a <_vfiprintf_r+0x13a>
 8007b3c:	9207      	str	r2, [sp, #28]
 8007b3e:	e014      	b.n	8007b6a <_vfiprintf_r+0x13a>
 8007b40:	eba0 0308 	sub.w	r3, r0, r8
 8007b44:	fa09 f303 	lsl.w	r3, r9, r3
 8007b48:	4313      	orrs	r3, r2
 8007b4a:	9304      	str	r3, [sp, #16]
 8007b4c:	46a2      	mov	sl, r4
 8007b4e:	e7d2      	b.n	8007af6 <_vfiprintf_r+0xc6>
 8007b50:	9b03      	ldr	r3, [sp, #12]
 8007b52:	1d19      	adds	r1, r3, #4
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	9103      	str	r1, [sp, #12]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	bfbb      	ittet	lt
 8007b5c:	425b      	neglt	r3, r3
 8007b5e:	f042 0202 	orrlt.w	r2, r2, #2
 8007b62:	9307      	strge	r3, [sp, #28]
 8007b64:	9307      	strlt	r3, [sp, #28]
 8007b66:	bfb8      	it	lt
 8007b68:	9204      	strlt	r2, [sp, #16]
 8007b6a:	7823      	ldrb	r3, [r4, #0]
 8007b6c:	2b2e      	cmp	r3, #46	@ 0x2e
 8007b6e:	d10a      	bne.n	8007b86 <_vfiprintf_r+0x156>
 8007b70:	7863      	ldrb	r3, [r4, #1]
 8007b72:	2b2a      	cmp	r3, #42	@ 0x2a
 8007b74:	d132      	bne.n	8007bdc <_vfiprintf_r+0x1ac>
 8007b76:	9b03      	ldr	r3, [sp, #12]
 8007b78:	1d1a      	adds	r2, r3, #4
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	9203      	str	r2, [sp, #12]
 8007b7e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007b82:	3402      	adds	r4, #2
 8007b84:	9305      	str	r3, [sp, #20]
 8007b86:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007c5c <_vfiprintf_r+0x22c>
 8007b8a:	7821      	ldrb	r1, [r4, #0]
 8007b8c:	2203      	movs	r2, #3
 8007b8e:	4650      	mov	r0, sl
 8007b90:	f7f8 fb26 	bl	80001e0 <memchr>
 8007b94:	b138      	cbz	r0, 8007ba6 <_vfiprintf_r+0x176>
 8007b96:	9b04      	ldr	r3, [sp, #16]
 8007b98:	eba0 000a 	sub.w	r0, r0, sl
 8007b9c:	2240      	movs	r2, #64	@ 0x40
 8007b9e:	4082      	lsls	r2, r0
 8007ba0:	4313      	orrs	r3, r2
 8007ba2:	3401      	adds	r4, #1
 8007ba4:	9304      	str	r3, [sp, #16]
 8007ba6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007baa:	4829      	ldr	r0, [pc, #164]	@ (8007c50 <_vfiprintf_r+0x220>)
 8007bac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007bb0:	2206      	movs	r2, #6
 8007bb2:	f7f8 fb15 	bl	80001e0 <memchr>
 8007bb6:	2800      	cmp	r0, #0
 8007bb8:	d03f      	beq.n	8007c3a <_vfiprintf_r+0x20a>
 8007bba:	4b26      	ldr	r3, [pc, #152]	@ (8007c54 <_vfiprintf_r+0x224>)
 8007bbc:	bb1b      	cbnz	r3, 8007c06 <_vfiprintf_r+0x1d6>
 8007bbe:	9b03      	ldr	r3, [sp, #12]
 8007bc0:	3307      	adds	r3, #7
 8007bc2:	f023 0307 	bic.w	r3, r3, #7
 8007bc6:	3308      	adds	r3, #8
 8007bc8:	9303      	str	r3, [sp, #12]
 8007bca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bcc:	443b      	add	r3, r7
 8007bce:	9309      	str	r3, [sp, #36]	@ 0x24
 8007bd0:	e76a      	b.n	8007aa8 <_vfiprintf_r+0x78>
 8007bd2:	fb0c 3202 	mla	r2, ip, r2, r3
 8007bd6:	460c      	mov	r4, r1
 8007bd8:	2001      	movs	r0, #1
 8007bda:	e7a8      	b.n	8007b2e <_vfiprintf_r+0xfe>
 8007bdc:	2300      	movs	r3, #0
 8007bde:	3401      	adds	r4, #1
 8007be0:	9305      	str	r3, [sp, #20]
 8007be2:	4619      	mov	r1, r3
 8007be4:	f04f 0c0a 	mov.w	ip, #10
 8007be8:	4620      	mov	r0, r4
 8007bea:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007bee:	3a30      	subs	r2, #48	@ 0x30
 8007bf0:	2a09      	cmp	r2, #9
 8007bf2:	d903      	bls.n	8007bfc <_vfiprintf_r+0x1cc>
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d0c6      	beq.n	8007b86 <_vfiprintf_r+0x156>
 8007bf8:	9105      	str	r1, [sp, #20]
 8007bfa:	e7c4      	b.n	8007b86 <_vfiprintf_r+0x156>
 8007bfc:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c00:	4604      	mov	r4, r0
 8007c02:	2301      	movs	r3, #1
 8007c04:	e7f0      	b.n	8007be8 <_vfiprintf_r+0x1b8>
 8007c06:	ab03      	add	r3, sp, #12
 8007c08:	9300      	str	r3, [sp, #0]
 8007c0a:	462a      	mov	r2, r5
 8007c0c:	4b12      	ldr	r3, [pc, #72]	@ (8007c58 <_vfiprintf_r+0x228>)
 8007c0e:	a904      	add	r1, sp, #16
 8007c10:	4630      	mov	r0, r6
 8007c12:	f7fd fbd9 	bl	80053c8 <_printf_float>
 8007c16:	4607      	mov	r7, r0
 8007c18:	1c78      	adds	r0, r7, #1
 8007c1a:	d1d6      	bne.n	8007bca <_vfiprintf_r+0x19a>
 8007c1c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007c1e:	07d9      	lsls	r1, r3, #31
 8007c20:	d405      	bmi.n	8007c2e <_vfiprintf_r+0x1fe>
 8007c22:	89ab      	ldrh	r3, [r5, #12]
 8007c24:	059a      	lsls	r2, r3, #22
 8007c26:	d402      	bmi.n	8007c2e <_vfiprintf_r+0x1fe>
 8007c28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007c2a:	f7fe f929 	bl	8005e80 <__retarget_lock_release_recursive>
 8007c2e:	89ab      	ldrh	r3, [r5, #12]
 8007c30:	065b      	lsls	r3, r3, #25
 8007c32:	f53f af1f 	bmi.w	8007a74 <_vfiprintf_r+0x44>
 8007c36:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007c38:	e71e      	b.n	8007a78 <_vfiprintf_r+0x48>
 8007c3a:	ab03      	add	r3, sp, #12
 8007c3c:	9300      	str	r3, [sp, #0]
 8007c3e:	462a      	mov	r2, r5
 8007c40:	4b05      	ldr	r3, [pc, #20]	@ (8007c58 <_vfiprintf_r+0x228>)
 8007c42:	a904      	add	r1, sp, #16
 8007c44:	4630      	mov	r0, r6
 8007c46:	f7fd fe57 	bl	80058f8 <_printf_i>
 8007c4a:	e7e4      	b.n	8007c16 <_vfiprintf_r+0x1e6>
 8007c4c:	08008200 	.word	0x08008200
 8007c50:	0800820a 	.word	0x0800820a
 8007c54:	080053c9 	.word	0x080053c9
 8007c58:	08007a0d 	.word	0x08007a0d
 8007c5c:	08008206 	.word	0x08008206

08007c60 <__swbuf_r>:
 8007c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c62:	460e      	mov	r6, r1
 8007c64:	4614      	mov	r4, r2
 8007c66:	4605      	mov	r5, r0
 8007c68:	b118      	cbz	r0, 8007c72 <__swbuf_r+0x12>
 8007c6a:	6a03      	ldr	r3, [r0, #32]
 8007c6c:	b90b      	cbnz	r3, 8007c72 <__swbuf_r+0x12>
 8007c6e:	f7fd ffef 	bl	8005c50 <__sinit>
 8007c72:	69a3      	ldr	r3, [r4, #24]
 8007c74:	60a3      	str	r3, [r4, #8]
 8007c76:	89a3      	ldrh	r3, [r4, #12]
 8007c78:	071a      	lsls	r2, r3, #28
 8007c7a:	d501      	bpl.n	8007c80 <__swbuf_r+0x20>
 8007c7c:	6923      	ldr	r3, [r4, #16]
 8007c7e:	b943      	cbnz	r3, 8007c92 <__swbuf_r+0x32>
 8007c80:	4621      	mov	r1, r4
 8007c82:	4628      	mov	r0, r5
 8007c84:	f000 f82a 	bl	8007cdc <__swsetup_r>
 8007c88:	b118      	cbz	r0, 8007c92 <__swbuf_r+0x32>
 8007c8a:	f04f 37ff 	mov.w	r7, #4294967295
 8007c8e:	4638      	mov	r0, r7
 8007c90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c92:	6823      	ldr	r3, [r4, #0]
 8007c94:	6922      	ldr	r2, [r4, #16]
 8007c96:	1a98      	subs	r0, r3, r2
 8007c98:	6963      	ldr	r3, [r4, #20]
 8007c9a:	b2f6      	uxtb	r6, r6
 8007c9c:	4283      	cmp	r3, r0
 8007c9e:	4637      	mov	r7, r6
 8007ca0:	dc05      	bgt.n	8007cae <__swbuf_r+0x4e>
 8007ca2:	4621      	mov	r1, r4
 8007ca4:	4628      	mov	r0, r5
 8007ca6:	f7ff fd99 	bl	80077dc <_fflush_r>
 8007caa:	2800      	cmp	r0, #0
 8007cac:	d1ed      	bne.n	8007c8a <__swbuf_r+0x2a>
 8007cae:	68a3      	ldr	r3, [r4, #8]
 8007cb0:	3b01      	subs	r3, #1
 8007cb2:	60a3      	str	r3, [r4, #8]
 8007cb4:	6823      	ldr	r3, [r4, #0]
 8007cb6:	1c5a      	adds	r2, r3, #1
 8007cb8:	6022      	str	r2, [r4, #0]
 8007cba:	701e      	strb	r6, [r3, #0]
 8007cbc:	6962      	ldr	r2, [r4, #20]
 8007cbe:	1c43      	adds	r3, r0, #1
 8007cc0:	429a      	cmp	r2, r3
 8007cc2:	d004      	beq.n	8007cce <__swbuf_r+0x6e>
 8007cc4:	89a3      	ldrh	r3, [r4, #12]
 8007cc6:	07db      	lsls	r3, r3, #31
 8007cc8:	d5e1      	bpl.n	8007c8e <__swbuf_r+0x2e>
 8007cca:	2e0a      	cmp	r6, #10
 8007ccc:	d1df      	bne.n	8007c8e <__swbuf_r+0x2e>
 8007cce:	4621      	mov	r1, r4
 8007cd0:	4628      	mov	r0, r5
 8007cd2:	f7ff fd83 	bl	80077dc <_fflush_r>
 8007cd6:	2800      	cmp	r0, #0
 8007cd8:	d0d9      	beq.n	8007c8e <__swbuf_r+0x2e>
 8007cda:	e7d6      	b.n	8007c8a <__swbuf_r+0x2a>

08007cdc <__swsetup_r>:
 8007cdc:	b538      	push	{r3, r4, r5, lr}
 8007cde:	4b29      	ldr	r3, [pc, #164]	@ (8007d84 <__swsetup_r+0xa8>)
 8007ce0:	4605      	mov	r5, r0
 8007ce2:	6818      	ldr	r0, [r3, #0]
 8007ce4:	460c      	mov	r4, r1
 8007ce6:	b118      	cbz	r0, 8007cf0 <__swsetup_r+0x14>
 8007ce8:	6a03      	ldr	r3, [r0, #32]
 8007cea:	b90b      	cbnz	r3, 8007cf0 <__swsetup_r+0x14>
 8007cec:	f7fd ffb0 	bl	8005c50 <__sinit>
 8007cf0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cf4:	0719      	lsls	r1, r3, #28
 8007cf6:	d422      	bmi.n	8007d3e <__swsetup_r+0x62>
 8007cf8:	06da      	lsls	r2, r3, #27
 8007cfa:	d407      	bmi.n	8007d0c <__swsetup_r+0x30>
 8007cfc:	2209      	movs	r2, #9
 8007cfe:	602a      	str	r2, [r5, #0]
 8007d00:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d04:	81a3      	strh	r3, [r4, #12]
 8007d06:	f04f 30ff 	mov.w	r0, #4294967295
 8007d0a:	e033      	b.n	8007d74 <__swsetup_r+0x98>
 8007d0c:	0758      	lsls	r0, r3, #29
 8007d0e:	d512      	bpl.n	8007d36 <__swsetup_r+0x5a>
 8007d10:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007d12:	b141      	cbz	r1, 8007d26 <__swsetup_r+0x4a>
 8007d14:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007d18:	4299      	cmp	r1, r3
 8007d1a:	d002      	beq.n	8007d22 <__swsetup_r+0x46>
 8007d1c:	4628      	mov	r0, r5
 8007d1e:	f7fe feff 	bl	8006b20 <_free_r>
 8007d22:	2300      	movs	r3, #0
 8007d24:	6363      	str	r3, [r4, #52]	@ 0x34
 8007d26:	89a3      	ldrh	r3, [r4, #12]
 8007d28:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007d2c:	81a3      	strh	r3, [r4, #12]
 8007d2e:	2300      	movs	r3, #0
 8007d30:	6063      	str	r3, [r4, #4]
 8007d32:	6923      	ldr	r3, [r4, #16]
 8007d34:	6023      	str	r3, [r4, #0]
 8007d36:	89a3      	ldrh	r3, [r4, #12]
 8007d38:	f043 0308 	orr.w	r3, r3, #8
 8007d3c:	81a3      	strh	r3, [r4, #12]
 8007d3e:	6923      	ldr	r3, [r4, #16]
 8007d40:	b94b      	cbnz	r3, 8007d56 <__swsetup_r+0x7a>
 8007d42:	89a3      	ldrh	r3, [r4, #12]
 8007d44:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007d48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d4c:	d003      	beq.n	8007d56 <__swsetup_r+0x7a>
 8007d4e:	4621      	mov	r1, r4
 8007d50:	4628      	mov	r0, r5
 8007d52:	f000 f883 	bl	8007e5c <__smakebuf_r>
 8007d56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d5a:	f013 0201 	ands.w	r2, r3, #1
 8007d5e:	d00a      	beq.n	8007d76 <__swsetup_r+0x9a>
 8007d60:	2200      	movs	r2, #0
 8007d62:	60a2      	str	r2, [r4, #8]
 8007d64:	6962      	ldr	r2, [r4, #20]
 8007d66:	4252      	negs	r2, r2
 8007d68:	61a2      	str	r2, [r4, #24]
 8007d6a:	6922      	ldr	r2, [r4, #16]
 8007d6c:	b942      	cbnz	r2, 8007d80 <__swsetup_r+0xa4>
 8007d6e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007d72:	d1c5      	bne.n	8007d00 <__swsetup_r+0x24>
 8007d74:	bd38      	pop	{r3, r4, r5, pc}
 8007d76:	0799      	lsls	r1, r3, #30
 8007d78:	bf58      	it	pl
 8007d7a:	6962      	ldrpl	r2, [r4, #20]
 8007d7c:	60a2      	str	r2, [r4, #8]
 8007d7e:	e7f4      	b.n	8007d6a <__swsetup_r+0x8e>
 8007d80:	2000      	movs	r0, #0
 8007d82:	e7f7      	b.n	8007d74 <__swsetup_r+0x98>
 8007d84:	20000018 	.word	0x20000018

08007d88 <_raise_r>:
 8007d88:	291f      	cmp	r1, #31
 8007d8a:	b538      	push	{r3, r4, r5, lr}
 8007d8c:	4605      	mov	r5, r0
 8007d8e:	460c      	mov	r4, r1
 8007d90:	d904      	bls.n	8007d9c <_raise_r+0x14>
 8007d92:	2316      	movs	r3, #22
 8007d94:	6003      	str	r3, [r0, #0]
 8007d96:	f04f 30ff 	mov.w	r0, #4294967295
 8007d9a:	bd38      	pop	{r3, r4, r5, pc}
 8007d9c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007d9e:	b112      	cbz	r2, 8007da6 <_raise_r+0x1e>
 8007da0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007da4:	b94b      	cbnz	r3, 8007dba <_raise_r+0x32>
 8007da6:	4628      	mov	r0, r5
 8007da8:	f000 f830 	bl	8007e0c <_getpid_r>
 8007dac:	4622      	mov	r2, r4
 8007dae:	4601      	mov	r1, r0
 8007db0:	4628      	mov	r0, r5
 8007db2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007db6:	f000 b817 	b.w	8007de8 <_kill_r>
 8007dba:	2b01      	cmp	r3, #1
 8007dbc:	d00a      	beq.n	8007dd4 <_raise_r+0x4c>
 8007dbe:	1c59      	adds	r1, r3, #1
 8007dc0:	d103      	bne.n	8007dca <_raise_r+0x42>
 8007dc2:	2316      	movs	r3, #22
 8007dc4:	6003      	str	r3, [r0, #0]
 8007dc6:	2001      	movs	r0, #1
 8007dc8:	e7e7      	b.n	8007d9a <_raise_r+0x12>
 8007dca:	2100      	movs	r1, #0
 8007dcc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007dd0:	4620      	mov	r0, r4
 8007dd2:	4798      	blx	r3
 8007dd4:	2000      	movs	r0, #0
 8007dd6:	e7e0      	b.n	8007d9a <_raise_r+0x12>

08007dd8 <raise>:
 8007dd8:	4b02      	ldr	r3, [pc, #8]	@ (8007de4 <raise+0xc>)
 8007dda:	4601      	mov	r1, r0
 8007ddc:	6818      	ldr	r0, [r3, #0]
 8007dde:	f7ff bfd3 	b.w	8007d88 <_raise_r>
 8007de2:	bf00      	nop
 8007de4:	20000018 	.word	0x20000018

08007de8 <_kill_r>:
 8007de8:	b538      	push	{r3, r4, r5, lr}
 8007dea:	4d07      	ldr	r5, [pc, #28]	@ (8007e08 <_kill_r+0x20>)
 8007dec:	2300      	movs	r3, #0
 8007dee:	4604      	mov	r4, r0
 8007df0:	4608      	mov	r0, r1
 8007df2:	4611      	mov	r1, r2
 8007df4:	602b      	str	r3, [r5, #0]
 8007df6:	f7f9 fd68 	bl	80018ca <_kill>
 8007dfa:	1c43      	adds	r3, r0, #1
 8007dfc:	d102      	bne.n	8007e04 <_kill_r+0x1c>
 8007dfe:	682b      	ldr	r3, [r5, #0]
 8007e00:	b103      	cbz	r3, 8007e04 <_kill_r+0x1c>
 8007e02:	6023      	str	r3, [r4, #0]
 8007e04:	bd38      	pop	{r3, r4, r5, pc}
 8007e06:	bf00      	nop
 8007e08:	20000468 	.word	0x20000468

08007e0c <_getpid_r>:
 8007e0c:	f7f9 bd55 	b.w	80018ba <_getpid>

08007e10 <__swhatbuf_r>:
 8007e10:	b570      	push	{r4, r5, r6, lr}
 8007e12:	460c      	mov	r4, r1
 8007e14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e18:	2900      	cmp	r1, #0
 8007e1a:	b096      	sub	sp, #88	@ 0x58
 8007e1c:	4615      	mov	r5, r2
 8007e1e:	461e      	mov	r6, r3
 8007e20:	da0d      	bge.n	8007e3e <__swhatbuf_r+0x2e>
 8007e22:	89a3      	ldrh	r3, [r4, #12]
 8007e24:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007e28:	f04f 0100 	mov.w	r1, #0
 8007e2c:	bf14      	ite	ne
 8007e2e:	2340      	movne	r3, #64	@ 0x40
 8007e30:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007e34:	2000      	movs	r0, #0
 8007e36:	6031      	str	r1, [r6, #0]
 8007e38:	602b      	str	r3, [r5, #0]
 8007e3a:	b016      	add	sp, #88	@ 0x58
 8007e3c:	bd70      	pop	{r4, r5, r6, pc}
 8007e3e:	466a      	mov	r2, sp
 8007e40:	f000 f848 	bl	8007ed4 <_fstat_r>
 8007e44:	2800      	cmp	r0, #0
 8007e46:	dbec      	blt.n	8007e22 <__swhatbuf_r+0x12>
 8007e48:	9901      	ldr	r1, [sp, #4]
 8007e4a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007e4e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007e52:	4259      	negs	r1, r3
 8007e54:	4159      	adcs	r1, r3
 8007e56:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007e5a:	e7eb      	b.n	8007e34 <__swhatbuf_r+0x24>

08007e5c <__smakebuf_r>:
 8007e5c:	898b      	ldrh	r3, [r1, #12]
 8007e5e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e60:	079d      	lsls	r5, r3, #30
 8007e62:	4606      	mov	r6, r0
 8007e64:	460c      	mov	r4, r1
 8007e66:	d507      	bpl.n	8007e78 <__smakebuf_r+0x1c>
 8007e68:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007e6c:	6023      	str	r3, [r4, #0]
 8007e6e:	6123      	str	r3, [r4, #16]
 8007e70:	2301      	movs	r3, #1
 8007e72:	6163      	str	r3, [r4, #20]
 8007e74:	b003      	add	sp, #12
 8007e76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e78:	ab01      	add	r3, sp, #4
 8007e7a:	466a      	mov	r2, sp
 8007e7c:	f7ff ffc8 	bl	8007e10 <__swhatbuf_r>
 8007e80:	9f00      	ldr	r7, [sp, #0]
 8007e82:	4605      	mov	r5, r0
 8007e84:	4639      	mov	r1, r7
 8007e86:	4630      	mov	r0, r6
 8007e88:	f7fe febe 	bl	8006c08 <_malloc_r>
 8007e8c:	b948      	cbnz	r0, 8007ea2 <__smakebuf_r+0x46>
 8007e8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e92:	059a      	lsls	r2, r3, #22
 8007e94:	d4ee      	bmi.n	8007e74 <__smakebuf_r+0x18>
 8007e96:	f023 0303 	bic.w	r3, r3, #3
 8007e9a:	f043 0302 	orr.w	r3, r3, #2
 8007e9e:	81a3      	strh	r3, [r4, #12]
 8007ea0:	e7e2      	b.n	8007e68 <__smakebuf_r+0xc>
 8007ea2:	89a3      	ldrh	r3, [r4, #12]
 8007ea4:	6020      	str	r0, [r4, #0]
 8007ea6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007eaa:	81a3      	strh	r3, [r4, #12]
 8007eac:	9b01      	ldr	r3, [sp, #4]
 8007eae:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007eb2:	b15b      	cbz	r3, 8007ecc <__smakebuf_r+0x70>
 8007eb4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007eb8:	4630      	mov	r0, r6
 8007eba:	f000 f81d 	bl	8007ef8 <_isatty_r>
 8007ebe:	b128      	cbz	r0, 8007ecc <__smakebuf_r+0x70>
 8007ec0:	89a3      	ldrh	r3, [r4, #12]
 8007ec2:	f023 0303 	bic.w	r3, r3, #3
 8007ec6:	f043 0301 	orr.w	r3, r3, #1
 8007eca:	81a3      	strh	r3, [r4, #12]
 8007ecc:	89a3      	ldrh	r3, [r4, #12]
 8007ece:	431d      	orrs	r5, r3
 8007ed0:	81a5      	strh	r5, [r4, #12]
 8007ed2:	e7cf      	b.n	8007e74 <__smakebuf_r+0x18>

08007ed4 <_fstat_r>:
 8007ed4:	b538      	push	{r3, r4, r5, lr}
 8007ed6:	4d07      	ldr	r5, [pc, #28]	@ (8007ef4 <_fstat_r+0x20>)
 8007ed8:	2300      	movs	r3, #0
 8007eda:	4604      	mov	r4, r0
 8007edc:	4608      	mov	r0, r1
 8007ede:	4611      	mov	r1, r2
 8007ee0:	602b      	str	r3, [r5, #0]
 8007ee2:	f7f9 fd52 	bl	800198a <_fstat>
 8007ee6:	1c43      	adds	r3, r0, #1
 8007ee8:	d102      	bne.n	8007ef0 <_fstat_r+0x1c>
 8007eea:	682b      	ldr	r3, [r5, #0]
 8007eec:	b103      	cbz	r3, 8007ef0 <_fstat_r+0x1c>
 8007eee:	6023      	str	r3, [r4, #0]
 8007ef0:	bd38      	pop	{r3, r4, r5, pc}
 8007ef2:	bf00      	nop
 8007ef4:	20000468 	.word	0x20000468

08007ef8 <_isatty_r>:
 8007ef8:	b538      	push	{r3, r4, r5, lr}
 8007efa:	4d06      	ldr	r5, [pc, #24]	@ (8007f14 <_isatty_r+0x1c>)
 8007efc:	2300      	movs	r3, #0
 8007efe:	4604      	mov	r4, r0
 8007f00:	4608      	mov	r0, r1
 8007f02:	602b      	str	r3, [r5, #0]
 8007f04:	f7f9 fd51 	bl	80019aa <_isatty>
 8007f08:	1c43      	adds	r3, r0, #1
 8007f0a:	d102      	bne.n	8007f12 <_isatty_r+0x1a>
 8007f0c:	682b      	ldr	r3, [r5, #0]
 8007f0e:	b103      	cbz	r3, 8007f12 <_isatty_r+0x1a>
 8007f10:	6023      	str	r3, [r4, #0]
 8007f12:	bd38      	pop	{r3, r4, r5, pc}
 8007f14:	20000468 	.word	0x20000468

08007f18 <_init>:
 8007f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f1a:	bf00      	nop
 8007f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f1e:	bc08      	pop	{r3}
 8007f20:	469e      	mov	lr, r3
 8007f22:	4770      	bx	lr

08007f24 <_fini>:
 8007f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f26:	bf00      	nop
 8007f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f2a:	bc08      	pop	{r3}
 8007f2c:	469e      	mov	lr, r3
 8007f2e:	4770      	bx	lr
